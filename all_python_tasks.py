'''
1. Напишите программу:
Составьте выражение для вычисления 2014 в 14 степени в интерпретаторе Python 3 и вставьте в поле ответа результат вычисления: ''' 
 print(2014**14))
--------------------------------------------------------------------------------------------------------------
'''
2. Тимофей обычно спит ночью XX часов и устраивает себе днем тихий час на YY минут. Определите, сколько всего минут Тимофей спит в сутки.

Внимание, программа принимает значения XX и YY из стандартного потока ввода (функция input), результат надо выводить в стандартный поток вывода (функция print). Обратите внимание на то, что приглашение, переданное в качестве аргумента в функцию input, считается выводом вашей программы. Используйте эту функцию без аргументов:
Для этой задачи введён корректный шаблон, так что решать ничего не нужно, разберитесь с тем, что происходит в решении и как нужно оформлять код для сдачи его в систему.

Также обратите внимание, что в этой задаче (и во всех последующих задачах, где вам надо будет написать программу), предлагается пример входных (Sample Input) и выходных данных (Sample Output). Вы можете использовать эти данные для того, чтобы проверить, что ваша программа работает правильно (по крайней мере на одном примере), и вы используете верный формат ввода-вывода (например, если в задаче несколько чисел надо вывести в одну строку, а вы выводите каждое число на отдельной строке, то такой вывод будет считаться неверным). Имейте в виду, что проверяться ваша программа будет на большом наборе тестов, поэтому рекомендуем вам перед отправкой решения самостоятельно запустить вашу программу на еще каких-нибудь данных помимо примера из условия.

Обратите также внимание на ответ от проверяющей системы, доступный по кнопке "Feedback". Там может сообщаться о том, на каком тесте ваше решение выдаёт неверный ответ или о другой ошибке времени выполнения.

Примечание: обратите внимание, что приведённый код правильно работает для каждого из примеров по отдельности.
 
Sample Input 1:
7
30
Sample Output 1:
450

Sample Input 2:
0
42
Sample Output 2:
42

Sample Input 3:
0
8
Sample Output 3:
480

Sample Input 4:
8
32
Sample Output 4:
512
'''
a = int(input())
b = int(input())
print((a * 60) + b)
--------------------------------------------------------------------------------------------------------------
'''
3. Коля каждый день ложится спать ровно в полночь и недавно узнал, что оптимальное время для его сна составляет XX минут. 
Коля хочет поставить себе будильник так, чтобы он прозвенел ровно через XX минут после полуночи, однако для этого необходимо
указать время сигнала в формате часы, минуты. Помогите Коле определить, на какое время завести будильник.
Часы и минуты в выводе программы должны располагаться на разных строках (см. пример работы программы)
Помните, что для считывания данных нужно вызывать функцию input без аргументов!
'''
i = int(input())
hour = i//60
min = i - hour * 60
print(hour)
print(min)

a = int(input())
print(a // 60)
print(a % 60)

--------------------------------------------------------------------------------------------------------------
'''
4.Дан список [-1, 0, 5, 3, 2]. Необходимо изменить его, увеличив каждое значение на 7.2.
'''
lst = [-1, 0, 5, 3, 2]
for n in lst:
  z = n + 7.2
  print (z)
--------------------------------------------------------------------------------------------------------------
'''
5.Пользователь вводит с клавиатуры N значений (строки или числа). На их основе сформировать список,
состоящий из продублированных элементов. (Например, из значений 1, 5, "abc" формируется список [1, 1, 5,5,"abc", "abc"]).
'''
lst = input("Введиет значение:").split()
for i in lst:
  c = i + i
  print(c, end='')
--------------------------------------------------------------------------------------------------------------
'''
6.Написать программу сложения двух матриц:
              |1 2|  |1 0|   
            A=|3 4|+ |0 1|
              |5 6|  |1 1|
'''
m1 = [[1,2],[3,4],[5,6]]
m2 = [[1,0],[0,1],[1,1]]

a = [[0,0],[0,0],[0,0]]

for i in range (len(m1)):
  for j in range(len(a[0])):
    a[i][j] = m1[i][j]+m2[i][j]
print(a)
--------------------------------------------------------------------------------------------------------------
'''
7.Пользователь вводит N значений в список. Необходимо проверить: было ли введено число 5.
'''
lst = input("Введиет значение:")
n = '5'
if n in lst:
  print('5 было введено')
else:
  print('5 не было введено')
--------------------------------------------------------------------------------------------------------------
'''
8.Пользователь вводит с клавиатуры числа, до тех пор, пока не введет число 0. На основе введенных
данных нужно сформировать список, состоящий из квадратов введенных числел.
'''
num = []
while True:
  n = int(input("Вводите числа:"))
  if n != 0:
    num.append(n**2)
  else:break 
print(num)
--------------------------------------------------------------------------------------------------------------
'''
9.Написать прогармму удаления из списка
                ['+7912123456','+7915213456','+6915213456','+4915213456','+7915213456']
всех номеров с кодом "+7".
'''
def anti7(some_list, index):
  if index == len(some_list):
    return some_list
  if "+7" in some_list[index]:
    del some_list[index]
    return anti7(some_list, index)
  else:
    return anti7(some_list, index + 1)
lst = ["+7234543275", "+7684039206", "+6959392930", "+4684930201", "+7582905483"]
anti7(lst, 0)
print(lst)
--------------------------------------------------------------------------------------------------------------
'''
10.Написать программу циклического сдвига элементов списка влево. Например, дан список:
                                        [1,2,3,4,5,6]
после сдвига на один элемент влево, должны получить:
                                        [2,3,4,5,6,1]
Реализовать через цикл, перебирая все элементы. 
'''
d=[1,2,3,4,5,6]
for i in range(len(d)-1):
  d.append(d[0])
  d.remove(d[0])
  print(d)
--------------------------------------------------------------------------------------------------------------
'''  
11.Написать программу циклического сдвига элементов списка вправо. Например, дан список:
                                        [1,2,3,4,5,6]
после сдвига на один элемент вправо, должны получить:
                                        [6,1,2,3,4,5]
Реализовать через цикл, перебирая все элементы.  
'''
d=[1,2,3,4,5,6]
for i in range(len(d)):
  b=d.pop()
  d.insert(0,b)
  print(d)
--------------------------------------------------------------------------------------------------------------
'''
12.Напишите программу, на вход которой подается одна строка с целыми числами. Программа должна вывести минимальное значение этих чисел.
Программа реализуется без использования функций min.
Sample Input:
4 7 3 8
Sample Output:
3
'''
a = [int(i) for i in input().split()]
m = a[0]
for x in a:
    if m > x:
        m = x
print(m)
--------------------------------------------------------------------------------------------------------------
'''
13.Напишите программу, на вход которой подается одна строка с целыми числами. Программа должна вывести сумму этих чисел.
Используйте метод split строки. 
Sample Input:
4 -1 9 3
Sample Output:
15
'''
n = [ int(i) for i in input().split()]
s = 0
l = len(n)-1
for i in range(0,l+1):
    s = s + n[i]
print(s)
---
print(sum(int(i) for i in input().split()))
---
print(sum(map(int, input().split())))
---
s = 0
for i in input().split():
    s += int(i)
print(s)
--------------------------------------------------------------------------------------------------------------
'''
14.Напишите программу, которая принимает на вход список чисел в одной строке и выводит на экран в одну строку значения, 
которые встречаются в нём более одного раза.
Для решения задачи может пригодиться метод sort списка.
Выводимые числа не должны повторяться, порядок их вывода может быть произвольным.
Sample Input 1:
4 8 0 3 4 2 0 3
Sample Output 1:
0 3 4
Sample Input 2:
10
Sample Output 2:
Sample Input 3:
1 1 2 2 3 3
Sample Output 3:
1 2 3
Sample Input 4:
1 1 1 1 1 2 2 2
Sample Output 4:
1 2
'''
1.  lst = sorted(list(map(int, input().split())))
k = []
for i, n in enumerate(lst):
    if n in lst[i+1:len(lst)]:
        if n in k:
            continue
        k.append(n)
print(*k)

2.  a, c = [str(i) for i in input().split()], []
for i in a:
    if i not in c and a.count(i) > 1:
        c.append(i)
        print(i, end=' ')


3.  ls = [int(i) for i in input().split()]
for i in set(ls):
    if ls.count(i) > 1:
        print(i, end=' ')

4.  str = [int(i) for i in input().split()]
ans = []
[ans.append(x) for x in str if x not in ans and str.count(x) > 1]
print(*ans)


5.  s = input().split()
print (*(i for i in set(s) if s.count(i) > 1))
--------------------------------------------------------------------------------------------------------------
'''
15.Напишите программу, на вход которой подаётся список чисел одной строкой. Программа должна для каждого элемента 
этого списка вывести сумму двух его соседей. Для элементов списка, являющихся крайними, одним из соседей считается элемент, 
находящий на противоположном конце этого списка. Например, если на вход подаётся список "1 3 5 6 10", то на выход ожидается 
список "13 6 9 15 7" (без кавычек).
Если на вход пришло только одно число, надо вывести его же.
Вывод должен содержать одну строку с числами нового списка, разделёнными пробелом.
Sample Input 1:
1 3 5 6 10
Sample Output 1:
13 6 9 15 7
Sample Input 2:
10
Sample Output 2:
10
'''
1.  lst = input().split()
if len(lst) == 1:
    print(lst[0])
elif len(lst) > 1:
    lst2 = [int(lst[i - 1]) + int(lst[i + 1]) for i in range(-1, len(lst)-1)]
    for i in range(1, len(lst2)):
        print(lst2[i], end=' ')
    print(lst2[0])

2.  numbers = [int(i) for i in input().split()]
if len(numbers) == 1:
    print(numbers[0])
else:
    for i in range(len(numbers)):
        print(numbers[i - 1] + numbers[(i + 1) % len(numbers)], end=" ")

3.  arr = list(map(int, input().split()))
print(*arr if len(arr) == 1 else [arr[i - 1] + arr[(i + 1) % len(arr)] for i in range(len(arr))])

4.  a=[int(i) for i in input().split()]
if len(a)>1:
    for i in range(len(a)):
        print(a[i-1]+a[i+1-len(a)])
else:
    print(a[0])
--------------------------------------------------------------------------------------------------------------
'''
16.Напишите программу, которая считывает список чисел lstlst из первой строки и число xx из второй строки, которая выводит все позиции, 
на которых встречается число xx в переданном списке lstlst.
Позиции нумеруются с нуля, если число xx не встречается в списке, вывести строку "Отсутствует" (без кавычек, с большой буквы).
Позиции должны быть выведены в одну строку, по возрастанию абсолютного значения.
Sample Input 1:
5 8 2 7 8 8 2 4
8
Sample Output 1:
1 4 5
Sample Input 2:
5 8 2 7 8 8 2 4
10
Sample Output 2:
Отсутствует
'''
1.  lst = [int(i) for i in input().split()]
x = int(input())
for i in range(len(lst)):
   if x == lst[i]:
      print(i, end=' ')
if x not in lst:
    print('Отсутствует')

2.  lst, x = input().split(), input()
if x in lst:
    for i in range(len(lst)):
        if lst[i] == x:
            print(i, end=' ')
else:
    print('Отсутствует')


3.  s = [int(i) for i in input().split()]
x = int(input())
if x in s:
    for i in range(len(s)):
        if s[i] == x:
            print(i, end=' ')
else:
    print('Отсутствует')


--------------------------------------------------------------------------------------------------------------
'''            
17.Требуется найти длину удава, выраженную в мартышках, попугаях или слоненках, по выбору пользователя. "Эффективная длина" 
попугая - 10см, мартышки - 90см, слоненка - 3м. Результат округляйте вниз, однако, если при этом получается ноль, выведите 1, 
чтобы не обижать удава.
Примеры
-> 200
-> monkey
--
<- 2
-> 200
-> elephant
--
<- 1

Формат ввода
В первой строке натуральное число - длина удава в сантиметрах. Во втрой строке - "в ком измерять", "monkey", "parrot" или "elephant".
Формат вывода
Одно число — результат.
Код с не достатком, тест не прошел – работает
'''
import math
a = int(input())
b = (input())
cou = 0
if b == 'monkey' and a >= 90:
    cou = a / 90
    print(math.floor(cou))
elif a < 90:
    print(1)
elif b == 'parrot' and a >= 10:
    cou = a / 10
    print(math.floor(cou))
elif a < 10:
    print(1)
elif b == 'elephant' and a >= 300:
    cou = a / 300
    print(math.floor(cou))
elif a < 300:
    print(1)

Вариант – все ок
import math
a = int(input())
b = input()
if b == 'monkey' and a > 90:
    print(math.floor(a / 90))
elif b == 'parrot' and a > 10:
    print(math.floor(a / 10))
elif b == 'elephant' and a > 300:
    print(math.floor(a / 300))
else:
    print(1)


snake=int(input())
choice=input()
d=0
if choice.lower()=='monkey':
    d=snake//90
elif choice.lower()=='parrot':
    d=snake//10
elif choice.lower()=='elephant':
    d=snake//300
if d==0:
    d=1
print(d)
--------------------------------------------------------------------------------------------------------------
'''
18.Шахматный слон может ходить на любое число клеток по диагонали. Даны две различные клетки шахматной доски, определите, может ли слон попасть с первой клетки на вторую одним ходом. Для простоты можно не рассматривать случай, когда данные клетки совпадают.
Примеры
-> 1
-> 1
-> 8
-> 8
--
<- YES
-> 1
-> 1
-> 1
-> 2
--
<- NO
Формат ввода
Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки.
Формат вывода
Программа должна вывести YES, если из первой клетки ходом слона можно попасть во вторую или NO в противном случае.
'''
1.  x1 = int(input())
y1 = int(input())
x2 = int(input())
y2 = int(input())
if x1 - x2 == y1 - y2:
    print('YES')
else:
    print('NO')
2.  x1 = int(input())#используем функцию модуль
y1 = int(input())
x2 = int(input())
y2 = int(input())
if abs(x1 - x2) == abs(y1 - y2):
    print('YES')
else:
    print('NO')
--------------------------------------------------------------------------------------------------------------
'''
19.Больше – меньше. Вам дано выражение вида "a x b", где a и b - натуральные числа, а x - знак сравнения, '<' или '>'. Истинно ли данное выражение?
Примеры
-> 1
-> <
-> 2
--
<- YES
-> 10
-> >
-> 100
--
<- NO
Формат ввода
В первой строке число a, во второй знак сравнения, в третьей - число b. Оба числа - натуральные.
Формат вывода
Если выражение истинно, выведите YES, иначе NO
'''
a = int(input())
c = (input())
b = int(input())
if c == '>' and a > b:
    print('YES')
if c == '<' and a < b:
    print('YES')
else:
    print('NO')
--------------------------------------------------------------------------------------------------------------
'''
20.Сумма чисел трехзначного числа
Дано трехзначное число. Найдите сумму его цифр.
Примеры
-> 179
--
<- 17
Формат ввода
Вводится трехзначное число: не меньшее 100 и не больше 999.
Формат вывода
Одно число — сумма цифр.
'''
a = input()
c = 0
for i in a:
    a = int(a)
    i = int(i)
    c = c + i
print(c)
--------------------------------------------------------------------------------------------------------------
'''
21.Сравнить два числа.
Примеры
-> 1 1
--
<- 0
-> -3 10
--
<- 2
Формат ввода
В строке последовательно вводятся два числа, которые нужно сравнить.
Формат вывода
Необходимо вывести 1 - первое число больше второго, 2 - второе число больше первого, 0 - числа равны.
'''
x, y = list(map(int, input(). split()))
if x > y:
    print(1)
elif x < y:
    print(2)
else:
    print(0)
--------------------------------------------------------------------------------------------------------------
'''
22.Даны координаты точки и радиус круга с центром в начале координат. Определить, принадлежит ли данная точка кругу. 
Напомним, что круг – это часть плоскости, состоящая из всех точек окружности и всех точек, лежащих внутри окружности.
Примеры
-> 0 0 1
--
<- YES
-> -1 3 1
--
<- NO
Формат ввода
Три целых числа на одной строке: координата точки по оси x, координата точки по оси y, радиус круга r (r > 0).
Формат вывода
Вывести "YES" без кавычек, если точка принадлежит кругу, "NO" без кавычек в противном случае.
'''
import math
x, y, r = list(map(int, input(). split()))
xyr = math.sqrt(x ** 2 + y ** 2)
if xyr <= r:
    print('YES')
else:
    print('NO')
--------------------------------------------------------------------------------------------------------------
'''
23.Разбиваем целое положительное число по цифрам. Например 4567
'''
1.  x = int(input('Введите положительное число:'))# простым способом 
d =[]
while x:
  d.append(x % 10)
  x = x // 10
print(d)

2.  x = int(input('Введите положительное число:'))# в данном примере список                  формируется по порядку.
d =[]
while x:
  d = [x % 10] + d 
  x = x // 10
print(d)
--------------------------------------------------------------------------------------------------------------
'''
24.Меняем порядок следования элементов списка.
'''
n = 11
a = list(range(n))
print(a)

for i in range(n // 2):
  a[i], a[n-i-1] = a[n-i-1], a[i]
print(a)
--------------------------------------------------------------------------------------------------------------
'''
25.Сортировка методом выбора.
'''
a = [2, 2, -1, -5, 55, 34, 0, 10]
n = len(a)
for i in range(n-1):
  for j in range(i+1, n):
    if a[i] > a[j]:
      a[i], a[j] = a[j], a[i]
print(a)   
--------------------------------------------------------------------------------------------------------------
'''
26.Реализуйте программу, которая принимает последовательность чисел и выводит их сумму.
Вашей программе на вход подается последовательность строк.
Первая строка содержит число n (1 ≤ n ≤ 100).
В следующих n строках содержится по одному целому числу.
Выведите одно число – сумму данных n чисел.
Примечание:
﻿Чтобы считать одно число из стандартного потока ввода, можно использовать, например, следующий код
n = int(input())
Sample Input 1:
2
2
3
Sample Output 1:
5
Sample Input 2:
2
-2
-2
Sample Output 2:
-4
Sample Input 3:
1
31
Sample Output 3:
31
'''
n = int(input())
result_sum = 0
if 1 <= n <= 10000:
    lst = list(int(input()) for i in range(n))
    for f in lst:
        result_sum += f
print(result_sum)

--------------------------------------------------------------------------------------------------------------
'''
27.Реализуйте программу, которая будет вычислять количество различных объектов в списке.
Два объекта a и b считаются различными, если a is b равно False.
Вашей программе доступна переменная с названием objects, которая ссылается на список, содержащий не более 100 объектов. Выведите количество различных объектов в этом списке.
Формат ожидаемой программы:
ans = 0
for obj in objects: # доступная переменная objects
    ans += 1
print(ans)
Примечание:
Количеством различных объектов называется максимальный размер множества объектов, в котором любые два объекта являются различными.
Рассмотрим пример:
objects = [1, 2, 1, 2, 3] # будем считать, что одинаковые числа соответствуют одинаковым объектам, а различные – различным
Тогда все различные объекты являют собой множество {1, 2, 3}﻿. Таким образом, количество различных объектов равно трём.
'''
objects = [1, 2, 1, 5, True, False, True, 'false', [], [1,2], [1,2]] #для проверки
lst = []
for i in objects:
    if i not in lst:
        lst.append(i)

print(len(lst))
--------------------------------------------------------------------------------------------------------------
'''
28.Напишите реализацию функции closest_mod_5, принимающую в качестве единственного аргумента целое число x и возвращающую 
самое маленькое целое число y, такое что:
y больше или равно x
y делится нацело на 5
Формат того, что ожидается от вас в качестве ответа:
def closest_mod_5(x):
    if x % 5 == 0:
        return x
    return "I don't know :("
'''

def closest_mod_5(x):
    y = x
    while y >= x:
        if y % 5 == 0:
            return y
        else:
            y += 1

print(closest_mod_5(7)) # для проверки
--------------------------------------------------------------------------------------------------------------
'''
29.Сочетанием из n элементов по k называется подмножество этих n элементов размера k.
Два сочетания называются различными, если одно из сочетаний содержит элемент, который не содержит другое.
Числом сочетаний из n по k называется количество различных сочетаний из n по k. Обозначим это число за C(n, k).

Пример:
Пусть n = 3, т. е. есть три элемента (1, 2, 3). Пусть k = 2.
Все различные сочетания из 3 элементов по 2: (1, 2), (1, 3), (2, 3).
Различных сочетаний три, поэтому C(3, 2) = 3.

Несложно понять, что C(n, 0) = 1, так как из n элементов выбрать 0 можно единственным образом, а именно, ничего не выбрать.
Также несложно понять, что если k > n, то C(n, k) = 0, так как невозможно, например, из трех элементов выбрать пять.

Для вычисления C(n, k) в других случаях используется следующая рекуррентная формула:
C(n, k) = C(n - 1, k) + C(n - 1, k - 1).

Реализуйте программу, которая для заданных n и k вычисляет C(n, k).

Вашей программе на вход подается строка, содержащая два целых числа n и k (1 ≤ n ≤ 10, 0 ≤ k ≤ 10).
Ваша программа должна вывести единственное число: C(n, k).

Примечание:
Считать два числа n и k вы можете, например, следующим образом:

n, k = map(int, input().split())
Sample Input 1:

3 2
Sample Output 1:

3
Sample Input 2:

10 5
Sample Output 2:

252
'''
def C(n, k):
    #3if 1 <= n <= 10 and 0 <= k <= 10:
        if k == 0:
            return 1
        elif k > n:
            return 0
        else:
            return C((n) - 1, k) + C(n - 1, k - 1)
n, k = map(int, input().split())  
print(C(n,k))  
--------------------------------------------------------------------------------------------------------------
'''
30.Последовательность состоит из натуральных чисел и завершается числом 0.
 Определите значение наибольшего четного элемента последовательности. Числа, следующие за нулем, считывать не нужно.
Примеры
-> 1
-> 2
-> 4
-> 7
-> 4
-> 0
--
<- 4
-> 1
-> 3
-> 5
-> 0
--
<- 0
Формат ввода
Последовательность целых чисел, оканчивающаяся числом 0 (само число 0 в последовательность не входит).
Каждое число на новой строке.
Формат вывода
Одно число — максимальное четное число в последовательности, если четные числа в ней присутствуют, иначе - 0.
'''
result = 0
num = -1
while num != 0:
    num = int(input())
    if num % 2 == 0:
        if num > result:
            result = num
print(result)
--------------------------------------------------------------------------------------------------------------
'''
31.Найти минимальное число в последовательности чисел и количество его повторений.
Примеры
-> 10
-> 5 6 1 -2 -2 6 9 1 1 -2
--
<- -2 3
-> 4
-> 1 3 3 3
--
<- 1 1
Формат ввода
В первой строке вводится одно целое положительное число N - количество чисел в последовательности.
В следующей строке содержатся N элементов последовательности.
Формат вывода
Программа должна вывести минимальное найденное число и количество его повторений по образцу в примере.
'''
n = int(input())
lst = list(map(int, input().split()))
s = lst[0]
count_min = 0
for num in lst:
    if num< s:
        s = num
count_min = lst.count(s)
print(s, count_min)
--------------------------------------------------------------------------------------------------------------
'''
32.Посчитать количество четных чисел в последовательности. Последовательность целых чисел заканчивается нулём.
Ноль не входит в последовательность.
Примеры
-> 1
-> 2
-> 0
--
<- 1
-> 1
-> -1
-> 0
--
<- 0
Формат ввода: Каждое число вводится с новой строки.
Формат вывода: Одно число — результат.
'''
result = -1
num = -1
while num != 0:
    num = int(input())
    if num % 2 == 0:
        result += 1
print(result)
--------------------------------------------------------------------------------------------------------------
'''
33.Вам на вход подается N целых чисел. Вам необходимо будет найти среди них два числа,
которые дают максимальное произведение. Ответом на задачу будет произведение этих чисел.
Массивы использовать в данной задаче запрещено!
Примеры
-> 5
-> 2
-> 8
-> 1
-> 3
-> 2
--
<- 24
-> 3
-> 0
-> 0
-> 1
--
<- 0
Формат ввода
На первой строке вводится натуральное N, 2 ≤ N ≤ 10000. На последующих N строках вводятся целые числа |ai| ≤ 10000.
Формат вывода
Одно число — максимальное произведение двух чисел.'''


n = int(input()) # вводим число
max1 = 0
max2 = 0
min1 = 0
min2 = 0
if 2 <= n <= 10000:
    lst = list(int(input()) for i in range(n))
    for f in lst:
        if f > 0:
           if f > max1:
               max2 = max1
               max1 = f
           elif f > max2:
               max2 = f
        elif f < 0:
           if f < min1:
               min2 = min1
               min1 = f
           elif f < min2:
               min2 = f
mx = max1 * max2
print(mx)
# option 2
'''n = int(input())

max1 = None
max2 = None
min1 = None
min2 = None

for _ in range(n):

    a = int(input())

    if max1 is None:
        max1 = a
        min1 = a

    elif max2 is None:

        if a >= max1:
            max2 = max1
            max1 = a
            min2 = a
        else:
            max2 = a
            min2 = min1
            min1 = a

    else:

        if a >= max1:
            max2 = max1
            max1 = a

        elif a >= max2:
            max2 = a

        if a <= min1:
            min2 = min1
            min1 = a

        elif a <= min2:
            min2 = a

p1 = max1 * max2
p2 = min1 * min2

print(max(p1, p2))
'''
--------------------------------------------------------------------------------------------------------------
'''
34.Дано натуральное число N. Выведите слово YES, если число
N является точной степенью двойки, или слово NO в противном случае.
ВАЖНО! В данной задаче необходимо использовать цикл.
В этой задаче нельзя использовать функцию pow. Инструкция if должна находиться после цикла.
Примеры
-> 8
--
<- YES
-> 3
--
<- NO
Формат ввода
На вход программе подается натуральное число N, не превышающее 10000.
Формат вывода
Программа печатает YES если число является точной степенью двойки, иначе NO.
'''
number_ = int(input())
while number_ <= 10000:
    if number_ & (number_-1) == 0:
        print('YES')
        break
    else:
        print('NO')
        break
--------------------------------------------------------------------------------------------------------------
'''
35.Вклад в банке составляет x рублей. Ежегодно он увеличивается на p процентов,
после чего дробная часть копеек отбрасывается. Каждый год сумма вклада становится больше.
Надо определить, через сколько лет вклад составит не менее y рублей.
Примеры
-> 100 10 200
--
<- 8
-> 1 1 2
--
<- 100
Формат ввода
Три натуральных числа: x, p, y.
Формат вывода
Число лет, через сколько лет вклад составит не менее y рублей.
'''
x, p, y = list(map(int, input().split()))
count_years = 0

while x < y:
    x += x / 100 * p
    x = int(100 * x) / 100
    count_years +=1
print(count_years)
--------------------------------------------------------------------------------------------------------------
'''
36.На вход программе подается последовательность чисел, заканчивающихся нулем.
Сам ноль не входит в последовательность. Найти среднее значение последовательности.
Для округления использовать функцию round(x, n). Где x - число, n - количество знаков после запятой.
Примеры
-> 4
-> 8
-> 5
-> 0
--
<- 5.67
Формат ввода
Последовательность чисел, заканчивающихся нулем. Одно число в строку.
Формат вывода
Одно число — среднее значение. Округлить до двух цифр после запятой.
'''

sum_num = 0
len_num = 0
num = int(input())
while num != 0:
    sum_num += num
    if num > 0:
        len_num += 1
    num = int(input())
result = sum_num / len_num
print(round(result, 2))
--------------------------------------------------------------------------------------------------------------
'''
37.Необходимо найти НОД двух чисел, используя алгоритм Евклида.
Примеры
-> 30
-> 18
--
<- 6
-> 1071
-> 462
--
<- 21
Формат ввода: На вход подаются два натуральных числа, по числу в новой строке.
Формат вывода: Одно число - НОД входных чисел.
'''
a = int(input())
b = int(input())

while a != 0 and b != 0:
    if a > b:
        a %= b
    else:
        b %= a
print(a + b)
--------------------------------------------------------------------------------------------------------------
'''
38.Сравнение двух чисел
Сравнить два числа.
Примеры
-> 1 1
--
<- 0
-> -3 10
--
<- 2
Формат ввода
В строке последовательно вводятся два числа, которые нужно сравнить.
Формат вывода
Необходимо вывести 1 - первое число больше второго, 2 - второе число больше первого, 0 - числа равны.
'''

x, y = map(int, input(). split())
if x > y:
    print(1)
elif x < y:
    print(2)
else:
    print(0)
--------------------------------------------------------------------------------------------------------------
'''
39.Длина удава
Требуется найти длину удава, выраженную в мартышках, попугаях или слоненках, по выбору пользователя.
"Эффективная длина" попугая - 10см, мартышки - 90см, слоненка - 3м. Результат округляйте вниз, однако,
если при этом получается ноль, выведите 1, чтобы не обижать удава.
Примеры
-> 200
-> monkey
--
<- 2
-> 200
-> elephant
--
<- 1
Формат ввода
В первой строке натуральное число - длина удава в сантиметрах.
Во втрой строке - "в ком измерять", "monkey", "parrot" или "elephant".
Формат вывода
Одно число — результат.'''

import math
a = int(input())
b = input()
cou = 0
if b == 'monkey' and a > 90:
    print(math.floor(a / 90))
elif b == 'parrot' and a > 10:
    print(math.floor(a / 10))
elif b == 'elephant' and a > 300:
    print(math.floor(a / 300))
else:
    print(1)
--------------------------------------------------------------------------------------------------------------
'''
40.Принадлежность точки кругу
Даны координаты точки и радиус круга с центром в начале координат.
Определить, принадлежит ли данная точка кругу. Напомним, что круг –
это часть плоскости, состоящая из всех точек окружности и всех точек, лежащих внутри окружности.
Примеры
-> 0 0 1
--
<- YES
-> -1 3 1
--
<- NO
Формат ввода
Три целых числа на одной строке: координата точки по оси x, координата точки по оси y, радиус круга r (r > 0).
Формат вывода
Вывести "YES" без кавычек, если точка принадлежит кругу, "NO" без кавычек в противном случае.'''

import math
x, y, r = list(map(int, input(). split()))
xyr = math.sqrt(x ** 2 + y ** 2)
if xyr <= r:
    print('YES')
else:
    print('NO')
--------------------------------------------------------------------------------------------------------------
'''
41.Больше-меньше
Вам дано выражение вида "a x b", где a и b - натуральные числа, а x - знак сравнения,
'<' или '>'. Истинно ли данное выражение?
Примеры
-> 1
-> <
-> 2
--
<- YES
-> 10
-> >
-> 100
--
<- NO
Формат ввода
В первой строке число a, во второй знак сравнения, в третьей - число b. Оба числа - натуральные.
Формат вывода
Если выражение истинно, выведите YES, иначе NO'''

a = int(input())
c = (input())
b = int(input())
if c == '>' and a > b:
    print('YES')
if c == '<' and a < b:
    print('YES')
else:
    print('NO')
--------------------------------------------------------------------------------------------------------------
'''
42.Високосный год
Требуется определить, является ли данный год високосным.
(Год является високосным, если его номер кратен 4, но не кратен 100, а также если он кратен 400).
Примеры
-> 1
--
<- NO
-> 2000
--
<- YES
Формат ввода
На вход подается натуральное число N - номер года (0 < N < 100000).
Формат вывода
Вывести YES если год високосный и NO в противном случае.'''

n = int(input())
if n%4 ==0 and n%100 !=0 or n%400 ==0:
    print ('YES')
else:
    print ('NO')
--------------------------------------------------------------------------------------------------------------
'''
43.Сумма цифр трехзначного числа
Дано трехзначное число. Найдите сумму его цифр.
Примеры
-> 179
--
<- 17
Формат ввода
Вводится трехзначное число: не меньшее 100 и не больше 999.
Формат вывода
Одно число — сумма цифр.
'''

a = input()
c = 0
for i in a:
    a = int(a)
    i = int(i)
    c = c + i
print(c)
--------------------------------------------------------------------------------------------------------------
'''
44.Ход слона
Шахматный слон может ходить на любое число клеток по диагонали.
Даны две различные клетки шахматной доски, определите, может ли слон попасть с первой клетки на вторую одним ходом.
Для простоты можно не рассматривать случай, когда данные клетки совпадают.
Примеры
-> 1
-> 1
-> 8
-> 8
--
<- YES
-> 1
-> 1
-> 1
-> 2
--
<- NO
Формат ввода
Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала
для первой клетки, потом для второй клетки.
Формат вывода
Программа должна вывести YES, если из первой клетки ходом слона можно попасть во вторую или
NO в противном случае.
'''

x1 = int(input())
y1 = int(input())
x2 = int(input())
y2 = int(input())
if x1 - x2 == y1 - y2:
    print('YES')
else:
    print('NO')
--------------------------------------------------------------------------------------------------------------
'''
45.По данному натуральному числу найти минимальное натуральное число,
состоящее из тех же цифр, что и данное.
Примеры
-> 1
--
<- 1
-> 4321
--
<- 1234
-> 1990
--
<- 1099
Формат ввода
Одно число - 0 < N <= 100000.
Формат вывода
Одно число — минимальное натуральное число, состоящее из тех же цифр, что и N.'''

lst = list(input())
c = lst.count('0')
lst.sort()

for i in range(1, int(c)+1):
    if int(c) == i:
        lst[0], lst[i] = lst[i], lst[0]
        break
fin = [int(i) for i in lst]

for i in range(len(lst)):
    print(fin[i], end='')
--------------------------------------------------------------------------------------------------------------
'''
46.Написать реализацию решета Эратосфена с использованием массивов.
Примеры
-> 5
--
<- 2 3 5
-> 20
--
<- 2 3 5 7 11 13 17 19
Формат ввода
Вводится натуральное число N < 30000.
Формат вывода
Необходимо вывести через пробел все простые числа до N включительно. При отсутствие таковых вывести 0.'''

n = int(input())
if n < 2:
    print(0)
a = [i for i in range(n + 1)if n < 30000]
a[1] = 0
i = 2
while i < n ** 0.5:
    if a[i] != 0:
        j = i ** 2
        while j <= n:
            a[j] = 0
            j += i
    i += 1
a = [i for i in a if a[i] != 0]
print(*a)


'''
n = int(input())
 
# список заполняется значениями от 0 до n
a = []
for i in range(n + 1):
    a.append(i)
 
# Вторым элементом является единица,
# которую не считают простым числом
# забиваем ее нулем.
a[1] = 0
 
# начинаем с 3-го элемента
i = 2
while i <= n:
    # Если значение ячейки до этого
    # не было обнулено,
    # в этой ячейке содержится
    # простое число.
    if a[i] != 0:
        # первое кратное ему
        # будет в два раза больше
        j = i + i
        while j <= n:
            # это число составное,
            # поэтому заменяем его нулем
            a[j] = 0
            # переходим к следующему числу,
            # которое кратно i
            # (оно на i больше)
            j = j + i
    i += 1
 
# Превращая список во множество,
# избавляемся от всех нулей кроме одного.
a = set(a)
# удаляем ноль
a.remove(0)
print(a)'''
--------------------------------------------------------------------------------------------------------------
'''
47.Реализуйте функцию get_hidden_card(), которая принимает на вход номер кредитки (состоящий из 16 цифр)
в виде строки и возвращает его скрытую версию, которая может использоваться на сайте для отображения.
Если исходная карта имела номер 2034399002125581, то скрытая версия выглядит так ****5581. Другими словами,
функция заменяет первые 12 символов, на звездочки. Количество звездочек регулируется вторым необязательным параметром.
Значение по умолчанию — 4.

# Кредитка передается внутрь как строка
get_hidden_card('2034399002121100', 1)  # "*1100"
get_hidden_card('1234567812345678', 2)  # "**5678"
get_hidden_card('1234567812345678', 3)  # "***5678"
get_hidden_card('1234567812345678')     # "****5678"
Для выполнения задания вам понадобится размножить строку, в Python это можно сделать так:

"+" * 5  # "+++++"
"o" * 5  # "ooooo"

'''
def get_hidden_card(card_number, stars_count=4):
    visible_digits = card_number[-4:]
    return f'{"*" * stars_count}{visible_digits}'

'''def get_hidden_card(num_card, characters=4):
    return '*' * len(num_card[:characters]) + num_card[characters:]

def card_hide(card):
    return '*' * len(card[:-4]) + card[-4:]
def card_hide(card):
    return '*' * (len(card)-4) + card[-4:]    
'''
print(get_hidden_card('2034399002121100'))
print(get_hidden_card('2034399002121100', 1))  # "*1100"
print(get_hidden_card('1234567812345678', 2))  # "**5678"
print(get_hidden_card('1234567812345678', 3))  # "***5678"
print(get_hidden_card('1234567812345678', 10))
print(get_hidden_card('1234567812345678', 12))
--------------------------------------------------------------------------------------------------------------
'''
48.Реализуйте функцию trim_and_repeat(), которая принимает три параметра: строку,
offset — число символов, на которое нужно обрезать строку слева и repetitions — количество раз,
сколько ее нужно повторить, и возращает получившуюся строку. Число символов для среза по умолчанию равно 0,
а повторений — 1.'''
# BEGIN (write your solution here)
def trim_and_repeat(text, offset=0, repetitions=1):
    visible_digits = text[offset:]
    return f'{repetitions * visible_digits}'
# END
text = 'python'
print(trim_and_repeat(text, offset=3, repetitions=2))  # honhon
print(trim_and_repeat(text, repetitions=3)) # pythonpythonpython
print(trim_and_repeat(text))  # python
--------------------------------------------------------------------------------------------------------------
'''
49.Реализуйте функцию sort_pair, которая принимает пару (кортеж из двух значений) и возвращает пару,
значения которой расположены строго в порядке возрастания.

Пример:
# обратите внимание на скобки у аргумента функции
sort_pair((5, 1)) == (1, 5)
sort_pair((2, 2)) == (2, 2)
sort_pair((7, 8)) == (7, 8)
'''

def sort_pair(krt):
    a, b = krt
    if a > b:
        return (b, a)
    else:
        return krt

print(sort_pair((5, 1)) == (1, 5))
print(sort_pair((2, 2)) == (2, 2))
print(sort_pair((7, 8)) == (7, 8))
--------------------------------------------------------------------------------------------------------------
'''
50.Это задание не связано напрямую с уроком, это просто еще одно полезное упражнение по работе с функциями.

Напишите функцию get_age_difference(), которая принимает два года рождения и возвращает строку
с разницей в возрасте в виде The age difference is 11. Пример работы функции:

actual = get_age_difference(2001, 2018)
print(actual)  # => The age difference is 17
'''

def get_age_difference(your1, your2):
    result = your1 - your2
    result = abs(result)
    return f'The age difference is {result}'

actual = get_age_difference(2001, 2018)
print(actual)
--------------------------------------------------------------------------------------------------------------
'''
51.Реализуйте функцию has_upper_case(), которая определяет, содержит ли строка заглавные буквы.
Функция должна вернуть булево значение:

has_upper_case('')  # False
has_upper_case('python')  # False
has_upper_case('pyThon')  # True
Подсказка
Воспользуйтесь методом из стандартной библиотеки, которая приводит строку к нижнему регистру.
Чем отличается такая строка от исходной?'''

def  has_upper_case(text):
    return text != text.lower()

print(has_upper_case(''))  # False
print(has_upper_case('python'))  # False
print(has_upper_case('pyThon'))  # True
--------------------------------------------------------------------------------------------------------------
'''
52.Реализуйте функцию is_leap_year(), которая определяет, является ли год високосным.
Год будет високосным, если он делится без остатка на 400, или он одновременно делится без
остатка на 4 и не делится на 100:

is_leap_year(2018)  # False
is_leap_year(2017)  # False
is_leap_year(2016)  # True
В определении уже заложена вся необходимая логика, осталось только переложить её на код.'''

def  is_leap_year(year):
    return year % 4 == 0 and year % 100 != 0 or year % 400 == 0


print(is_leap_year(2018))  # False
print(is_leap_year(2017))  # False
print(is_leap_year(2016))  # True
--------------------------------------------------------------------------------------------------------------
'''
53.Реализуйте функцию string_or_not(), которая проверяет является ли переданный параметр строкой.
Если да, то возвращается строка yes, иначе no

string_or_not('Hexlet') # yes
string_or_not(10)       # no
string_or_not('')       # yes
string_or_not(False)    # no
Подсказки
Проверить, что значение является строкой, можно с помощью функции isinstance():

isinstance(3, str) # False
isinstance('Hexlet', str) # True'''

def string_or_not(object):
    if isinstance(object, str):
        return 'yes'
    else:
        return 'no'

print(string_or_not('Hexlet'))  # yes
print(string_or_not(10))  # no
print(string_or_not(''))  # yes
print(string_or_not(False))  # no
--------------------------------------------------------------------------------------------------------------
'''
54.Реализуйте функцию normalize_url(), которая выполняет так называемую нормализацию данных.Она принимает адрес
сайта и возвращает его с https: // в начале. Функция принимает адреса в виде:
АДРЕС
http: // АДРЕС
https: // АДРЕС(уже нормализованный)
и всегда возвращает адрес в виде https: // АДРЕС.

normalize_url('https://ya.ru')  # 'https://ya.ru'
normalize_url('google.com')  # 'https://google.com'
normalize_url('http://ai.fi')  # 'https://ai.fi'
Подсказка: Можносравнить первые 7 символов адреса со строкой http: //.Для этого потребуется получить кусок строки или
отбросить ненужный. Мы рассматривалиспособ получения части строки её начала:
# Берём 2 символа от начала
print('Python'[:2])  # 'Py'

# Отбрасываем первые 2 символа
print('Python'[2:])  # 'thon'
'''

def normalize_url(objects):
     if objects[:8] == 'https://':
         return objects
     elif objects[:7] == 'http://':
         return 'https://' + objects[7:]
     else:
         return 'https://' + objects
print(normalize_url('https://ya.ru'))
print(normalize_url('google.com'))
print(normalize_url(('yandex.ru')))
print(normalize_url((('http://yandex.ru'))))
print(normalize_url('http://ai.fi'))
--------------------------------------------------------------------------------------------------------------
'''
55.Модифицируйте функцию print_numbers() так, чтобы она выводила числа в обратном порядке.
Для этого нужно идти от верхней границы к нижней. То есть счётчик должен быть инициализирован максимальным значением,
а в теле цикла его нужно уменьшать.

print_numbers(4)
# => 4
# => 3
# => 2
# => 1
# => finished!
'''

def print_numbers(last_number):
  # i сокращение от index (порядковый номер)
  # используется по общему соглашению во множестве языков
  # как счетчик цикла
  i = last_number
  while i <= last_number and i > 0:
      print(i)
      i = i - 1
  print('finished!')

print_numbers(3)
# => 1
# => 2
# => 3
# => finished!

--------------------------------------------------------------------------------------------------------------
'''
56.Реализуйте функцию join_numbers_from_range(), которая объединяет все числа из диапазона в строку:

join_numbers_from_range(1, 1)  # '1'
join_numbers_from_range(2, 3)  # '23'
join_numbers_from_range(5, 10)  # '5678910'
'''

def join_numbers_from_range(start, finish):
    i = start
    multiply = ''
    while i <= finish:
        multiply += str(i)
        i += 1
    return multiply

print(join_numbers_from_range(1, 1))  # '1'
print(join_numbers_from_range(2, 3))  # '23'
print(join_numbers_from_range(5, 10))  # '5678910'
--------------------------------------------------------------------------------------------------------------
'''
57.Реализуйте функцию my_substr(), которая извлекает из строки подстроку указанной длины.
Она принимает на вход два аргумента (строку и длину) и возвращает подстроку, начиная с первого символа:

string = 'If I look back I am lost'
print(my_substr(string, 1))  # => 'I'
print(my_substr(string, 7))  # => 'If I lo'
Используйте тот же подход, что в функции для переворота строки из урока: собирайте строку-результат в цикле,
перебирая начальную строку до определённого момента.
Эту задачу можно решить при помощи срезов. Но в этом упражнении мы хотим потренироваться в использовании циклов
и поэтому реализуем эту функциональность самостоятельно. Именно так внутри и работают срезы.'''

def my_substr(string, len_):
    result = ''
    index = 0
    while index <= len_ -1:
        current_char = string[index]
        result += current_char
        index += 1
    return result


string = 'If I look back I am lost'
print(my_substr(string, 1))  # => 'I'
print(my_substr(string, 7))  # => 'If I lo'
print(my_substr('got', 3))   # => 'got'
--------------------------------------------------------------------------------------------------------------
'''
58.Реализуйте функцию is_contains_char(), которая проверят, содержит ли строка указанную букву.
Регистр букв не важен. Функция принимает два параметра:
Строка
Буква для поиска
И возвращает результат проверки – булево значение.

print(is_contains_char('Hexlet', 'H'))  # => True
print(is_contains_char('Hexlet', 'h'))  # => True
print(is_contains_char('Awesomeness', 'd'))  # => False
'''

def is_contains_char(text, letter):
    text = text.lower()
    letter = letter.lower()
    index = 0
    while index < len(text):
        if text[index] == letter:
            return True
        elif text[index] != letter and index == len(text) - 1:
            return False
        elif text[index] != letter:
            index += 1



print(is_contains_char('Hexlet', 'H'))  # => True
print(is_contains_char('Lexhet', 'h'))  # => True
print(is_contains_char('Hexlet', 'h'))  # => True
print(is_contains_char('Awesomeness', 'd'))  # => False
print(is_contains_char('Awesomeness', 'm'))  # => True
--------------------------------------------------------------------------------------------------------------
'''
59.Реализуйте функцию filter_string(). Она принимает на вход строку и символ и возвращает новую строку,
в которой удалён переданный символ во всех его позициях.
Если строка не содержит указанный символ, то она возвращается без изменений.
Итоговая строка также не должна содержать начальные и концевые пробелы:
text = 'If I look forward I win'
filter_string(text, 'i')  # 'f  look forward  wn'
filter_string(text, 'O')  # 'If I lk frward I win
На этот раз реализуйте эту функцию с помощью цикла for. Дополнительное условие:
регистр исключаемого символа не имеет значения.
Подсказка
При решении могут понадобиться методы, которые мы уже использовали в предыдущих заданиях.'''

def filter_string(text, symbol):
    result = ''
    for i in text:
        if i.lower() != symbol.lower():
            result += i
    return result.strip()

text = 'If I look forward I win'
text1 = 'I look back if you are lost'
print(filter_string(text, 'i'))  # 'f  look forward  wn'
print(filter_string(text, 'O'))  # 'If I lk frward I win
print(filter_string(text1, 'I'))  # look back if you are lost
--------------------------------------------------------------------------------------------------------------
'''
60.Палиндром — слово или текст, одинаково читающиеся в обоих направлениях. Примеры:

"я",
"радар",
"асса",
"ишак ищет у тещи каши"
src/solution.py
Реализуйте функцию is_palindrome(), которая принимает на вход слово, определяет является ли оно палиндромом и
возвращает логическое значение.

from solution import is_palindrome
is_palindrome('')  # True пустая строка тоже считается палиндромом
is_palindrome('radar') # True
is_palindrome('a') # True
is_palindrome('abs') # False
is_palindrome('ишак ищет у тещи каши') # True'''

#from solution import is_palindrome

def is_palindrome(text):
    a = text[::-1]
    if text == a:
        return True
    else:
        return False

print(is_palindrome(''))  # True пустая строка тоже считается палиндромом
print(is_palindrome('radar')) # True
print(is_palindrome('a')) # True
print(is_palindrome('abs')) # False
print(is_palindrome('ишак ищет у тещи каши')) # True
--------------------------------------------------------------------------------------------------------------
'''
61.Реализуйте функцию count_vowels(), которая принимает строку, считает и возвращает количество гласных букв в ней.
Для проверки, является ли буква гласной, импортируйте и используйте функцию is_vowel() из модуля symbols.py.
is_vowel('a')  # True
is_vowel('n')  # False
count_vowels('One')  # 2
count_vowels('London is the capital of Great Britain')  # 13
'''
from symbols import is_vowel
def count_vowels(text):
    result =0
    for i in text:
        if is_vowel(i) == True:
            result += 1
    return result
#print(is_vowel('a'))  # True
#print(is_vowel('n'))  # False
print(count_vowels('One'))  # 2
print(count_vowels('London is the capital of Great Britain'))  # 13
--------------------------------------------------------------------------------------------------------------
'''
62.Напечатайте с помощью цикла названия месяцев из списка months.
Подсказка
После ключевого слова in укажите имя списка, который будете обрабатывать в цикле: months.
Проследите, чтобы после объявления цикла стояло двоеточие.
В функцию print() передайте переменную month.
Тело цикла отбивается четырьмя пробелами, убедитесь, что они есть перед print(month).
'''

months = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']

for month in months:
    print(month)
--------------------------------------------------------------------------------------------------------------
'''
63.Напечатайте приглашение на ужин: циклом выведите имена приглашённых из списка pigs.
Опишите условие и тело цикла — и всё заработает.
Подсказка
Циклом for переберите все элементы списка pigs. Внутреннюю переменную можно назвать pig.
Условие цикла должно выглядеть так: for <переменная> in <список>:
После условия цикла должно стоять двоеточие.
В теле цикла напечатайте значение внутренней переменной: print(<переменная>).
Код в теле цикла должен быть отбит четырьмя пробелами.
'''

pigs = ['Ниф-Ниф', 'Наф-Наф', 'Нуф-Нуф']
print('Дорогие свиньи!')

for pig in pigs:
    print(pig)

print('приглашаю вас на ужин!')
print('Любящий вас Волк.')
--------------------------------------------------------------------------------------------------------------
'''
64.В этом уроке четыре задачи. Напечатайте магическую мантру, она поможет справиться с ними:
Я расправлюсь с задачей 1
Я расправлюсь с задачей 2
Я расправлюсь с задачей 3
Я расправлюсь с задачей 4
Я всех победю!
Вместо многоточий вставьте необходимый код — имя переменной и диапазон.
Внутреннюю переменную цикла можно назвать i: так традиционно называют переменную, принимающую числа из
последовательного числового ряда.
Подсказка
В условии цикла после for задайте имя переменной, в которую будут передаваться числа из диапазона range.
Обычно такую переменную-счётчик называют i,
но можно назвать её как угодно.
Диапазон чисел в range() указывается двумя числами через запятую: range(от, до). Последнее число в диапазон не
включается.
Если в функцию print() передать несколько аргументов через запятую (вот так: print('раз', 2), то они будут
напечатаны в одну строку через пробел, вот так: раз 2.
'''

for i in range(1,5):
    print('Я расправлюсь с задачей', i)

print('Я всех победю!')
--------------------------------------------------------------------------------------------------------------
'''
65.Если бы Джек, который построил дом, строил его из чисел, дом выглядел бы так:
Это первый этаж.
А это 2 этаж, он на один выше, чем этаж 1
А это 3 этаж, он на один выше, чем этаж 2
...
Постройте с помощью цикла десятиэтажный дом. Последней строкой цикл должен вывести такую:
А это 10 этаж, он на один выше, чем этаж 9
Подсказка
Начать строительство надо со второго этажа, а закончить — на десятом. Значит, в range()
нужно указать диапазон чисел от 2 до 11.
В переменную i по очереди передаются все числа из диапазона, указанного в range().
Значит, текущий этаж — это i, а предыдущий этаж — это i-1.
Напечатать в одну строку числа и фрагменты текста можно, перечислив их в функции print()
через запятую; при этом они будут напечатаны через пробел. Например, print('Дом', 'в', 100, 'этажей')
напечатает Дом в 100 этажей.
'''

print('Это первый этаж.')
# Первый этаж построен, начинайте строить со второго
for i in range(2, 11):
    # Здесь вместо многоточий
    # вставьте номер текущего этажа,
    # вычислите и вставьте номер предыдущего этажа.
    print('А это', i, 'этаж, он на один выше, чем этаж', i-1)
--------------------------------------------------------------------------------------------------------------
'''
66.Разверните год наоборот: напечатайте месяцы в обратном порядке.
Подсказка
Обратить список можно функцией reversed(имя_списка).
После for вместо многоточия поставьте название переменной цикла.
Обычно это название образуют от имени списка, который обрабатывается в цикле.
Чтобы перебрать список в цикле — нужно передать его в условие цикла.
Обратить список можно прямо в условии: for month in reversed(имя_списка).
После условия цикла должно стоять двоеточие.
'''

months = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']

for i in reversed(months):
    print(i)
--------------------------------------------------------------------------------------------------------------
'''
67.Настало время великих стартов: Tesla улетела на гелиоцентрическую орбиту за Марсом, а вам предстоит
отправить ракету с питоном на Сатурн.
Сгенерируйте строку с обратным предстартовым отсчётом.
Она должна выглядеть так:
10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, поехали!
Это задание очень похоже на пример со считалкой про зайца, этим можно воспользоваться.
Подсказка
В условии цикла укажите переменную i и диапазон чисел в качестве обрабатываемого списка: range(от, до).
Предстартовый отсчёт ведётся от большего к меньшему, значит, список надо развернуть задом наперёд
функцией reversed().
На каждой итерации в переменную countdown_str дописывайте:
-очередное число из списка (не забудьте преобразовать его в str());
-строку ', ', чтобы отделить в тексте последующее число от предыдущего.
По окончании цикла допишите в переменную countdown_str строку 'поехали!'.
'''

countdown_str = ''

for i in reversed(range(11)):
    countdown_str = countdown_str + str(i) + ', '

countdown_str = countdown_str + 'поехали!'

print(countdown_str)
--------------------------------------------------------------------------------------------------------------
'''
68.В коде задания функция range() генерирует целые числа от 0 до 5, эти значения передаются
в тело цикла в переменной messages_count.
Научите Анфису выводить фразу 'Новых сообщений: {значение переменной messages_count}',
когда переменная messages_count принимает значения больше 0.
Не запутайтесь с отступами: тело цикла должно быть отбито от начала строки четырьмя пробелами,
а код после условия if — ещё четырьмя:
Подсказка
В теле цикла объявите условие if messages_count > 0. После объявления условия должно стоять двоеточие.
При печати, в аргументах функции print(), нужно сложить строку 'Новых сообщений: ' и значение
переменной messages_count.
приведите значение переменной messages_count к строке: str(messages_count), ведь в messages_count
хранится число, а складывать строку и число нельзя!
сложите строку Новых сообщений: и str(messages_count); не забудьте обрамить строку в кавычки и поставить
пробел после двоеточия.
'''

for messages_count in range(6):
    if messages_count > 0:
        print('Новых сообщений:', messages_count)
--------------------------------------------------------------------------------------------------------------
'''
69.Дополните код: в случае, если переменная messages_count равна нулю — Анфиса должна печатать
фразу 'У вас нет сообщений'.
Подсказка
Добавьте ключевое слово else и сразу под ним — код, который должен быть выполнен.
После else должно стоять двоеточие.
Слово else должно быть отбито четырьмя отступами от начала строки и располагаться на том же уровне,
что и if. Код после else должен быть отбит дополнительными четырьмя пробелами.
'''

for messages_count in range(6):
    if messages_count > 0:
        print('Новых сообщений: ' + str(messages_count))
    if messages_count == 0:
        print('У вас нет сообщений')
--------------------------------------------------------------------------------------------------------------
'''
70.Функция range(24) перебирает все числа от 0 до 23 и по очереди передаёт их в тело цикла в переменной current_hour («текущее время»).
Научите Анфису желать вам доброго утра, если в переменной current_hour записано значение меньше 12.
Обратите внимание на отступы, в коде они расставлены правильно:
4 отступа перед if (ведь он вложен в блок for);
8 отступов перед print() (ведь он вложен в if, который вложен в for).
Подсказка
В теле цикла проверьте, что значение переменной current_hour меньше 12.
После условия должно стоять двоеточие.
'''

for current_hour in range(24):
    if  current_hour < 12:
        print('Доброе утро!')
--------------------------------------------------------------------------------------------------------------
'''
71.Расширьте код из прошлой задачи. Если на часах полдень или больше — пусть Анфиса скажет: 'Добрый день!'
Подсказка
Добавьте ключевое слово else и сразу под ним — код, который должен быть выполнен.
После else должно стоять двоеточие.
else должно быть отбито от начала строки четырьмя пробелами и располагаться на том же уровне, что и if.
Код под else должен быть отбит четырьмя отступами от начала строки.
'''

for current_hour in range(24):
    if current_hour < 12:
        print('Доброе утро!')
    if current_hour >= 12:
        print('Добрый день!')
--------------------------------------------------------------------------------------------------------------
'''
72.Просклоняйте слово «сообщения» в зависимости от их количества:
для 0 — 'У вас нет новых сообщений'
для 1 — 'У вас 1 новое сообщение'
от 2 до 4 — 'У вас <количество> новых сообщения'
5 и больше — 'У вас <количество> новых сообщений'
Подсказка
Для случаев messages_count == 1 и messages_count <= 4 примените множественное ветвление с elif.
Все остальные случаи опишите в блоке else.
'''

for messages_count in range(0, 21):
    if messages_count == 0:
        print('У вас нет новых сообщений')
    elif messages_count == 1:
        print('У вас 1 новое сообщение')
    elif messages_count <= 4:
        print('У вас', messages_count, 'новых сообщения')
    else:
        print('У вас', messages_count, 'новых сообщений')
--------------------------------------------------------------------------------------------------------------
'''
73.Анфиса умеет здороваться утром и днём, но ей нужно добавить приветствия для ночи и вечера.
Допишите программу, которая переберёт в цикле все ровные часы в сутках и напишет, как принято здороваться в указанное время:
Подсказка
Создайте конструкцию if...elif...else с тремя elif и логическим оператором <.
Первое условие будет выглядеть так:
if current_hour < 6:
    print('Доброй ночи!')
elif ...  # Тут следующее условие

После условий в elif и после ключевого слова else нужны двоеточия.
Блоки кода под if, elif и else должны отбиваться четырьмя пробелами.
Ключевые слова elif и else должны располагаться точно под if.
'''

for current_hour in range(0, 24):
    print("На часах " + str(current_hour) + ":00.")
    # Вместо многоточий напишите код
    if current_hour < 6:
        print('Доброй ночи!')
    elif current_hour < 12:
        print('Доброе утро!')
    elif current_hour < 18:
        print('Добрый день!')
    elif current_hour < 23:
        print('Добрый вечер!')
    else:
        print('Доброй ночи!')
    # Допишите программу
--------------------------------------------------------------------------------------------------------------
'''
74.Замените многоточия в условиях логическим оператором and или or.
Подсказка
Оператор and подходит, когда оба условия обязательно должны быть истинны.
Оператор or сработает, когда истинно хотя бы одно из условий.
'''

for current_hour in range(0, 24):
    print("На часах " + str(current_hour) + ":00.")

    if current_hour >= 6 and current_hour <= 11:
        print('Доброе утро!')
    elif current_hour >= 12 and current_hour <= 17:
        print('Добрый день!')
    elif current_hour >= 18 and current_hour <= 22:
        print('Добрый вечер!')
    elif current_hour <= 5 or current_hour >= 23:
        print('Доброй ночи!')
--------------------------------------------------------------------------------------------------------------
'''
75.Научите Анфису информировать вас о новых сообщениях, если их не больше двадцати. Анфиса
должна напечатать двадцать одно сообщение подряд:
У вас нет новых сообщений
У вас 1 новое сообщение
...
У вас 20 новых сообщений
Примените логический оператор or и/или and и множественное ветвление с elif, чтобы
Анфиса выражалась грамотно. К примеру: «У вас 1 новое сообщение», «У вас 4 новых сообщения»,
«У вас 11 новых сообщений».
Подсказка
Вывод сообщения должен выглядеть так: print('У вас', messages_count, 'новых сообщений')
'''

# Добавьте новые условия в elif и else
for messages_count in range(0, 21):
    if messages_count == 0:
        print('У вас нет новых сообщений')
    elif messages_count == 1:
        # напишите ваш код здесь
        print('У вас', messages_count, 'новое сообщение')
    elif messages_count >=2 and messages_count <= 4:
        # напишите ваш код здесь
        print('У вас', messages_count, 'новых сообщения')
    else:
        # напишите ваш код здесь
        print('У вас', messages_count, 'новых сообщений')
--------------------------------------------------------------------------------------------------------------
'''
76.Выполните код: мальчик хороший, а программа называет его неряхой. Исправьте код оператором not:
Подсказка
Условие, которое проверяется в if, нужно изменить на обратное: «если мальчик НЕ хороший, то...».
Для этого есть оператор not.
'''

good_boy = True  # Мальчик-то неплохой

if not good_boy:
    print('Этот в грязь полез')
    print('и рад,')
    print('что грязна рубаха.')
    print('Про такого говорят:')
    print('он плохой, неряха.')
else:
    print('Этот чистит валенки,')
    print('моет сам галоши.')
    print('Он хотя и маленький,')
    print('но вполне хороший.')
--------------------------------------------------------------------------------------------------------------
'''
77.Готовим завтрак. В зависимости от наличия продуктов есть разные варианты меню:
Если есть молоко (milk) и хлопья (cereals) — можно позавтракать хлопьями с молоком.
Если есть яйца (eggs) — на завтрак будет яичница.
Если есть молоко и яйца — можно сотворить омлет.
Есть и более бюджетные варианты: попить молока, погрызть сухих хлопьев или вовсе не завтракать.
Прочтите код, отследите логику ветвления.
Подставьте вместо многоточия такой логический оператор, с которым программа будет работать корректно.
Подсказка
Если вместо многоточия поставить оператор or — блок кода под условием if milk or cereals or eggs выполнится даже в том случае, когда есть только хлопья, а больше ничего нет. Так не годится: из хлопьев яичницу не приготовить.
Если подставить оператор and, то условие будет звучать так: «если есть (молоко И хлопья) ИЛИ яйца, то выполнить код ниже». И программа выполнится правильно!
А скобки не понадобятся, ведь у оператора and приоритет выше, чем у or.
'''

# Продуктов маловато:
milk = not True       # Молоко "НЕ есть".
cereals = True        # Хлопья есть.
eggs = False          # Яиц нет.

# Вставьте логический оператор вместо многоточия.
# Решите, нужно ли расставить скобки.

if milk and cereals or eggs:
    if eggs:
        if milk:
            breakfast = "- омлет"
        else:
            breakfast = "- яичница"
    else:
        breakfast = "- хлопья с молоком"
else:
    if milk:
        breakfast = "- стакан молока"
    elif cereals:
        breakfast = "можно погрызть сухих хлопьев"
    else:
        breakfast = "ничего не будет: разгрузочный день"

print("Сегодня на завтрак", breakfast)
--------------------------------------------------------------------------------------------------------------
'''
78.создать функцию и поместить в неё код, печатающий эти сообщения. Тогда из любой части программы
можно будет вызвать эту функцию — и Анфиса расскажет о себе.
На основе заготовленного кода напишите функцию say_about() для вывода приветственного сообщения Анфисы.
Вызовите эту функцию, чтобы убедиться, что все работает так, как ожидалось.
Подсказка
Функция определяется ключевым словом def:
def say_about():
Тело функции должно быть отбито четырьмя пробелами от начала строки:
четыре пробела должны стоять перед каждым print().
Весь код должен выполняться в теле функции:

def say_about():
    print('Привет, я Анфиса!')
    ...
Сама по себе функция не сработает, её нужно вызвать: написать имя функции и поставить после имени
круглые скобки (). В начале строки с вызовом не должно быть пробелов: вызов должен находиться вне тела функции.
'''

# Здесь объявите функцию say_about()
def say_about():
# Код, написанный ниже, переместите в тело объявленной функции
    print('Привет, я Анфиса!')
    print('Я персональный помощник.')
    print('Я ещё маленькая,')
    print('но постоянно расту и умнею:')
    print('ведь мой код каждый день дописывают!')

# Ниже вызовите объявленную вами функцию say_about()
say_about()
--------------------------------------------------------------------------------------------------------------
'''
79.На основе заготовленного кода напишите функцию print_friends_count() для вывода количества друзей.
При вызове в функцию должно передаваться количество друзей. Параметр функции должен называться friends_count.
Вызовите эту функцию с разными аргументами не менее трёх раз. Функция должна сообщать о количестве
друзей при любых целых положительных значениях переменной friends_count. Для количества друзей < 20,
фраза должна корректно склоняться. Если же друзей очень много — двадцать или больше, — должно
выводиться сообщение 'Ого, сколько у тебя друзей! Целых {friends_count}'
Например:
У тебя нет друзей
У тебя 1 друг
У тебя 2 друга
У тебя 6 друзей
Ого, сколько у тебя друзей! Целых 20
Подсказка
Функцию объявляйте ключевым словом def:
def print_friends_count(friends_count):
Тело функции должно быть смещено на 4 пробела правее слова def.
Весь код должен выполняться в теле функции:

def print_friends_count(friends_count):
    if friends_count == 0:
        ...
    else:
        print('Ого, сколько у тебя друзей! Целых', friends_count)
Сама по себе функция не сработает, её нужно вызвать и передать в неё аргумент:
количество друзей. Например, вызов может быть таким: print_friends_count(17).
'''

# Объявите функцию здесь
def print_friends_count(friends_count):
# Код, написанный ниже, переместите внутрь объявленной вами функции
    if friends_count == 0:
        print('У тебя нет друзей')
    elif friends_count == 1:
        print('У тебя', friends_count, 'друг')
    elif friends_count >= 2 and friends_count <= 4:
        print('У тебя', friends_count, 'друга')
    elif friends_count >= 5 and friends_count < 20:
        print('У тебя', friends_count, 'друзей')
    else:
        print('Ого, сколько у тебя друзей! Целых', friends_count)
print_friends_count(5)
--------------------------------------------------------------------------------------------------------------
'''
80.Напишите цикл, в котором функция print_friends_count() вызывается c аргументами от 0 до 20 включительно.
Код самой функции не изменяйте. Цикл пишите после функции: перед объявлением цикла не должно быть отступов.
Подсказка
Создать последовательность чисел от 0 до 20 поможет функция range(). Помните: эта функция не включает
в диапазон значение, указанное вторым аргументом.
Перебрать диапазон можно циклом: for friends_count in range(0, 21):. Не забудьте двоеточие.
Перед строкой с объявлением цикла не должно быть отступов, иначе получится, что она внутри функции.
В теле цикла вызывайте функцию print_friends_count() с аргументом friends_count: эта переменная
будет поочерёдно принимать значения от 0 до 20.
'''

def print_friends_count(friends_count):
    if friends_count == 0:
        print('У тебя нет друзей')
    elif friends_count == 1:
        print('У тебя', friends_count, 'друг')
    elif friends_count >= 2 and friends_count <= 4:
        print('У тебя', friends_count, 'друга')
    elif friends_count >= 5 and friends_count < 20:
        print('У тебя', friends_count, 'друзей')
    else:
        print('Ого, сколько у тебя друзей! Целых', friends_count)


# Ниже напишите цикл, в котором будет вызываться функция print_friends_count
# с аргументом от 0 до 20 включительно
for friends_count in range(0, 21):
    print_friends_count(friends_count)
--------------------------------------------------------------------------------------------------------------
'''
81.Функция lets_go() ожидает на вход два аргумента. Если вызвать её без аргументов — она сломается.
Измените объявление функции так, чтобы при вызове без аргументов она напечатала фразу Друг, пойдём учить Python.
Подсказка
В строке def lets_go(name, target): для параметров name и target укажите значения по умолчанию:
для name — 'Друг'
для target — 'учить Python'
Чтобы вызвать функцию без аргументов — надо в теле программы указать её имя с пустыми скобками, вот так: lets_go()
'''

# Настройте функцию так, чтобы она не сломалась при вызове без аргументов
def lets_go(name = 'Друг', target = 'учить Python'):
    print(name + ', пойдём ' + target)


# Вызовите функцию lets_go без аргументов
lets_go()
--------------------------------------------------------------------------------------------------------------
'''
82.Если при вызове функции lets_go() передавать неименованные аргументы, то передать только второй
аргумент не получится: функция передаст единственный аргумент в параметр name, а не в target, 
как нам хотелось бы.
Исправьте вызов функции так, чтобы аргумент, указанный при вызове, был передан в параметр target. 
Вызов с именованными аргументами поможет решить эту задачу.
Подсказка
Именованные аргументы спасут ситуацию: при вызове функции можно указать имя того параметра, 
в который передаётся значение: target='читать следующий урок!'
'''

def lets_go(name='Друг', target='учить Python'):
    print(name + ', пойдём ' + target)


# Исправьте вызов так, чтобы аргумент был передан
# в параметр с именем target
lets_go(target='читать следующий урок!')
--------------------------------------------------------------------------------------------------------------
'''
83.В теории этого урока приведён код, который находит количество вхождений определённого
значения в списке — подсчитывает количество комнат заданной площади; выражение «количество вхождений»
означает «сколько раз определённое значение встречается в списке или в любом другом наборе данных».
Недостаток этого кода в том, что он размещён в теле программы, а не в функции.
Ваша задача — исправить эту ситуацию: оберните код в функцию.
Объявите функцию, назовите её rooms_equal()
Функция rooms_equal() должна принимать на вход два параметра:
room_size — значение, которое функция будет искать в списке;
room_list — имя списка, в котором будет проводиться поиск;
Перенесите в функцию код, который подсчитывает количество помещений заданной площади.
В коде уже подготовлен вызов функции rooms_equal(), она должна подсчитать, сколько
в списке flat помещений площадью 5.55 кв.м.
Добавьте ещё один вызов функции: пусть она сосчитает, сколько комнат площадью 9.2 кв.м
в списке hut (англ. hut — «хижина»).
Подсказка
Функции в Python объявляются через ключевое слово def; затем указывается имя функции; затем,
в круглых скобках — параметры, через запятую; после скобок с параметрами —
двоеточие: def rooms_equal(room_size, room_list):
Код, который вы перенесёте в тело функции, должен быть отбит от начала строки четырьмя отступами.
Не запутайтесь в отступах: после того, как вы перенесёте код в функцию, объявление цикла for...
должно быть отбито четырьмя пробелами от начала строки, объявление if... — ещё четырьмя (итого 8),
и тело условия if... — ещё четырьмя.
'''

def rooms_equal(room_size, room_list):
# Перенесите следующий код в тело функции, которую вы объявили
    count = 0

    for room in room_list:
        if room == room_size:
            count = count + 1

    print('Комнат площадью', room_size, 'кв.м:', count)


# Следующий код не изменяйте и не переносите в тело функции
flat = [5.55, 22.19, 7.78, 26.86, 5.55,29.84, 22.19, 5.55, 16.85, 4.52]

hut = [9.2, 3.5, 8.1, 2.3, 9.2, 4.2, 6.9]

rooms_equal(5.55, flat)
# Добавьте ещё один вызов функции rooms_equal()
# Передайте в функцию искомую площадь - 9.2 кв.м и список hut
rooms_equal(9.2, hut)
--------------------------------------------------------------------------------------------------------------
'''
84.Допишите функцию number_of_occurrences() так, чтобы она сосчитала, сколько раз
в строке string встречается буква, переданная в параметр char.
Строка — это последовательность, как и список; строку можно точно так же перебрать
в цикле по элементам (буквам), найти и пересчитать нужные элементы.
Предыдущая задача вам поможет: она очень похожа на эту.
Подсказка
Чтобы объявить переменную — напишите её имя и присвойте ей нужное значение. Оператор присвоения — символ «равно» =
Условие для сравнения переменных должно выглядеть так: if letter == char:
Код, выполняемый при соблюдении условия в if, должен быть отбит четырьмя пробелами относительно if
Чтобы увеличить значение count на единицу — напишите count += 1
'''


def number_of_occurrences(char, string):
    # Здесь объявите переменную count, равную нулю.
    # Она будет хранить количество вхождений
    count = 0
    for letter in string:
        # Напишите условие: сравните переменные letter и char
        # И если letter равна char - увеличивайте счётчик count на 1
        if letter == char:
            count += 1

    # Печатаем исходную строку:
    print('Исходная строка:', string)
    # Печатаем результат подсчётов:
    print('Количество вхождений символа', char, 'составляет:', count)


# Код ниже не изменяйте
phrase = 'Не волнуйтесь, если что-то не работает. Если бы всё работало, вас бы уволили.'

# Вызываем функцию number_of_occurrences(), чтобы она посчитала,
# сколько раз во фразе phrase встречается буква 'е'
number_of_occurrences('е', phrase)
--------------------------------------------------------------------------------------------------------------
'''
85.Гидрометцентр опубликовал списки средних дневных температур в Москве за май 2017 и 2018 годов.
Допишите функцию comfort_count(temperatures), она должна подсчитывать дни, когда температура
воздуха была от 22 до 26 градусов включительно.
Функция принимает параметр temperatures: это список, в котором нужно искать тёплые дни.
В теле функции объявите переменную-счётчик.
Переберите в цикле for temp in temperatures: элементы списка и найдите значения в диапазоне от 22 до 26.
В поиске таких значений вам поможет двойное неравенство: «температура больше или равна 22 и,
одновременно, меньше или равна 26», то есть между 22 и 26, включительно.
if temp >= 22 and temp <= 26:
Это неравенство можно записать покороче:
if 22 <= temp <= 26:
Если условие выполняется — увеличивайте значение счётчика на 1.
В результате работы функция должна вывести на экран строку 'Количество тёплых дней в этом месяце: N',
где N — полученное количество дней.
Подсказка
В теле функции comfort_count():
объявите переменную-счётчик count, значение этой переменной должно быть равно нулю;
переберите элементы списка циклом for temp in temperatures:. Помните, что код в теле
цикла должен быть отбит четырьмя пробелами; переменная-счётчик count должна быть объявлена вне цикла;
в теле цикла проверьте, попадает ли очередное значение в диапазон чисел от 22 до 26 включительно:
if 22 <= temp <= 26:
Если условие в if выполняется — добавьте к переменной-счётчику единицу:
count += 1
Помните, что код в теле if должен быть отбит дополнительными четырьмя пробелами слева;
после цикла напишите вызов функции print(), чтобы вывести нужную строку:
print('Количество тёплых дней в этом месяце:', count)
Вызов print() должен быть в теле функции, но не в теле цикла: следите за отступами.
'''

may_2017 = [24, 26, 15, 10, 15, 19, 10, 1, 4, 7, 7, 7, 12, 14, 17, 8, 9, 19, 21, 22, 11, 15, 19, 23, 15, 21, 16, 13, 25,
            17, 19]
may_2018 = [20, 27, 23, 18, 24, 16, 20, 24, 18, 15, 19, 25, 24, 26, 19, 24, 25, 21, 17, 11, 20, 21, 22, 23, 18, 20, 23,
            18, 22, 23, 11]


def comfort_count(temperatures):
    # Напишите код функции
    count = 0
    for temp in temperatures:
        if 22 <= temp <= 26:
            count += 1
    print('Количество тёплых дней в этом месяце:', count)


# Дальше код не меняйте
comfort_count(may_2017)  # Узнаем, что было в мае 2017 г.
comfort_count(may_2018)  # Узнаем, что было в мае 2018 г.
--------------------------------------------------------------------------------------------------------------
'''
86.Доработайте программу подсчёта тёплых дней в мае 2017 г. : допишите
функцию comfort_count() так, чтобы она возвращала подсчитанное количество тёплых дней.
Подсказка
Функция comfort_count() должна вернуть значение переменной count:
return count
Не ошибитесь с отступами: строка return count должна быть внутри тела функции, но не в теле цикла for.
'''

may_2017 = [24, 26, 15, 10, 15, 19, 10, 1, 4, 7, 7, 7, 12, 14, 17, 8, 9, 19, 21, 22, 11, 15, 19, 23, 15, 21, 16, 13, 25, 17, 19]

# Допишите эту функцию
def comfort_count(temperatures):
    count = 0
    for temp in temperatures:
        if 22 <= temp <= 26:
            count += 1
    # Функция должна вернуть значение переменной count
    return count

# Код ниже не изменяйте:
# вызовем функцию comfort_count(), передадим в неё список may_2017,
# результат работы сохраним в переменную nice_days
nice_days = comfort_count(may_2017)

# Напечатаем значение, сохранённое в nice_days
print('Количество тёплых дней в этом месяце:', nice_days)
--------------------------------------------------------------------------------------------------------------
'''
87.Плотник Афанасий зачем-то решил построить из стекла и палок восемь одинаковых кубов;
рёбра кубов будут из палок, а грани — из стекла. Ребро куба, по чертежам Афанасия, должно быть 3 метра.
Допишите программу так, чтобы она печатала общую длину палок, необходимых для строительства восьми кубов.
Функцию для подсчёта периметра одного куба Афанасий написал: эта функция принимает на вход длину ребра куба,
а возвращает периметр куба — сумму длин всех его рёбер.
Вызовите функцию calc_cube_perimeter() с аргументом 3 и присвойте возвращаемое функцией значение
переменной one_cube_perimeter. Теперь в этой переменной будет храниться периметр одного куба.
Вычислите суммарный периметр для восьми кубов и присвойте получившееся значение переменной full_length.
Вывод результата на печать уже подготовлен в коде.
Подсказка
# Вычислите общую длину палок, необходимых
12
# для строительства 8 кубов,
13
# и сохраните это значение в переменную full_length
14
full_length = calc_cube_perimeter(3) * 8
15
​
16
# А теперь напечатаем результат (в этой строке ничего изменять не нужно)
17
print('Необходимый метраж палок для 8 кубов:', full_length)
Чтобы присвоить переменной значение, которое возвращает функция — нужно просто присвоить этой переменной
вызов функции: one_cube_perimeter = calc_cube_perimeter(3). При вызове нужно передать аргумент 3, иначе
функция не сможет ничего вычислить.
В переменной one_cube_perimeter хранится суммарная длина палок, необходимых для одного куба с ребром 3 метра.
Для восьми кубов нужно one_cube_perimeter * 8 метров. Значит, full_length = one_cube_perimeter * 8
'''

# Функция для вычисления периметра куба.
def calc_cube_perimeter(side):
    return side * 12

# Присвойте переменной one_cube_perimeter значение,
# которое вернёт функция calc_cube_perimeter() с аргументом 3:
# 3 метра - это длина ребра куба.

one_cube_perimeter = calc_cube_perimeter(3)

# Вычислите общую длину палок, необходимых
# для строительства 8 кубов,
# и сохраните это значение в переменную full_length
full_length = calc_cube_perimeter(3) * 8

# А теперь напечатаем результат (в этой строке ничего изменять не нужно)
print('Необходимый метраж палок для 8 кубов:', full_length)
--------------------------------------------------------------------------------------------------------------
'''
88.Вычислим площадь стекла, необходимого для постройки восьми кубов. Кубы все одинаковые,
длина ребра у кубов — три метра.
Афанасий начал писать функцию, вычисляющую площадь стекла для одного куба, но потом отвлёкся и
не дописал часть расчётов и инструкцию return.
Допишите программу: вычислите общую площадь стекла, необходимого для постройки восьми кубов.
Подсказка
Если площадь одной грани куба равна one_face, то площадь всего куба будет one_face * 6.
Чтобы функция вернула определённое значение — нужно указать это значение после ключевого
слова return, вот так: return cube_area.
Чтобы передать в переменную one_cube_area значение, которое вернёт функция — надо присвоить
этой переменной вызов функции с нужным аргументом:
one_cube_area = calc_cube_area(3)
'''

# Функция для вычисления площади куба.
def calc_cube_area(side):
    # Формулу для вычисления площади одной грани куба Афанасий написал:
    one_face = side * side

    # Вычислите полную площадь куба: у него шесть одинаковых граней.
    cube_area = one_face * 6

    # Удалите многоточие и допишите функцию так,
    # чтобы она возвращала полную площадь куба
    return cube_area


# Присвойте переменной one_cube_area значение,
# которое вернёт функция calc_cube_area() с аргументом 3:
# 3 метра - это длина ребра куба.
one_cube_area = calc_cube_area(3)

# Вычислите общую площадь стекла, необходимого
# для строительства 8 кубов,
# и сохраните это значение в переменную full_area
full_area = one_cube_area * 8

print('Необходимая площадь стекла для 8 кубов, кв.м:', full_area)
--------------------------------------------------------------------------------------------------------------
'''
89.Программа делает всё, что требовалось Афанасию: рассчитывает количество материала,
необходимое для строительства восьми кубов. А если понадобится сделать три куба или десять?
Сделайте программу более универсальной, измените её так, чтобы в неё можно было передать
не только сторону куба, но и количество кубов. Для этого понадобится второй аргумент в функции calc_cube()
Измените строку, в которой объявляется функция calc_cube(): добавьте второй аргумент (назовите его, например, amount).
В тех строках функции calc_cube(), где используется число кубов, используйте значение переменной amount.
В строке, которую печатает функция, выводится количество кубов; там тоже потребуется
вывести значение переменной amount.
Подсказка
После добавления второго аргумента объявление функции будет выглядеть так:
def calc_cube(side, amount):
Во всех строках функции, где в коде применялось количество кубов, надо подставить переменную amount, например:
full_length = one_cube_perimeter * amount
'''

# Функция для вычисления периметра кубов.
def calc_cube_perimeter(side):
    return side * 12


# Функция для вычисления площади кубов.
def calc_cube_area(side):
    one_face = side * side
    cube_area = one_face * 6
    return cube_area


# Дополните объявление функции:
# теперь должна принимать два параметра -
# длину ребра куба и количество кубов.
def calc_cube(side, amount):
    # Вызываем функцию, рассчитывающую периметр
    # и передаём в неё размер куба
    one_cube_perimeter = calc_cube_perimeter(side)

    # Здесь вместо многоточия должна стоять переменная,
    # хранящая количество кубов, переданное во втором аргументе.
    full_length = one_cube_perimeter * amount

    # Вызываем функцию, рассчитывающую площадь стекла
    # и передаём в неё размер куба
    one_cube_area = calc_cube_area(side)

    # Здесь вместо многоточия должна стоять переменная,
    # хранящая количество кубов, переданное во втором аргументе.
    full_area = one_cube_area * amount

    # В этой строке замените многоточие на переменную, хранящую количество кубов
    print('Для', amount, 'кубов понадобится палок (м):', full_length, 'и стекла (кв.м):', full_area)


# Для проверки работы кода вызываем функцию с двумя аргументами:
# 3 - это размер ребра куба,
# 2 - это необходимое количество кубов
calc_cube(3, 2)
--------------------------------------------------------------------------------------------------------------
'''
90.Афанасий опубликовал свою программу, прославился — и к нему потянулись заказчики: оказалось, что
очень многим знаменитым компаниям нужны кубы из стекла и палок.
Компания Microgates заказала четыре кубика с ребром 2 метра: они хотят водрузить их на крыше своего здания.
Компания RubiCUBE сделала заказ на 26 кубиков с ребром 0.5 м: их логотип выглядит как кубик Рубика,
развалившийся на части; они решили установить инсталляцию перед главным офисом.
Школа программирования Питоникум заказала подиум для студентов-чемпионов: шесть кубиков с ребром 0.61 м.
Сделайте три вызова функции calc_cube() с нужными аргументами, чтобы рассчитать объём материалов для каждого заказа.
Подсказка
Чтобы вызвать функцию, которая ничего не возвращает — в коде программы просто указывают её имя, а в скобках после
имени — аргументы. Функция calc_cube() принимает два аргумента: длину ребра куба и количество кубов;
каждый вызов этой функции будет выглядеть так:
calc_cube(длина_ребра, количество_кубов)
Функция calc_cube() принимает на вход числа, значит, при вызове функции аргументы должны быть написаны
без кавычек, а разделителем десятичных знаков должна быть точка.
'''

def calc_cube_perimeter(side):
    return side * 12


def calc_cube_area(side):
    one_face = side * side
    cube_area = one_face * 6
    return cube_area


def calc_cube(side, amount):
    one_cube_perimeter = calc_cube_perimeter(side)
    full_length = one_cube_perimeter * amount
    one_cube_area = calc_cube_area(side)
    full_area = one_cube_area * amount
    print('Для', amount, 'кубов понадобится палок (м):', full_length, 'и стекла (кв.м):', full_area)


# Ниже напишите три вызова функции calc_cube().
# Каждый вызов должен быть на отдельной строке.
calc_cube(2, 4)
calc_cube(0.5, 26)
calc_cube(0.61, 6)
--------------------------------------------------------------------------------------------------------------
'''
91.Программа-помощник Анфиса собрала в единый список (list) названия городов, где живут ваши друзья.
Города в списке повторяются.
Создайте коллекцию, в которой названия городов не будут повторяться: преобразуйте список cities в
множество unique_cities.
Затем построчно напечатайте элементы unique_cities. Перед названием каждого города поставьте дефис и пробел;
 должно получиться что-то вроде
- Акапулько
- Барнаул
- Верона
Подсказка
Преобразовать список в множество можно функцией set(имя_списка).
Построчно напечатать все элементы множества можно в цикле:
for city in unique_cities:
Напечатать перед каждым названием города дефис и пробел можно двумя способами:
перечислить аргументы в print() через запятую, при этом на печати между аргументами будет автоматически
добавляться пробел: print('-', имя_переменной)
конкатенировать (объединить) две строки при помощи оператора +; при этом после дефиса должен стоять пробел:
print('- ' + имя_переменной)
'''
cities = [
    'Вологда',
    'Чебоксары',
    'Тольятти',
    'Москва',
    'Бремен',
    'Санкт-Петербург',
    'Новороссийск',
    'Челябинск',
    'Вологда',
    'Новосибирск',
    'Челябинск',
    'Санкт-Петербург',
    'Москва',
    'Новосибирск'
]

unique_cities = set(cities)
for city in unique_cities:
    print('- ' + city)
--------------------------------------------------------------------------------------------------------------
'''
92.Для каждого города из множества unique_cities напечатайте на экран сообщение
У меня есть друг в городе <название_города>.
В решении этой задачи не обойтись без цикла.
Подсказка
Объявите цикл for...in (пример есть в тексте урока); после объявления цикла должно стоять двоеточие.
В теле цикла нужно вызвать функцию print() и напечатать строку, состоящую из строки
'У меня есть друг в городе ' (обратите внимание, перед закрывающей кавычкой должен стоять пробел,
чтобы название города не приклеилось к предыдущей фразе) и переменной, в которую передаются элементы множества.
Код в теле цикла должен быть отбит четырьмя пробелами от начала строки.
'''

cities = [
    'Вологда',
    'Чебоксары',
    'Тольятти',
    'Москва',
    'Бремен',
    'Санкт-Петербург',
    'Новороссийск',
    'Челябинск',
    'Вологда',
    'Новосибирск',
    'Челябинск',
    'Санкт-Петербург',
    'Москва',
    'Новосибирск'
]

unique_cities = set(cities)

for city in unique_cities:
    print('У меня есть друг в городе ' + city)
--------------------------------------------------------------------------------------------------------------
'''
93.Научим Анфису играть в города. У неё в памяти хранится два перечня городов:
в множестве all_cities хранятся все города, которые она знает,
в множестве used_cities — города, которые уже были названы в игре, их уже нельзя использовать.
Научите Анфису получать перечень городов, которые ещё не были названы в игре.
В коде объявлена функция: def print_valid_cities(...), допишите её.
Она должна:
принять на вход множества all_cities и used_cities;
создать множество городов, которые ещё не использовались в игре; для этого функция должна найти
разницу множеств all_cities и used_cities;
построчно напечатать элементы получившегося множества на экране.
Подсказка
Чтобы найти города, которые входят в одно множество, но не входят в другое — примените метод
difference(): diff = all_cities.difference(used_cities)
Значением переменной diff будет множество, которое содержит нужные города.
Чтобы напечатать результат — переберите множество diff в цикле:for city in diff:
В теле цикла напечатайте значение переменной city: print(city)
Объявление цикла находится в теле функции и должно быть отбито четырьмя пробелами;
тело цикла должно быть отбито ещё четырьмя пробелами (итого — восемь).
'''

def print_valid_cities(all_cities, used_cities):
    diff = all_cities.difference(used_cities)
    for city in diff:
        print(city)

all_cities = {
    'Абакан',
    'Астрахань',
    'Бобруйск',
    'Калуга',
    'Караганда',
    'Кострома',
    'Липецк',
    'Новосибирск'
}

used_cities = {'Калуга', 'Абакан' , 'Новосибирск'}

print_valid_cities(all_cities, used_cities)
--------------------------------------------------------------------------------------------------------------
'''
94.Игра в города продолжается. Анфиса покопалась в сети и нашла дополнительный список городов для игры.
Но у неё нет инструмента, чтобы добавить новые города в множество all_cities.
Напишите функцию add_cities(), которая добавит элементы из списка new_cities в all_cities.
Метод union() для этой задачи не подходит, ведь вам нужно добавить элементы в существующее множество,
а не создать новое.
Подсказка
Добавляйте в множество all_cities элементы из new_cities с помощью метода add().
Метод add() может добавлять в множество только по одному элементу за раз. Значит, надо перебрать в
цикле список new_cities и по одному добавить его элементы в all_cities.
В функции объявите цикл for city in new_cities:, а в теле цикла вызовите метод all_cities.add(city)
'''

def print_valid_cities(all_cities, used_cities):
    diff = all_cities.difference(used_cities)
    for city in diff:
        print(city)


def add_cities(all_cities, new_cities):
    for city in new_cities:
        all_cities.add(city)


# Анфиса нашла названия нескольких новых городов,
# эти города нужно добавить в множество all_cities
new_cities = [
    'Екатеринбург',
    'Выборг' ,
    'Владивосток',
    'Казань',
    'Why',
    'Йезд'
]

all_cities = {
    'Абакан',
    'Астрахань',
    'Бобруйск',
    'Калуга',
    'Караганда',
    'Кострома',
    'Липецк',
    'Новосибирск'
}

used_cities = {
    'Калуга',
    'Абакан' ,
    'Новосибирск'
}

add_cities(all_cities, new_cities)
print_valid_cities(all_cities, used_cities)
--------------------------------------------------------------------------------------------------------------
'''
95.Бот Анфиса и бот Алиса хотят сыграть во что-нибудь по сети. Каждая из них составила список игр,
в которые она умеет играть. Списки, конечно же, разные, но, возможно, найдутся игры, которые знакомы им обеим.
Вам нужно написать программу, которая найдёт одинаковые элементы в двух списках.
Допишите функцию get_together_games(): она должна принимать на вход два списка, а возвращать — множество игр,
названия которых есть в обоих списках.
В функции построчно напечатайте получившийся перечень игр, перед названием каждой игры поставьте эмоджи 👾 и пробел.
Эмоджи — это текстовый символ, как дефис или буква, его можно скопировать из условия и вставить в код.
Результат должен выглядеть примерно так:
👾 Super Hero Developer
👾 Python Shooter
👾 Online-backgammon
Подсказка
Функция get_together_games должна принимать на вход два списка get_together_games(games_1, games_2) ,
а возвращать — множество игр, названия которых есть в обоих списках: return together_games
Метод intersection() подходит для поиска одинаковых элементов в множествах set, а в функцию передаются
два списка list. Нужно преобразовать список в множество функцией set(), например: set(games_1)
После преобразования двух списков в множества можно применить к ним метод intersection() и найти элементы,
которые есть и в том, и в другом множестве:
set(games_1).intersection(set(games_2))
Построчно напечатать все элементы множества можно в цикле:
for game in together_games:
Эмоджи — это текстовый символ, его можно скопировать из условия. Напечатать эмоджи перед каждым элементом
множества можно двумя способами, с похожей задачей вы справились в прошлом уроке.
'''

def get_together_games(games_1, games_2):
    together_games = set(games_1).intersection(set(games_2))
    return together_games

anfisa_games = [
    'Online-chess',
    'Города',
    'DOOM',
    'Крестики-нолики'
]
alisa_games = [
    'DOOM',
    'Online-chess',
    'Города',
    'GTA',
    'World of tanks'
]
# Вызовите функцию со списками игр в качестве параметров
together_games = get_together_games(anfisa_games, alisa_games)
# Напечатайте итоговый перечень игр в цикле
for game in together_games:
    print('👾 '+game)
--------------------------------------------------------------------------------------------------------------
'''
96.Научим Анфису хранить в словаре записи о друзьях и получать к ним доступ по ключу.
Допишите программу так, чтобы она напечатала название города, в котором живёт Серёга.
Подсказка
Чтобы из словаря получить значение, соответствующее ключу, нужно указать имя словаря,
а после него, в квадратных скобках — ключ. Можно подсмотреть в теории: там всё есть.
Ключи этого словаря — строки, так что при обращении по ключу надо писать ключ в кавычках.
'''

friends =  {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Дима': 'Челябинск'
}
print(friends['Серёга'])
--------------------------------------------------------------------------------------------------------------
'''
97.В Омск к Серёге уже не съездить, опоздали: он сменил работу и переехал в Оренбург.
Замените данные в словаре friends так, чтобы значением для ключа 'Серёга' стала строка 'Оренбург'.
Подсказка
'Серёга' — ключ, значение которого надо изменить. Надо обратиться к элементу словаря friends по
этому ключу и присвоить ему новое значение.
«Оренбург» — это строка, а значит, в коде его нужно взять в одинарные кавычки.
'''

friends =  {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Дима': 'Челябинск'
}

friends['Серёга'] = 'Оренбург'

print('Серёга теперь живёт в славном городе ' + friends['Серёга'])
--------------------------------------------------------------------------------------------------------------
'''
98.Друзей прибавилось, география расширилась, и вышло так, что в некоторых городах живёт по несколько друзей.
Допишите программу так, чтобы она построчно напечатала список городов, где живут друзья;
города в списке не должны повторяться. В результате должно быть напечатано примерно следующее:
Орёл
Калуга
Калининград
Дудинка
Подсказка
Названия городов — это значения словаря friends. Извлечь значения словаря можно методом values().
Метод values() вернёт коллекцию типа dict_values. Чтобы исключить из коллекции повторяющиеся
элементы — преобразуйте dict_values в множество set.
Построчно напечатать элементы множества можно в цикле:
объявление_цикла:
    print(имя_переменной)
Не забудьте про двоеточие после объявления цикла и про отступы в теле цикла.
'''

friends =  {
    'Серёга': 'Оренбург',
    'Соня': 'Москва',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск'
}
friends_ = set(friends.values())

for city in friends_:
    print(city)
--------------------------------------------------------------------------------------------------------------
'''
99.Имена друзей и города, в которых они живут, придумайте сами.
После этого напечатайте на экране словарь friends.
Подсказка
Чтобы в объявлении словаря не было ошибок — все элементы словаря должны быть разделены запятыми.
В словаре friends и ключ, и значение — это строки, значит, они должны быть в кавычках.
Ключ и значение разделяются двоеточием.
Ключи словаря не должны повторяться.
Вывести на экран содержимое словаря можно так же, как и значение любой другой переменной: print(имя_словаря).
'''

friends =  {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Дима': 'Челябинск'
}
new_friends = {'Алексей': 'Москва', 'Артём': 'Казань'}
friends.update(new_friends)
print(friends)
--------------------------------------------------------------------------------------------------------------
'''
100.Добавьте в словарь friends новый элемент посредством доступа по ключу. Пусть друга зовут Даниил,
а его городом будет Санкт-Петербург.
Напечатайте на экране словарь friends.
Подсказка
Чтобы добавить новый элемент, нужно объявить новый ключ словаря и присвоить ему значение:
имя_словаря[ключ] = значение
И ключ, и значение — это строки. Не забудьте о кавычках'''

friends = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Дима': 'Челябинск',
    'Айгуль': 'Казань',
    'Алёна': 'Белгород'
}

# Через доступ по ключу добавьте новый элемент словаря
friends['Даниил'] = 'Санкт-Петербург'
# с ключом 'Даниил' и значением 'Санкт-Петербург'

# Напечатайте словарь friends
print(friends)
--------------------------------------------------------------------------------------------------------------
'''
101.Добавьте все элементы словаря new_friends в словарь friends.
После этого напечатайте на экране словарь friends, чтобы убедиться, что всё получилось.
Подсказка
Чтобы объединить два словаря — примените метод update(). В теоретической части урока есть пример.
Списывать — хорошо!
'''

friends = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Дима': 'Челябинск',
    'Айгуль': 'Казань',
    'Алёна': 'Белгород',
    'Даниил': 'Санкт-Петербург'
}

new_friends = {
    'Лев': 'Тула',
    'Валера': 'Сыктывкар',
    'Антон': 'Ялта',
    'Карен': 'Краснодар'
}
# Добавьте элементы словаря new_friends в словарь friends
friends.update(new_friends)

# Напечатайте словарь friends
print(friends)
--------------------------------------------------------------------------------------------------------------
'''
102.Научите Анфису собирать словарь friends из двух списков.
В коде приготовлены два списка:
friends_names, имена друзей;
friends_cities — города, где живут друзья.
Списки соответствуют друг другу: friends_names[0] живёт в городе friends_cities[0].
Заполните элементами словарь friends (он уже объявлен в коде). Ключом каждого элемента должно быть имя друга,
значением — город, в котором он живёт.
Для этого в цикле создайте элементы словаря из элементов списков с одинаковыми индексами.
Для проверки напечатайте на экран сообщение "Лена живёт в городе <город>", используя доступ по нужному
ключу в словаре friends.
Подсказка
Переберите в цикле все индексы любого из списков (ведь длина списков одинакова):
for i in range(0, len(friends_names)):
Теперь в теле цикла можно обратиться к элементам с одинаковыми индексами:
friends_names[i] и friends_cities[i]: это ключ и значение элемента словаря, который нужно создать.
Создать новый элемент словаря можно так: friends[ключ] = значение
Чтобы вывести на печать значение нужного элемента — обратитесь к нему по ключу:
print('Лена живёт в городе ' + friends['Лена'])
'''
friends_names = ['Аня', 'Коля', 'Лёша', 'Лена', 'Миша']
friends_cities = ['Владивосток', 'Красноярск', 'Москва', 'Обнинск', 'Чебоксары']

# Объявлен пустой словарь, его нужно будет наполнить элементами,
# каждый из которых составлен по схеме "имя: город"
friends = {}

# Допишите ваш код сюда
for i in range(0, len(friends_names)):
    friends[friends_names[i]] = friends_cities[i]

print('Лена живёт в городе ' + friends['Лена'])
--------------------------------------------------------------------------------------------------------------
'''
103.Напечатайте о каждом из друзей такое сообщение
"<имя_друга> живёт в городе <название_города>".
Подсказка
Примените цикл for, чтобы пройти по всем элементам списка.
Одновременно извлечь ключ и значение словаря можно методом friends.items().
При этом в объявлении цикла нужно указать две переменные:
for key, value in friends.items():
Не забывайте, что Е и Ё — это разные буквы. Пишите «живёт», а то тренажёр решит, что вы ошиблись
'''

friends =  {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Дима': 'Челябинск',
    'Айгуль': 'Казань',
    'Алёна': 'Белгород',
    'Даниил': 'Санкт-Петербург',
    'Лев': 'Тула',
    'Валера': 'Сыктывкар',
    'Антон': 'Ялта',
    'Карен': 'Краснодар'
}

# Здесь ваш код
for key, value in friends.items():
    print(key + ' живёт в городе ' + value)
--------------------------------------------------------------------------------------------------------------
'''
104.В этой задаче подготовлен словарь, в котором ключи — имена, а значения — список любимых песен.
Напечатайте на экран:
Количество любимых песен Димы (только число).
Все любимые песни Сони, построчно.
В итоге должно быть напечатано что-то вроде:
100500
Розовые розы
Smoke on the water
River
Подсказка
Извлеките из словаря список любимых песен Димы, для этого получите доступ по ключу: favorite_songs['Дима'].
Длину списка вернёт функция len(список).
Для вывода любимых песен Сони придётся
написать цикл for song in список_песен:, и перебрать в нём список с Сониными любимыми песнями.
Этот список — значение словаря favorite_songs по ключу 'Соня';
из цикла нужно последовательно напечатать все элементы списка, вы уже сталкивались с такой задачей.
'''

favorite_songs = {
    'Серёга': ['Unforgiven', 'Holiday', 'Highway to hell'],
    'Соня': ['Shake it out', 'The Show Must Go On', 'Наше лето'],
    'Дима': ['Владимирский централ', 'Мурка', 'Третье сентября']
}
# Ниже напишите код, который напечатает на экран, сколько у Димы любимых песен
print(len(favorite_songs['Дима']))
# Ниже напишите код, который построчно напечатает
# все любимые песни Сони.
for song in favorite_songs['Соня']:
    print(song)
--------------------------------------------------------------------------------------------------------------
'''
105.Добавьте в множество playlist несколько новых композиций (они собраны в списке new_music).
Вызывать вручную метод add() для каждой новой записи будет нерационально, пусть за вас потрудится цикл for...in.
Плейлист станет больше и веселее!
Подсказка
Переберите список new_music в цикле, поочерёдно передавая каждый элемент в переменную music (назовите её как хотите):
for music in new_music:
В теле цикла вызовите метод add() для сета playlist; в качестве аргумента передайте в метод add() переменную music:
playlist.add(music)
Тело цикла отбейте четырьмя отступами от начала строки.
'''

playlist = {
    'Venus',
    'Yesterday',
    'Fireball',
    'Time',
    'Poison',
    'Thunderstruck'
}
new_music = [
    'Kashmir',
    'Smoke on the Water',
    'Bohemian Rhapsody',
    'Zombie',
    'Let It Be',
    'Its My Life',
]
for i in new_music:
    playlist.add(i)
    # Здесь ваш код

print(playlist)
--------------------------------------------------------------------------------------------------------------
'''
106.Перед поездкой в командировку будет полезно покопаться в записной книжке и выяснить —
а кто из друзей живёт в том городе, куда предстоит поехать. Кто покажет город лучше, чем местный житель?
Научите Анфису анализировать список друзей и определять, живёт ли кто-нибудь из друзей в пункте назначения.
Для этого напишите функцию is_anyone_in(collection, city).
Для каждого неподходящего города функция должна напечатать фразу
В городе <название_города> у меня есть друг, но мне туда не надо.
Если кто-то из друзей живёт в запрошенном городе — функция должна напечатать фразу
В городе <название_города> живёт <имя_друга>. Обязательно зайду в гости!
Подсказка
В функции is_anyone_in() переберите в цикле словарь friends и сравните значение каждого элемента
с названием города, переданного в функцию вторым аргументом:if collection[friend] == city:
Если условие верно — напечатайте фразу В городе <название_города> живёт <имя_друга>. Обязательно зайду в гости!,
в ином случае напечатайте В городе <название_города> у меня есть друг, но мне туда не надо.
Чтобы вывести на печать название города — получите его по ключу: collection[friend] вернёт название
города для друга friend.
Фразы для печати форматируйте через конкатенацию (объединение) строк:
'В городе '+ <название_города> + ' живёт ' + <имя_друга> + '. Обязательно зайду в гости!'
Следите за двоеточиями и отступами.
'''

friends = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Хабаровск',
    'Егор': 'Пермь'
}


def is_anyone_in(collection, city):
    for friend in friends:
        if collection[friend] == city:
            print('В городе ' + collection[friend] + ' живёт ' + friend + '. Обязательно зайду в гости!')
        else:
            print('В городе ' + collection[friend] + ' у меня есть друг, но мне туда не надо.')


is_anyone_in(friends, 'Хабаровск')
--------------------------------------------------------------------------------------------------------------
'''
107.Анфиса умеет отвечать на вопрос «Сколько у меня друзей?»: при вызове функции process_anfisa()
она проверяет, равна ли строка query строке Сколько у меня друзей?, и если равна —
получает длину словаря DATABASE и возвращает ответ.
В этом задании ваша цель — научить Анфису отвечать на вопрос «Кто все мои друзья?».
Ответ Анфисы должен быть примерно таким:
# Имена должны разделяться пробелом;
# в перечне должны быть все имена друзей из словаря DATABASE.
Твои друзья: Толя Андрей Коля Лера
Добавьте в ветвление if...else инструкцию elif. В ней аргумент query надо сравнить со строкой 'Кто все мои друзья?'.
Если в переменной query передана строка 'Кто все мои друзья?', то:
переберите в цикле словарь DATABASE и добавьте каждый ключ словаря (имя друга) в переменную
friends_string — она уже объявлена в коде. Имена должны разделяться пробелом. Похожую операцию
вы выполняли в уроке «Счётчики»;
функция должна вернуть строку, составленную из строки 'Твои друзья: ' и переменной friends_string.
Здесь пригодится сложение строк, конкатенация.
Следите за отступами в начале строк; каждый уровень вложенности добавляет четыре пробела:
def process_anfisa(query):
    if            # Вложен в process_anfisa()                 4 пробела
        ...       # Вложен в process_anfisa() → if            8 пробелов
    elif          # Вложен в process_anfisa()                 4 пробела
        ...       # Вложен в process_anfisa() → elif          8 пробелов
        for       # Вложен в process_anfisa() → elif          8 пробелов
            ...   # Вложен в process_anfisa() → elif → for    12 пробелов
        return    # Вложен в process_anfisa() → elif          8 пробелов
    else:         # Вложен в process_anfisa()                 4 пробела
        ...       # Вложен в process_anfisa() → else          8 пробелов
Подсказка
В elif нужно сравнить аргумент query со строкой 'Кто все мои друзья?':
elif query == 'Кто все мои друзья?':
В блоке elif объявите цикл, который переберёт все элементы словаря DATABASE:
for friend in DATABASE:
На каждой итерации цикла переменная friend будет по очереди принимать ключи словаря — имена друзей.
В теле цикла добавляйте в переменную friends_string значение переменной friend и пробел:
friends_string += friend + ' '
После того, как цикл переберёт весь словарь, в переменной friends_string через пробел будут перечислены все имена друзей.
Вернуть строку из блока elif: return 'Твои друзья: ' + friends_string
2.
Допишите в конец программы вызов функции process_anfisa() с аргументом 'Где все мои друзья?'.
В теле функции process_anfisa() добавьте ещё одно условие elif, которое будет проверять,
содержит ли переменная query строку 'Где все мои друзья?'.
В теле нового блока elif пока что напишите return 'Я поняла, это вопрос про города!':
списком городов вы займётесь в следующем задании, а пока Анфиса просто даст знать, что она поняла суть вопроса.
Запустите код, удостоверьтесь, что Анфиса поняла запрос.
Подсказка
3.
Удалите из кода строку return 'Я поняла, это вопрос про города!': на этом месте вам нужно написать код, который
создаст перечень городов из словаря DATABASE (города в этом перечне не должны повторяться);
вернёт фразу Твои друзья в городах: <город_1> <город_2> <город_3> ... (города должны перечисляться через пробел).
Подсказка
'''

DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск'
}

def process_anfisa(query):
    if query == 'Сколько у меня друзей?':
        count = len(DATABASE)
        return 'У тебя ' + str(count) + ' друзей.'
    # Здесь проверьте, что переменная query равна строке 'Кто все мои друзья?'
    elif query == 'Кто все мои друзья?':
        friends_string = ''
        # Чтобы получить перечень друзей -
        # переберите словарь DATABASE в цикле
        for i in DATABASE:
            friends_string += i +' '     # Добавляйте к переменной friends_string имя друга и пробел
        # Верните строку, составленную из 'Твои друзья: ' и friends_string
        return('Твои друзья: '+ friends_string )
    else:
        return '<неизвестный запрос>'

# Не изменяйте следующий код
print('Привет, я Анфиса!')
print(process_anfisa('Сколько у меня друзей?'))
print(process_anfisa('Кто все мои друзья?'))
--------------------------------------------------------------------------------------------------------------
'''
108.Допишите в конец программы вызов функции process_anfisa() с аргументом 'Где все мои друзья?'.
В теле функции process_anfisa() добавьте ещё одно условие elif, которое будет проверять,
содержит ли переменная query строку 'Где все мои друзья?'.
В теле нового блока elif пока что напишите return 'Я поняла, это вопрос про города!':
списком городов вы займётесь в следующем задании, а пока Анфиса просто даст знать, что она поняла суть вопроса.
Запустите код, удостоверьтесь, что Анфиса поняла запрос.
Подсказка
Вызов process_anfisa('Где все мои друзья?') поместите в самом конце кода.
В функцию process_anfisa() добавьте ещё один блок elif, по аналогии с существующими:
# Внимательно проверьте отступы: четыре перед elif и восемь — перед print()
...
elif query == 'Где все мои друзья?':
return ('Я поняла, это вопрос про города!')
'''

DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск'
}

def process_anfisa(query):
    if query == 'Сколько у меня друзей?':
        count = len(DATABASE)
        return 'У тебя ' + str(count) + ' друзей.'
    # Здесь проверьте, что переменная query равна строке 'Кто все мои друзья?'
    elif query == 'Кто все мои друзья?':
        friends_string = ''
        # Чтобы получить перечень друзей -
        # переберите словарь DATABASE в цикле
        for i in DATABASE:
            friends_string += i +' '     # Добавляйте к переменной friends_string имя друга и пробел
        # Верните строку, составленную из 'Твои друзья: ' и friends_string
        return('Твои друзья: '+ friends_string )
    elif query == 'Где все мои друзья?':
        return 'Я поняла, это вопрос про города!'
    else:
        return '<неизвестный запрос>'

# Не изменяйте следующий код
print('Привет, я Анфиса!')
print(process_anfisa('Сколько у меня друзей?'))
print(process_anfisa('Кто все мои друзья?'))
print(process_anfisa('Где все мои друзья?'))
--------------------------------------------------------------------------------------------------------------
'''
109.Удалите из кода строку return 'Я поняла, это вопрос про города!': на этом месте вам нужно написать код, который
создаст перечень городов из словаря DATABASE (города в этом перечне не должны повторяться);
вернёт фразу Твои друзья в городах: <город_1> <город_2> <город_3> ... (города должны перечисляться через пробел).
Подсказка
Извлеките все значения словаря методом DATABASE.values() и преобразуйте получившуюся последовательность
в сет:unique_cities = set(DATABASE.values())
Создайте из сета unique_cities строку, где элементы перечислены через пробел, точно так же, как создана
строка friends_string.
'''

DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск'
}

def process_anfisa(query):
    if query == 'Сколько у меня друзей?':
        count = len(DATABASE)
        return 'У тебя ' + str(count) + ' друзей.'
    # Здесь проверьте, что переменная query равна строке 'Кто все мои друзья?'
    elif query == 'Кто все мои друзья?':
        friends_string = ''
        # Чтобы получить перечень друзей -
        # переберите словарь DATABASE в цикле
        for i in DATABASE:
            friends_string += i +' '
        return('Твои друзья: '+ friends_string )
    elif query == 'Где все мои друзья?':
        unique_cities = ''
        for i in set(DATABASE.values()):
            unique_cities += i +' '
        return('Твои друзья в городах: ' + unique_cities)
    else:
        return '<неизвестный запрос>'

# Не изменяйте следующий код
print('Привет, я Анфиса!')
print(process_anfisa('Сколько у меня друзей?'))
print(process_anfisa('Кто все мои друзья?'))
print(process_anfisa('Где все мои друзья?'))
--------------------------------------------------------------------------------------------------------------
'''
110.Допишите код функции penult_word()
так, чтобы она возвращала третье с конца слово из любой фразы, переданной в аргументе.
Подсказка
Разбейте строку message на отдельные слова методом split();
результат этой операции сохраните в переменную word_list.
word_list — это список из слов; чтобы получить третье слово с конца —
обратитесь к элементу с индексом [-3]. Этот элемент и должна вернуть функция.
'''

quote_1 = 'Работает? Не трогай'
quote_2 = 'Если твой код работает, значит это хороший код'
quote_3 = 'Лень - главное достоинство программиста'

def penult_word(message):
    word_list = message.split()
    return word_list[-3]

# Вызовы функции готовы к работе, не изменяйте их!

# Вызываем функцию penult_word с аргументом quote_1 и печатаем результат её работы.
print(penult_word(quote_1))

# То же, но с аргументом quote_2.
print(penult_word(quote_2))

# То же с аргументом quote_3.
print(penult_word(quote_3))
--------------------------------------------------------------------------------------------------------------
'''
111.В коде приготовлен список запросов к Анфисе queries. Необходимо определить,
какие из них адресованы Анфисе, а какие — другим людям.
Напишите функцию check_query(), которая принимает запрос как параметр,
анализирует его и возвращает одну из двух строк:
строку 'запрос к Анфисе', если запрос начинается со слова 'Анфиса',
или строку 'запрос к кому-то ещё', если запрос начинается с любого другого слова.
Код вызова функции и вывода результатов на экран уже написан в теле программы.
Подсказка
Методом split() разделите строку query по запятой и пробелу.
Присвойте результат переменной elements, это будет список вида [<имя>, <вопрос>].
Проведите проверку через if: если первый элемент списка elements равен строке 'Анфиса',
функция должна вернуть сообщение 'запрос к Анфисе', а в остальных случаях — 'запрос к кому-то ещё'.
'''

def check_query(query):
# Допишите код тела функции
    elements  = query.split(', ')
    if elements[0] == 'Анфиса':
        return 'запрос к Анфисе'
    else:
        return 'запрос к кому-то ещё'



# Дальше следует код, вызывающий вашу функцию; не изменяйте его:
queries = [
    'Анфиса, сколько у меня друзей?',
    'Андрей, ну где ты был?',
    'Андрей, ну обними меня скорей!',
    'Анфиса, кто все мои друзья?'
]

# Напечатаем результат.
# Переберём список вопросов в цикле
for q in queries:
    # Каждый из вопросов передадим аргументом
    # в функцию check_query()
    result = check_query(q)
    # И для каждого вызова напечатаем вопрос и, через дефис - вердикт программы
    print(q, '-', result)
--------------------------------------------------------------------------------------------------------------
'''
112.Перепишите функцию check_query() так, чтобы при любом запросе она «отрезала» от строки имя и
возвращала только запрос, без имени.
Например, если Анфисе пришёл запрос «Толя, что это за ерунда?» — функция check_query()
должна вернуть строку 'что это за ерунда?'.
Подсказка
Верните из функции check_query() второй элемент списка elements.
'''

def check_query(query):
    elements  = query.split(', ')
    return elements[1]


# Дальше следует код, вызывающий вашу функцию; не изменяйте его:
queries = [
    'Анфиса, сколько у меня друзей?',
    'Андрей, ну где ты был?',
    'Андрей, ну обними меня скорей!',
    'Анфиса, кто все мои друзья?'
]

for q in queries:
    result = check_query(q)
    print(q, '—', result)
--------------------------------------------------------------------------------------------------------------
'''
113.Упростим и улучшим код Анфисы.
При выводе перечня друзей или городов Анфиса применяет циклы, объединяя ключи или
значения словаря в одну строку, через пробел.
Но теперь в вашем арсенале есть метод join(), он решает ту же задачу:
создаёт строку из элементов последовательности.
Уберите из кода циклы, в которых создаётся перечень друзей и перечень городов,
а эти перечни создайте с помощью метода join().
Имена друзей и названия городов должны быть разделены запятыми и пробелом.
# Анфиса должна вернуть примерно такие строки:
# В ответ на запрос 'Кто все мои друзья?'-
Твои друзья: Серёга, Соня, Миша, ...

# В ответ на запрос 'Где все мои друзья?' -
Твои друзья в городах: Омск, Москва, Челябинск, ...
Удалите ненужные циклы; каждый из них состоит из двух строк.
Чтобы составить перечень имён друзей — примените метод join() с аргументом DATABASE к
строке ', '. Результат присвойте переменной friends_string: friends_string = ', '.join(DATABASE).
Перечень городов cities_string создаётся аналогично, но не из словаря DATABASE,
а из сета unique_cities: в аргументе метода join() должно быть указано unique_cities.
'''

DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск'
}


def process_anfisa(query):
    if query == 'Сколько у меня друзей?':
        count = len(DATABASE)

        return 'У тебя ' + str(count) + ' друзей.'
    elif query == 'Кто все мои друзья?':
        # Из словаря DATABASE создайте строку с помощью join();
        # имена друзей разделите запятой и пробелом.
        # Запишите эту строку в переменную friends_string (вместо пустых кавычек).
        friends_string = ', '.join(DATABASE)

        return 'Твои друзья: ' + friends_string
    elif query == 'Где все мои друзья?':
        unique_cities = set(DATABASE.values())
        # Из сета unique_cities создайте строку с помощью join();
        # названия городов разделите запятой и пробелом.
        # Запишите эту строку в переменную cities_string (вместо пустых кавычек).
        cities_string = ', '.join(unique_cities)

        return 'Твои друзья в городах: ' + cities_string
    else:
        return '<неизвестный запрос>'


print('Привет, я Анфиса!')
print(process_anfisa('Сколько у меня друзей?'))
print(process_anfisa('Кто все мои друзья?'))
print(process_anfisa('Где все мои друзья?'))
--------------------------------------------------------------------------------------------------------------
'''
114.Замените объединение строк на f-строку.
Напишите обычную строку в кавычках, перед первой кавычкой поставьте литеру
f: f'Сейчас погода, на градуснике температура.' Вместо слов «погода» и «температура»
вставьте в строку переменные weather и temperature в фигурных скобках.
'''

def show_meteo(temperature, weather):
    print(f'Сейчас {weather}, на градуснике {temperature}.')

show_meteo(24, 'облачно')
--------------------------------------------------------------------------------------------------------------
'''
115.Замените в коде все объединения строк на f-строки.
При форматировании строк нужно обойтись без оператора +.
'''

for messages_count in range(0, 21):
    if messages_count == 0:
        print('У вас нет новых сообщений')
    elif messages_count == 1:
        print('У вас 1 новое сообщение')
    elif messages_count <= 4:
        print(f'У вас {messages_count} новых сообщения')
    else:
        print(f'У вас {messages_count} новых сообщений')
--------------------------------------------------------------------------------------------------------------
'''
116.Научите Анфису сообщать время в формате ЧЧ:ММ:СС (часы, минуты, секунды).
Программа должна напечатать На часах 19:28:06.
Чтобы создать f-строку — перед первой кавычкой обычной строки поставьте букву f:
'Это обычная строка'
f'Это f-строка'
Для начала создайте требуемую f-строку, но без переменных:
f'На часах час:мин:сек'
В f-строку вставьте значения нужных переменных. Имена переменных должны быть в фигурных скобках: {hour}
'''

def print_time(hour, minute, second):
    print(f'На часах {hour}:{minute}:{second}')  # Аргумент должен содержать f-строку

print_time('19', '28', '06')
--------------------------------------------------------------------------------------------------------------
'''
117.Анфиса получила список listened с длительностью прослушанных песен (в секундах).
Функция calc_stat() должна вернуть строку, в которой указано количество прослушанных песен:
'Вы прослушали N песен.', где N — длина списка listened.
Подсказка
Верните из функции f-строку: return f'Текст, который надо вернуть'
Составьте f-строку из текстового фрагмента и длины полученного списка, len(listened)
'''

def calc_stat(listened):  # От англ. calculate statistics, посчитать статистику
    # Напишите код функции calc_stat()
    return f'Вы прослушали {len(listened)} песен.'

print(calc_stat([189, 148, 210, 144, 174, 158, 163, 189, 227, 198]))
--------------------------------------------------------------------------------------------------------------
'''
118.Допишите функцию calc_stat(): выведите на экран суммарную статистику.
'Вы прослушали N песен общей продолжительностью M минут.'
N — длина списка listened;
M — количество целых минут общей продолжительности прослушанных песен.
Подсказка
Получить суммарное время в секундах можно так:
объявить переменную со значением 0 (например: summ = 0),
перебрать в цикле список listened,
на каждой итерации цикла прибавлять к summ значение очередного элемента списка.
Целое количество минут можно получить, разделив суммарное время в секундах
на 60 оператором / и взяв целую часть от частного, преобразовав результат деления
в целое число функцией int(). А можно применить оператор // — он сразу делит нацело.
В f-строке теперь должно быть две переменных: длина списка и время в минутах.
'''


def calc_stat(listened):  # От англ. calculate statistics, посчитать статистику
    summ = 0
    for m in listened:
        s = m / 60
        summ += round(s)

    return f'Вы прослушали {len(listened)} песен общей продолжительностью {summ} минут.'


print(calc_stat([189, 148, 210, 144, 174, 158, 163, 189, 227, 198]))
--------------------------------------------------------------------------------------------------------------
'''
119.Вы знаете об f-строках достаточно, чтобы оптимизировать код Анфисы.
Все фразы, которые сейчас составляет Анфиса, создаются через конкатенацию строк:
фрагменты строк и значения переменных объединяются оператором +.
Сделайте код проще: замените конкатенацию на f-строки. В коде отмечены места, где это нужно сделать.
Подсказка
f-строка объявляется так же, как и обычная строка, но перед открывающей
кавычкой ставится литера f: f'Теперь это f-строка!'
Переменные вставляются прямо в тело f-строки и обрамляются фигурными скобками.
При печати на месте переменных будут выведены их значения.
Переменные в f-строках не требуется приводить к типу данных строка, Python сделает это автоматически.
Таким образом, конкатенированная строка 'У тебя ' + str(count) + ' друзей.'
в виде f-строки будет выглядеть так: f'У тебя {count} друзей.'
Превратить фразы с именами друзей и городами в f-строки будет даже немного проще,
чем фразу со счётчиком друзей.
'''

DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск'
}

def process_anfisa(query):
    if query == 'Сколько у меня друзей?':
        count = len(DATABASE)
        # В следующей строке замените конкатенацию на f-строку
        return f'У тебя {count} друзей.'
    elif query == 'Кто все мои друзья?':
        friends_string = ', '.join(DATABASE)
        # В следующей строке замените конкатенацию на f-строку
        return f'Твои друзья: {friends_string}'
    elif query == 'Где все мои друзья?':
        unique_cities = set(DATABASE.values())
        cities_string = ', '.join(unique_cities)
        # В следующей строке замените конкатенацию на f-строку
        return f'Твои друзья в городах: {cities_string}'
    else:
        return '<неизвестный запрос>'


print('Привет, я Анфиса!')
print(process_anfisa('Сколько у меня друзей?'))
print(process_anfisa('Кто все мои друзья?'))
print(process_anfisa('Где все мои друзья?'))
--------------------------------------------------------------------------------------------------------------
'''
120.Это код Анфисы, который вы последовательно писали на протяжении нескольких тем. 
В него добавлена функция format_friends_count(), но она пока нигде не вызывается.
Перечитайте и запустите код: освежите в памяти, как обрабатываются запросы к Анфисе.
А после этого — за работу!
Научите Анфису говорить грамотно. В словаре DATABASE семь элементов, и на вопрос «Анфиса, 
сколько у меня друзей» программа отвечает: «У тебя 7 друзей».
Но если в словаре будет лишь один друг — Анфиса напишет «у тебя 1 друзей», а грамотные программы так не говорят!
Функцию со склонениями числительных вы уже написали, она добавлена в код. Осталось «прикрутить» её к Анфисе.
Из функции process_anfisa(), из блока if query == 'сколько у меня друзей?' вызовите функцию format_friends_count()
и вставьте возвращаемую этой функцией фразу в f-строку так, чтобы на вопрос 'сколько у меня друзей' 
функция возвращала грамотный ответ, например, У тебя 9 друзей или У тебя 3 друга.
Подсказка
Вызов функции format_friends_count(count) вернёт (в зависимости от значения переменной count) фразу 1 
друг или N друга или N друзей. Эту фразу нужно вставить в f-строку, которую возвращает функция process_anfisa().
Возвращаемая f-строка может выглядеть так:
f'У тебя {format_friends_count(count)}.'
'''

DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск'
}

# Новая функция, она возвращает правильное словосочетание, склоняя слово "друзья"
# в зависимости от того, какое число передано в аргументе friends_count
def format_friends_count(friends_count):
    if friends_count == 1:
        return '1 друг'
    elif 2 <= friends_count <= 4:
        return f'{friends_count} друга'
    else:
        return f'{friends_count} друзей'


def process_anfisa(query):
    if query == 'сколько у меня друзей?':
        count = len(DATABASE)
        # Вызовите функцию format_friends_count() и передайте в неё count.
        format_friends_count(count)
        # Отредактируйте строку ниже: в ней должно использоваться выражение,
        # которое вернёт функция format_friends_count()
        return f'У тебя {format_friends_count(count)}.'
    elif query == 'кто все мои друзья?':
        friends_string = ', '.join(DATABASE)
        return f'Твои друзья: {friends_string}'
    elif query == 'где все мои друзья?':
        unique_cities = set(DATABASE.values())
        cities_string = ', '.join(unique_cities)
        return f'Твои друзья в городах: {cities_string}'
    else:
        return '<неизвестный запрос>'


print('Привет, я Анфиса!')
print(process_anfisa('сколько у меня друзей?'))
print(process_anfisa('кто все мои друзья?'))
print(process_anfisa('где все мои друзья?'))
print(process_anfisa('кто виноват?'))
--------------------------------------------------------------------------------------------------------------
'''
121.Сделаем так, чтобы можно было задавать вопросы не только Анфисе, но и самим друзьям, обращаясь к ним
по имени. А друзья ответят, в каком они городе.
Добавим в запросы имена. Вопрос к Анфисе будет звучать так: Анфиса, где все мои друзья? Ответ на этот вопрос
уже подготовлен, надо лишь немного изменить код.
А вопрос к кому-то из друзей будет таким: Коля, ты где?. Анфиса должна ответить: Коля в городе Красноярск.
Структура кода:
в первую очередь теперь будет вызываться функция process_query(query) (вы сейчас её напишете), она получает
запрос и разделяет его на имя и вопрос (например, запрос Анфиса, где все мои друзья? должен быть разделён на
Анфиса и где все мои друзья?);
если в запросе передано имя Анфиса — будет вызываться функция process_anfisa() с аргументом — вопросом
(например — где все мои друзья?);
Объявите в коде функцию process_query(query), в ней с помощью метода split() разделите строку query на
две части: на имя и вопрос.
После этого напишите проверку, ветвление if:
если имя — «Анфиса», вызовите функцию process_anfisa(), при вызове передайте в неё аргументом вопрос,
получившийся при разделении строки query. Верните результат выполнения этой функции.
если же имя — не «Анфиса», то функция пока не будет ничего делать, этот вариант обработаем в следующей задаче.
Отредактируйте список вызовов функции, размещённый в конце программы:
должна вызываться функция process_query(), вызовы должны выглядеть так:
print(process_query('Текст_запроса'))
все запросы должны начинаться с имени Анфиса:
Анфиса, сколько у меня друзей?
Анфиса, кто все мои друзья?
Анфиса, где все мои друзья?
Анфиса, кто виноват?
добавьте ещё один вызов, для проверки: print(process_query('Соня, ты где?')).
На этот запрос Анфиса вернет None, но не сломается.
Подсказка
Методом split() преобразуйте строку query в список. Чтобы выделить имя и вопрос в отдельные элементы списка,
надо в методе split() указать разделитель: elements = query.split(', '). В результате из запроса Анфиса,
где все мои друзья? получится список из двух элементов: ['Анфиса', 'где все мои друзья?']
В списке elements имя будет храниться в элементе с индексом 0. Именно этот элемент надо проверять в ветвлении:
if elements[0] == 'Анфиса'. Соблюдайте отступы: четыре — в теле функции, ещё четыре — под if.
Если условие истинно — нужно вернуть результат работы функции process_anfisa(), в которую передан вопрос
(он хранится в elements[1])
Вернуть результат выполнения функции можно через инструкцию return:
return process_anfisa(elements[1]).'''

DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск'
}


def format_friends_count(friends_count):
    if friends_count == 1:
        return '1 друг'
    elif 2 <= friends_count <= 4:
        return f'{friends_count} друга'
    else:
        return f'{friends_count} друзей'


def process_anfisa(query):
    if query == 'Анфиса, сколько у меня друзей?':
        count = len(DATABASE)
        # Вызовите функцию format_friends_count() и передайте в неё count.
        format_friends_count(count)
        # Отредактируйте строку ниже: в ней должно использоваться выражение,
        # которое вернёт функция format_friends_count()
        return f'У тебя {format_friends_count(count)}.'
    elif query == 'Анфиса, кто все мои друзья?':
        friends_string = ', '.join(DATABASE)
        return f'Твои друзья: {friends_string}'
    elif query == 'Анфиса, где все мои друзья?':
        unique_cities = set(DATABASE.values())
        cities_string = ', '.join(unique_cities)
        return f'Твои друзья в городах: {cities_string}'
    else:
        return '<неизвестный запрос>'


def process_query(query):
    elements = query.split()
    if elements[0] == 'Анфиса':
        return process_anfisa(elements[1])


print('Привет, я Анфиса!')
print(process_anfisa('Анфиса, сколько у меня друзей?'))
print(process_anfisa('Анфиса, кто все мои друзья?'))
print(process_anfisa('Анфиса, где все мои друзья?'))
print(process_anfisa('Анфиса, кто виноват?'))
print(process_query('Соня, ты где?'))
--------------------------------------------------------------------------------------------------------------
'''
122.Объявите функцию process_friend(name, query), принимающую имя друга name и запрос query.
В этой функции будут обрабатываться запросы, в которых имя — не «Анфиса».
В функции process_friend() напишите ветвление:
если друг с именем name есть в словаре DATABASE:
если переменная query содержит строку 'ты где?' — функция должна вернуть сообщение '{имя_друга}
в городе {название_города}'; название города нужно получить из словаря DATABASE.
если переменная query содержит какую-то другую строку — функция должна вернуть сообщение <неизвестный запрос>.
если друга с именем name нет в словаре DATABASE — функция должна вернуть сообщение: У тебя нет друга
по имени {имя_друга}.
Теперь нужно дописать функцию process_query().
Добавьте в ветвление if name == 'Анфиса' блок else: если запрос начинается не с имени «Анфиса» —
верните результат вызова функции process_friend(), передав в неё два аргумента: имя друга и текст вопроса.
Добавьте новые вызовы функции process_query():
print(process_query('Коля, что делать?'))
print(process_query('Антон, ты где?'))
Подсказка
Первые строки функции process_friend() могут выглядеть так:
def process_friend(name, query):
    # Проверяем, есть ли имя name среди ключей словаря
    if name in DATABASE:
        # Если имя есть в словаре - проверяем, что передано в query
        if query == 'ты где?':
            # Если в переменной query передан вопрос "ты где?" -
            # получаем из словаря значение (название города) по ключу name
            city = DATABASE[name]
            return # тут строка "имя_друга в городе название_города"
Для блока if name in DATABASE должен быть блок else (если запрошенного имени нет в словаре).
Для блока if query == 'ты где?' тоже должен быть блок else (если задан какой-то другой вопрос).'''

DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск'
}


def format_friends_count(friends_count):
    if friends_count == 1:
        return '1 друг'
    elif 2 <= friends_count <= 4:
        return f'{friends_count} друга'
    else:
        return f'{friends_count} друзей'


def process_anfisa(query):
    if query == 'сколько у меня друзей?':
        count = len(DATABASE)
        return f'У тебя {format_friends_count(count)}.'
    elif query == 'кто все мои друзья?':
        friends_string = ', '.join(DATABASE)
        return f'Твои друзья: {friends_string}'
    elif query == 'где все мои друзья?':
        unique_cities = set(DATABASE.values())
        cities_string = ', '.join(unique_cities)
        return f'Твои друзья в городах: {cities_string}'
    else:
        return '<неизвестный запрос>'


def process_friend(name, query):
    if name in DATABASE:
        if query == 'ты где?':
            namecity = DATABASE[name]
            return f'{name} в городе {namecity}'
        else:
            return '<неизвестный запрос>'
    else:
        return f'У тебя нет друга по имени {name}'


def process_query(query):
    elements = query.split(', ')
    if elements[0] == 'Анфиса':
        return process_anfisa(elements[1])
    else:
        return process_friend(elements[0], elements[1])


print('Привет, я Анфиса!')
print(process_query('Анфиса, сколько у меня друзей?'))
print(process_query('Анфиса, кто все мои друзья?'))
print(process_query('Анфиса, где все мои друзья?'))
print(process_query('Анфиса, кто виноват?'))
print(process_query('Соня, ты где?'))
print(process_query('Коля, что делать?'))
print(process_query('Антон, ты где?'))
--------------------------------------------------------------------------------------------------------------
'''
123.Научите Анфису отвечать на вопрос «Анфиса, как дела?» случайным образом.
Напишите функцию how_are_you(), она должна вернуть случайный элемент из списка answers.
Добавьте в список свои варианты ответов: ничего не сломается, а работать станет интереснее.
'''

# Подключите библиотеку random и дайте ей краткое имя
from random import choice as ch

answers = ['Норм.', 'Лучше всех :)', 'Ну так', 'Отличненько!', 'Ничего, жить буду']

def how_are_you():
    return ch(answers)


print(how_are_you())
--------------------------------------------------------------------------------------------------------------
'''
124.Научите Анфису сообщать пользователю, сколько времени шёл его любимый сериал.
Дата выхода первой серии - 17 апреля 2011 года.
Дата выхода последней серии - 15 апреля 2019 года.
'''

import datetime as dt

# Дата выхода первой серии.
start_time = dt.datetime(2011, 4, 17)
# Укажите дату выхода последней серии.
final_time = dt.datetime(2019, 4, 15)

# Вычислите, сколько времени шёл сериал.
duration = final_time - start_time

print(duration)
--------------------------------------------------------------------------------------------------------------
'''
125.Вспомните, в какой день и во сколько вы начали проходить курс. Запишите этот момент времени
(полностью, с часами и минутами) в переменную start_moment.
В переменную current_moment запишите текущий момент времени.
Затем вычислите разницу двух этих моментов, запишите её в переменную total_time, и напечатайте её.
Даты должны быть данными типа datetime, создайте их функцией dt.datetime().
В переменные start_moment и current_moment запишите даты начала курса и сегодняшнюю дату.
'''

# подключите библиотеку datetime под именем dt
import datetime as dt

start_moment = dt.datetime(2022, 8, 22, 10, 0, 0)  # Напишите код здесь
current_moment = dt.datetime(2022, 8, 26, 10, 4, 0)  # и здесь

total_time = current_moment - start_moment  # и здесь

print(total_time)
--------------------------------------------------------------------------------------------------------------
'''
126.Напишите функцию, которая по названию города скажет, сколько там сейчас времени.
Мы заготовили словарь UTC_OFFSET, где для каждого города записана его поправка к UTC в часах.
Подсказка:
Получите текущее время UTC: вызовите метод dt.datetime.utcnow().
Преобразуйте поправку к UTC города в timedelta: dt.timedelta(hours = UTC_OFFSET[city])
Получите местное время: к текущему времени UTC прибавьте timedelta.
Верните из функции получившееся значение с помощью команды return
Отступы — это важно!'''

import datetime as dt

UTC_OFFSET = {
    'Санкт-Петербург': 3,
    'Москва': 3,
    'Самара': 4,
    'Новосибирск': 7,
    'Екатеринбург': 5,
    'Нижний Новгород': 3,
    'Казань': 3,
    'Челябинск': 5,
    'Омск': 6,
    'Ростов-на-Дону': 3,
    'Уфа': 5,
    'Красноярск': 7,
    'Пермь': 5,
    'Воронеж': 3,
    'Волгоград': 3,
    'Краснодар': 3,
    'Калининград': 2
}

def what_time(city):
    if city =='Екатеринбург':
        period = dt.timedelta(hours = UTC_OFFSET[city])
        utc_time = dt.datetime.utcnow()
        return utc_time + period


print(what_time('Екатеринбург'))
--------------------------------------------------------------------------------------------------------------
'''
127.В код добавлен словарь DATABASE, в нём хранятся данные о том, кто из друзей где живёт.
Напишите код функции what_time(), которая по имени друга скажет, сколько у него сейчас времени.
На вход функция должна получить имя друга, а вернуть — текущее время в его городе.
Подсказка:
Получите текущее время UTC: dt.datetime.utcnow().
Получите название города, в котором живёт друг: city = DATABASE[friend].
Преобразуйте поправку к UTC для города в тип timedelta: dt.timedelta(hours = UTC_OFFSET[city]).
Получите местное время: к текущему времени нужно прибавьте поправку timedelta.
Верните значение из функции: return возвращаемое_значение
'''

import datetime as dt

DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь'
}

UTC_OFFSET = {
    'Санкт-Петербург': 3,
    'Москва': 3,
    'Самара': 4,
    'Новосибирск': 7,
    'Екатеринбург': 5,
    'Нижний Новгород': 3,
    'Казань': 3,
    'Челябинск': 5,
    'Омск': 6,
    'Ростов-на-Дону': 3,
    'Уфа': 5,
    'Красноярск': 7,
    'Пермь': 5,
    'Воронеж': 3,
    'Волгоград': 3,
    'Краснодар': 3,
    'Калининград': 2
}


def what_time(friend):
    if friend == 'Соня':
        city = DATABASE[friend]
        period = dt.timedelta(hours=UTC_OFFSET[city])
        utc_time = dt.datetime.utcnow()
        return utc_time + period


print(what_time('Соня'))
--------------------------------------------------------------------------------------------------------------
'''
128.Сделайте так, чтобы функция what_time() возвращала время в формате часы:минуты.
Подсказка
К значению, которое возвращает функция, нужно применить метод .strftime()
с форматом строки %H:%M. Будет удобнее записать возвращаемое значение в отдельную переменную,
а потом к этой переменной применить метод .strftime().'''

import datetime as dt


DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь'
}

UTC_OFFSET = {
    'Санкт-Петербург': 3,
    'Москва': 3,
    'Самара': 4,
    'Новосибирск': 7,
    'Екатеринбург': 5,
    'Нижний Новгород': 3,
    'Казань': 3,
    'Челябинск': 5,
    'Омск': 6,
    'Ростов-на-Дону': 3,
    'Уфа': 5,
    'Красноярск': 7,
    'Пермь': 5,
    'Воронеж': 3,
    'Волгоград': 4,
    'Краснодар': 3,
    'Калининград': 2
}


def what_time(friend):
    utc_time = dt.datetime.utcnow()
    city = DATABASE[friend]
    t = utc_time + dt.timedelta(hours=UTC_OFFSET[city])
    return(t.strftime('%H:%M'))


print(what_time('Соня'))
--------------------------------------------------------------------------------------------------------------
'''
129.Примените все полученные в этой теме знания, чтобы научить Анфису отвечать на вопросы про друзей,
сколько у них сейчас времени:
Артём, который час?
Антон, который час?
Примеры таких запросов уже добавлены в список queries в функции runner().
Измените функцию process_friend(), чтобы она обрабатывала ещё один запрос, а именно query == 'который час?'
Если город друга есть в базе UTC_OFFSET, вызовите функцию what_time() и, подставив полученный результат,
верните ответ в формате Там сейчас 19:28.
Если город отсутствует в базе UTC_OFFSET, то верните сообщение об ошибке <не могу определить время в
городе {название}>
Подсказка:
В код функции process_friend() добавьте ещё один вариант: elif query == 'который час?':
Чтобы определить есть ли город друга в списке используйте метод in: if city in UTC_OFFSET
Не забудьте импортировать библиотеку datetime
'''

import datetime as dt

DATABASE = {
    'Сергей': 'Омск',
    'Соня': 'Москва',
    'Алексей': 'Калининград',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск',
    'Артём': 'Владивосток',
    'Петя': 'Михайловка'
}

UTC_OFFSET = {
    'Москва': 3,
    'Санкт-Петербург': 3,
    'Новосибирск': 7,
    'Екатеринбург': 5,
    'Нижний Новгород': 3,
    'Казань': 3,
    'Челябинск': 5,
    'Омск': 6,
    'Самара': 4,
    'Ростов-на-Дону': 3,
    'Уфа': 5,
    'Красноярск': 7,
    'Воронеж': 3,
    'Пермь': 5,
    'Волгоград': 3,
    'Краснодар': 3,
    'Калининград': 2,
    'Владивосток': 10
}


def format_count_friends(count_friends):
    if count_friends == 1:
        return '1 друг'
    elif 2 <= count_friends <= 4:
        return f'{count_friends} друга'
    else:
        return f'{count_friends} друзей'


def what_time(city):
    offset = UTC_OFFSET[city]
    city_time = dt.datetime.utcnow() + dt.timedelta(hours=offset)
    f_time = city_time.strftime('Там сейчас %H:%M')
    return f_time


def process_anfisa(query):
    if query == 'сколько у меня друзей?':
        count = len(DATABASE)
        return f'У тебя {format_count_friends(count)}.'
    elif query == 'кто все мои друзья?':
        friends_string = ', '.join(DATABASE)
        return f'Твои друзья: {friends_string}'
    elif query == 'где все мои друзья?':
        unique_cities = set(DATABASE.values())
        cities_string = ', '.join(unique_cities)
        return f'Твои друзья в городах: {cities_string}'
    else:
        return '<неизвестный запрос>'


def process_friend(name, query):
    if name in DATABASE:
        city = DATABASE[name]
        if query == 'который час?':
            if city in UTC_OFFSET:
                return(what_time(city))
            else:
                return f'<не могу определить время в городе {city}>'
        elif query == 'ты где?':
            return f'{name} в городе {city}'
        else:
            return '<неизвестный запрос>'
    else:
        return f'У тебя нет друга по имени {name}'


def process_query(query):
    elements = query.split(', ')
    if elements[0] == 'Анфиса':
        return process_anfisa(elements[1])
    else:
        return process_friend(elements[0], elements[1])


def runner():
    queries = [
        'Анфиса, сколько у меня друзей?',
        'Анфиса, кто все мои друзья?',
        'Анфиса, где все мои друзья?',
        'Анфиса, кто виноват?',
        'Коля, ты где?',
        'Соня, что делать?',
        'Антон, ты где?',
        'Алексей, который час?',
        'Артём, который час?',
        'Антон, который час?',
        'Петя, который час?'
    ]
    for query in queries:
        print(query, '-', process_query(query))

runner()
    
'''
130.У вас есть запрос «как стать бэкенд-разработчиком». Соберите URL страницы,
на которой Яндекс покажет результаты поиска по этому запросу.
Подсказка
Пробелы в запросе нужно заменить на %20. Например, можно превратить пользовательский
запрос в список подстрок методом split() с пробелом в качестве разделителя.
А затем объединить эти подстроки методом join() с разделителем '%20'.
'''

user_query = 'как стать бэкенд-разработчиком'
user_query_spt = user_query.split()

url = 'https://yandex.ru/search/?text=' + '%20'.join(user_query_spt)

print(url)
--------------------------------------------------------------------------------------------------------------
'''
131.Вы получили страшный URL. Расшифруйте, какой вопрос задал Яндексу пользователь.
В ответ напечатайте запрос в чистом виде, без специальных символов.
Например, он может выглядеть так: что такое помидор.
Подсказка
Вызовите функцию urllib.parse.unquote() и передайте ей как аргумент переменную question.'''

import urllib.parse


url = 'https://yandex.ru/search/?text=%D0%BA%D0%B0%D0%BA%20%D0%B1%D0%B5%D1%81%D0%BF%D0%BB%D0%B0%D1%82%D0%BD%D0%BE%20%D0%B5%D0%B7%D0%B4%D0%B8%D1%82%D1%8C%20%D0%BD%D0%B0%20%D1%82%D0%B0%D0%BA%D1%81%D0%B8'

# чтобы вычленить текст вопроса
# разбейте строку по знаку = и возьмите
# второй элемент получившегося списка
sp = url.split('=')
question = sp[1] # сохраните его в переменной question

# напечатайте на экран запрос в расшифрованном виде
print(urllib.parse.unquote(question)) # ваш код здесь
--------------------------------------------------------------------------------------------------------------
'''
132.Пора учить Анфису разговаривать с серверами. Браузер ей не нужен: она же программа! Значит, она будет пользоваться программным клиентом.
wttr.in — это сайт с прогнозом погоды, удобный для разработчиков.
Если набрать адрес этого сайта без параметров, то получим прогноз погоды на несколько дней
(попробуйте сделать это в браузере).
Чтобы вывод был компактным и отображался в тренажёре, задаём следующие параметры:
0 - погода только на текущий момент
T - только текст, чёрно-белый
Откройте в браузере новый URL с параметрами: страницу http://wttr.in/?0T. Посмотрите, что получается.
Затем сделайте аналогичный HTTP-запрос на чистом Python.
Сравните результаты.
Подсказка:
Чтобы получить ответ, вызовите функцию requests.get() с нужным URL. В функцию print()
передайте аргументом свойство text объекта response.'''

import requests

url = 'http://wttr.in/?0T'

response = requests.get(url)  # выполните HTTP-запрос

print(response.text)  # напечатайте текст HTTP-ответа
--------------------------------------------------------------------------------------------------------------
'''
133.Запросите погодный сервис http://wttr.in по URL без параметров.
А их задайте словарём weather_parameters. Функция get() должна принимать его,
как отдельный аргумент params.
Значением параметра Т в словаре задайте пустую строку.'''

import requests


url = 'https://wttr.in'  # не изменяйте значение URL

weather_parameters = {
    '0': '', 'T': ''}
    # добавьте параметр запроса `T`, чтобы вернулся чёрно-белый текст
response = requests.get(url, weather_parameters)  # передайте параметры в http-запрос

print(response.text)
--------------------------------------------------------------------------------------------------------------
'''
134.Добавьте в словарь с параметрами weather_parameters ещё два параметра:
M без значения — чтобы скорость ветра была в метрах в секунду, как принято у метеорологов;
lang со значением ru, чтобы прогноз выдавался на русском языке.
Обратите внимание на изменения при добавлении этих параметров. О других параметрах можно прочитать в документации.
'''

import requests

url = 'https://wttr.in'  # не изменяйте значение URL

weather_parameters = {'0': '', 'T': '', 'M': '', 'lang': 'ru'}
    # добавьте параметр запроса `T`, чтобы вернулся чёрно-белый текст
response = requests.get(url, weather_parameters)  # передайте параметры в http-запрос

print(response.text)
--------------------------------------------------------------------------------------------------------------
'''
135.На прошлом уроке вы заказывали страницу на русском языке через параметры в URL.
Сейчас сделайте то же самое, только русский язык запрашивайте через заголовок запроса 'Accept-Language'.
Подсказка
Запишите в словарь request_headers пару 'Accept-Language': 'ru'.
'''

import requests

url = 'https://wttr.in'

weather_parameters = {
    '0': '',
    'T': '',
#    'lang': 'ru',  # удалите этот параметр
    'M': '',
}

request_headers = {'Accept-Language': 'ru'
    # заполните словарь с заголовками
}

# не забудьте передать параметры и заголовки в http-запрос
# через аргументы `params` и `headers` функции get()
response = requests.get(url, weather_parameters, headers = request_headers)
print(response.text)
--------------------------------------------------------------------------------------------------------------
'''
136.Напишите функцию what_weather(), которую затем будете использовать в коде Анфисы:
Выполните HTTP-запрос, поместив вызов функции get() внутрь блока try.
Значения URL и параметров получите из функций make_url()
(в неё нужно передать нужный город как аргумент city) и make_parameters().
При «выбрасывании» исключения типа requests.ConnectionError — функция what_weather()
должна возвращать сообщение об ошибке '<сетевая ошибка>'.
Если код HTTP-ответа равен 200 (всё хорошо), верните из функции текст ответа.
В противном случае функция должна вернуть строку '<ошибка на сервере погоды>'.
'''

import requests
cities = [
    'Омск',
    'Калининград',
    'Челябинск',
    'Владивосток',
    'Красноярск',
    'Москва',
    'Екатеринбург'
]


def make_url(city):
    # в URL задаём город, в котором узнаем погоду
    return f'http://wttr.in/{city}'


def make_parameters():
    params = {
        'format': 2,  # погода одной строкой
        'M': ''  # скорость ветра в "м/с"
    }
    return params


def what_weather(city):
    # Напишите тело этой функции.
    # Не изменяйте остальной код!
    try:
        response = requests.get(make_url(city), params=make_parameters())
        #print(request.status_code)
        if response.status_code == 200: return response.text
        else: return '<ошибка на сервере погоды>'
    except requests.ConnectionError : return '<сетевая ошибка>'


print('Погода в городах:')
for city in cities:
    print(city, what_weather(city))
--------------------------------------------------------------------------------------------------------------
'''
137.В список запросов queries в функции runner() добавлены новые запросы про погоду:
Коля, как погода?
Соня, как погода?
Антон, как погода?
Научите Анфису отвечать на вопросы такого вида.
Для этого:
Добавьте в функцию process_friend() обработку запроса 'как погода?'.
При получении этого запроса вызовите функцию what_weather() и передайте в неё значение
city — название города, в котором живёт друг. Эта функция уже есть в коде задания.
Верните результат выполнения этой функции как результат работы process_friend().
Подсказка
Начните с проверки: elif query == 'как погода?':.
В блоке elif вызовите функцию what_weather() с аргументом city;
результат вызова присвойте переменной (можно назвать её weather).
Верните (return) переменную weather.
'''
import datetime as dt
import requests

DATABASE = {
    'Сергей': 'Омск',
    'Соня': 'Москва',
    'Алексей': 'Калининград',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск',
    'Артём': 'Владивосток',
    'Петя': 'Михайловка'
}

UTC_OFFSET = {
    'Москва': 3,
    'Санкт-Петербург': 3,
    'Новосибирск': 7,
    'Екатеринбург': 5,
    'Нижний Новгород': 3,
    'Казань': 3,
    'Челябинск': 5,
    'Омск': 6,
    'Самара': 4,
    'Ростов-на-Дону': 3,
    'Уфа': 5,
    'Красноярск': 7,
    'Воронеж': 3,
    'Пермь': 5,
    'Волгоград': 3,
    'Краснодар': 3,
    'Калининград': 2,
    'Владивосток': 10
}


def format_count_friends(count_friends):
    if count_friends == 1:
        return '1 друг'
    elif 2 <= count_friends <= 4:
        return f'{count_friends} друга'
    else:
        return f'{count_friends} друзей'


def what_time(city):
    offset = UTC_OFFSET[city]
    city_time = dt.datetime.utcnow() + dt.timedelta(hours=offset)
    f_time = city_time.strftime("%H:%M")
    return f_time


def what_weather(city):
    url = f'http://wttr.in/{city}'
    weather_parameters = {
        'format': 2,
        'M': ''
    }
    try:
        response = requests.get(url, params=weather_parameters)
    except requests.ConnectionError:
        return '<сетевая ошибка>'
    if response.status_code == 200:
        return response.text
    else:
        return '<ошибка на сервере погоды>'


def process_anfisa(query):
    if query == 'сколько у меня друзей?':
        count = len(DATABASE)
        return f'У тебя {format_count_friends(count)}.'
    elif query == 'кто все мои друзья?':
        friends_string = ', '.join(DATABASE)
        return f'Твои друзья: {friends_string}'
    elif query == 'где все мои друзья?':
        unique_cities = set(DATABASE.values())
        cities_string = ', '.join(unique_cities)
        return f'Твои друзья в городах: {cities_string}'
    else:
        return '<неизвестный запрос>'


def process_friend(name, query):
    if name in DATABASE:
        city = DATABASE[name]
        if query == 'ты где?':
            return f'{name} в городе {city}'
        elif query == 'который час?':
            if city not in UTC_OFFSET:
                return f'<не могу определить время в городе {city}>'
            time = what_time(city)
            return f'Там сейчас {time}'
        elif query == 'как погода?':
            weather = what_weather(city)
            return weather

        else:
            return '<неизвестный запрос>'
    else:
        return f'У тебя нет друга по имени {name}'


def process_query(query):
    elements = query.split(', ')
    if elements[0] == 'Анфиса':
        return process_anfisa(elements[1])
    else:
        return process_friend(elements[0], elements[1])


def runner():
    queries = [
        'Анфиса, сколько у меня друзей?',
        'Анфиса, кто все мои друзья?',
        'Анфиса, где все мои друзья?',
        'Анфиса, кто виноват?',
        'Коля, ты где?',
        'Соня, что делать?',
        'Антон, ты где?',
        'Алексей, который час?',
        'Артём, который час?',
        'Антон, который час?',
        'Петя, который час?',
        'Коля, как погода?',
        'Соня, как погода?',
        'Антон, как погода?'
    ]
    for query in queries:
        print(query, '-', process_query(query))

runner()
--------------------------------------------------------------------------------------------------------------
'''
138.Взлом Братства Стали 🌶️
Немалоизвестный в пустошах Мохаве Курьер забрел в Хидден-Вэли – секретный бункер Братства Стали, и любезно соглашается помочь 
им в решении их проблем. Одной из такой проблем являлся странный компьютерный вирус, который проявлялся в виде появления комментариев 
к программам на терминалах Братства Стали. Известно, что программисты Братства никогда не оставляют комментарии к коду, и пишут программы 
на Python, поэтому удаление всех этих комментариев никак не навредит им. Помогите писцу Ибсену удалить все комментарии из программы.
Формат входных данных
На первой строке вводится символ решётки и сразу же натуральное число nn — количество строк в программе, не считая первой. 
Далее следует nn строк кода.
Формат выходных данных
Нужно вывести те же строки, но удалить комментарии и символы пустого пространства в конце строк. Пустую строку вместо первой строки ввода 
выводить не надо.

Тестовые данные 🟢
Sample Input ✏️:

#12
print("Введите своё имя")
name = input()
print("Введите пароль, если имеется")    # ахахахах вам не поймать меня
password = input()
if password == "hoover":
    print("Здравствуйте, рыцарь", name)         #долой Макнамару
elif password == "noncr":
    print("Здравствуйте, паладин", name)
elif password == "gelios":
    print("Здравствуйте, старейшина", name)          #Элайджа вперёд
else:
    print("Здравствуйте, послушник", name)
Sample Output 🖨️:

print("Введите своё имя")
name = input()
print("Введите пароль, если имеется")
password = input()
if password == "hoover":
    print("Здравствуйте, рыцарь", name)
elif password == "noncr":
    print("Здравствуйте, паладин", name)
elif password == "gelios":
    print("Здравствуйте, старейшина", name)
else:
    print("Здравствуйте, послушник", name)
'''
n = input()
s = []
res = []
for _ in range(int(n[1:])):
    s.append(input())
for i in s:
    if '#' in i:
        res.append(i[:i.index('#')])
    else:
        res.append(i)

for i in res:
    print(i.rstrip())
--------------------------------------------------------------------------------------------------------------
'''
139.На вход программе подается число nn. Напишите программу, которая создает и выводит построчно список, состоящий из nn списков 
[[1, 2, ..., n], [1, 2, ..., n], ..., [1, 2, ..., n]].

Формат входных данных
На вход программе подается натуральное число nn.

Формат выходных данных
Программа должна вывести построчно указанный список.

Тестовые данные 🟢
Sample Input 1:

3
Sample Output 1:

[1, 2, 3]
[1, 2, 3]
[1, 2, 3]
Sample Input 2:

2
Sample Output 2:

[1, 2]
[1, 2]
Sample Input 3:

5
Sample Output 3:

[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5]
'''
n = int(input())

for i in range(n):
    lis = []
    for j in range(1, n + 1):
        lis.append(j)
    print(lis)
--------------------------------------------------------------------------------------------------------------
'''
140.На вход программе подается число nn. Напишите программу, которая создает и выводит построчно вложенный список, состоящий из 
nn списков [[1], [1, 2], [1, 2, 3], ..., [1, 2, ..., n]].

Формат входных данных
На вход программе подается натуральное число nn.

Формат выходных данных
Программа должна вывести построчно указанный вложенный список.

Тестовые данные 🟢
Sample Input 1:

4
Sample Output 1:

[1]
[1, 2]
[1, 2, 3]
[1, 2, 3, 4]
Sample Input 2:

3
Sample Output 2:

[1]
[1, 2]
[1, 2, 3]
Sample Input 3:

1
Sample Output 3:

[1]
'''
n = int(input())

for i in range(1, n + 1):
    lis = []
    for j in range(1, i + 1):
        lis.append(j)
    print(lis)
--------------------------------------------------------------------------------------------------------------
'''
141.Треугольник Паскаля — бесконечная таблица биномиальных коэффициентов, имеющая треугольную форму. В этом треугольнике на вершине 
и по бокам стоят единицы. Каждое число равно сумме двух расположенных над ним чисел.

0:      1
1:     1 1
2:    1 2 1
3:   1 3 3 1
4:  1 4 6 4 1
      .....
На вход программе подается число nn. Напишите программу, которая возвращает указанную строку треугольника Паскаля в виде списка 
(нумерация строк начинается с нуля).

Формат входных данных
На вход программе подается число n \, (n \ge 0)n (n≥0).

Формат выходных данных
Программа должна вывести указанную строку треугольника Паскаля в виде списка.
Sample Input 1:

0
Sample Output 1:

[1]
Sample Input 2:

1
Sample Output 2:

[1, 1]
Sample Input 3:

2
Sample Output 3:

[1, 2, 1]
Sample Input 4:

3
Sample Output 4:

[1, 3, 3, 1]
'''
n = int(input())
k = [1]
result = []
for i in range(n+1):
    result.append(k)
    k = [sum(j) for j in zip([0] + k, k + [0])]
print(result[n])
--------------------------------------------------------------------------------------------------------------
'''
142.Шифр Цезаря
Описание проекта: требуется написать программу, способную шифровать и дешифровать текст в соответствии с алгоритмом Цезаря. 
Она должна запрашивать у пользователя следующие данные:
направление: шифрование или дешифрование;
язык алфавита: русский или английский;
шаг сдвига (со сдвигом вправо).
Примечание 1. Считайте, что в русском языке 32 буквы (буква ё отсутствует).

Примечание 2. Неалфавитные символы — знаки препинания, пробелы, цифры — не меняются.

Примечание 3. Сохраните регистр символов. Например, текст: "Умом Россию не понять" при сдвиге на одну позицию вправо будет
 преобразован в: "Фнпн Спттйя ож рпоауэ".
Составляющие проекта:
Целые числа (тип int);
Модульная арифметика;
Переменные;
Ввод / вывод данных (функции input() и print());
Условный оператор (if/elif/else);
Цикл for/while;
Строковые методы.
'''
#v1
whats_direction = input('Что мы должны сделать: шифровать или дешифровать? \n').lower()
while whats_direction != 'шифровать' and whats_direction != 'дешифровать':
    whats_direction = input('Что-то не то ты ввёл. Напиши "шифровать" либо "дешифровать". \n').lower()

whats_language = input('Какой нужен язык: русский или английский? \n').lower()
while whats_language != 'русский' and whats_language != 'английский':
    whats_language = input('Что-то не то ты ввёл. Напиши "русский" либо "английский". \n').lower()

whats_step = input('На сколько символовов мы сдвигаем буквы по алфавиту? Ответ напиши числом. \n')
while whats_step.isdigit() != True:
    whats_step = input('Что-то не то ты ввёл. Напиши число. \n')

whats_text = input('Какой текст нужно использовать сейчас? \n')
while whats_text.isspace() == True:
    whats_text = input('Что-то не то ты ввёл. Введи текст. \n')


# Объявляем функцию с четырьмя аргументами – соответственно четырем вопросам.
def caesar(direction, language, step, text):
    # Четыре словаря под русские и английские символы, большие и маленькие.
    # В теории можно обойтись без них и обращаться к таблице Unicode.
    # Но мне было удобнее создать свои словари.

    upper_eng_alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    lower_eng_alphabet = 'abcdefghijklmnopqrstuvwxyz'
    upper_rus_alphabet = 'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ'
    lower_rus_alphabet = 'абвгдежзийклмнопрстуфхцчшщъыьэюя'

    # Объявляем цикл for. Количество итераций равно длине строки text.
    for i in range(len(text)):

        # Задаем локальные переменные: длину алфавита и значения словарей.
        if language == 'русский':
            alphas = 32
            low_alphabet = lower_rus_alphabet
            upp_alphabet = upper_rus_alphabet
        if language == 'английский':
            alphas = 26
            low_alphabet = lower_eng_alphabet
            upp_alphabet = upper_eng_alphabet

        # Если text[i] является буквой:
        if text[i].isalpha():

            # Находим место символа text[i] в словаре upp_alphabet либо low_alphabet.
            if text[i] == text[i].lower():
                place = low_alphabet.index(text[i])
            if text[i] == text[i].upper():
                place = upp_alphabet.index(text[i])

            # Если нужно дешифровать, то:
            if direction == 'дешифровать':
                # Находим индекс для измененного символа.
                # Новый ндекс = Старый индекс - Шаг % Длина алфавита
                index = (place - int(step)) % alphas


            # Если нужно зашифровать, то:
            elif direction == 'шифровать':
                # Находим индекс для измененного символа.
                # Новый ндекс = Старый индекс + Шаг % Длина алфавита
                index = (place + int(step)) % alphas

            # Выводим измененный символ.
            if text[i] == text[i].lower():
                print(low_alphabet[index], end='')
            if text[i] == text[i].upper():
                print(upp_alphabet[index], end='')

                # Если text[i] не является буквой:
        else:
            # Делаем print этого символа без изменений.
            print(text[i], end='')


# Вызываем функцию, передавая в аргументы четыре input`а из начала кода.
caesar(whats_direction, whats_language, whats_step, whats_text)
#v2
print('Программа шифровки / дешифровки текста по методу Цезаря')
k = int(input('Введите шаг сдвига для шифровки ( >0 ) или дешифровки ( <0 ) '))
en_alphabet = [chr(i) for i in range(65,91)] + [chr(j) for j in range(97,123)]
ru_alphabet = [chr(i) for i in range(1040,1104)]
def cezar(text):
    if txt[0] in en_alphabet:
        alphabet = en_alphabet; moch = 26
    else:
        alphabet = ru_alphabet; moch = 32
    for i in range(len(text)):
        if text[i].isalpha():
            if text[i].isupper():
                print(alphabet[(alphabet.index(text[i]) + k) % moch], end = '')
            else:
                print(alphabet[(alphabet.index(text[i]) + k) % moch + moch], end='')
        else:
            print(text[i], end = '')
txt = input('Введите текст ')
cezar(txt)
--------------------------------------------------------------------------------------------------------------
'''
143.Тимур загадал число от 11 до nn. За какое наименьшее количество вопросов (на которые Тимур отвечает "больше" или "меньше") 
Руслан может гарантированно угадать число Тимура?
Формат входных данных
На вход программе подается натуральное число nn.
Формат выходных данных
Программа должна вывести наименьшее количество вопросов, которых гарантированно хватит Руслану, чтобы угадать число Тимура.
Тестовые данные 🟢
Sample Input 1:
8
Sample Output 1:
3
Sample Input 2:
20
Sample Output 2:
5
Sample Input 3:
100
Sample Output 3:
7
'''
from math import log2, ceil

num = int(input())
res = log2(num)
print(ceil(res)) 
--------------------------------------------------------------------------------------------------------------
'''
144.В саду 88n фруктовых деревьев, из них 32n яблони, 22n груши, 16n слив и 17n вишен. В какой системе счисления посчитаны деревья?
Примечание. Переведите числа из nn-ой системы счисления в десятичную и составьте уравнение.
'''
for n in range(9,16):
    if (int("32",n)+int ('22',n)+int("16",n)+int ('17',n))==int('88',n):
        print(n)
--------------------------------------------------------------------------------------------------------------
'''
145.На вход программе подается натуральное число в десятичной системе счисления. Напишите программу, которая переводит его в двоичную, 
восьмеричную и шестнадцатеричную системы счисления.
Формат входных данных 
На вход программе подается натуральное число.
Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Примечание 1. Используйте встроенные функции bin(), oct(), hex().
Примечание 2. Для шестнадцатеричной системы счисления используйте заглавные буквы A, B, C, D, E, F.
Примечание 3. BOH = Binary, Octal, Hex.
Тестовые данные 🟢
Sample Input 1:
10
Sample Output 1:
1010
12
A
Sample Input 2:
128
Sample Output 2:
10000000
200
80
'''
n = int(input())
print(bin(n)[2:], oct(n)[2:], hex(n)[2:], sep='\n')
--------------------------------------------------------------------------------------------------------------
'''
146.На вход программе подается строка текста на английском языке, в которой нужно зашифровать все слова. 
Каждое слово строки следует зашифровать с помощью шифра Цезаря (циклического сдвига на длину этого слова). Строчные буквы при этом 
остаются строчными, а прописные – прописными.
Формат входных данных 
На вход программе подается строка текста на английском языке.
Формат выходных данных
Программа должна вывести зашифрованный текст в соответствии с условием задачи.
Примечание. Символы, не являющиеся английскими буквами, не изменяются.
Тестовые данные 🟢
Sample Input 1:
Day, mice. "Year" is a mistake!
Sample Output 1:
Gdb, qmgi. "Ciev" ku b tpzahrl!
Sample Input 2:
my name is Python!
Sample Output 2:
oa reqi ku Veznut!
'''
def encrypt(text: str) -> str:
    words = []

    for word in text.split():
        new_word = ''
        word_len = len([c for c in word if c.isupper() or c.islower()])

        for char in word:
            if char.isupper():
                new_word += chr((ord(char) + word_len - 65) % 26 + 65)
            elif char.islower():
                new_word += chr((ord(char) + word_len - 97) % 26 + 97)
            else:
                new_word += char
        words.append(new_word)

    return ' '.join(words)


text = input()
print(encrypt(text))
--------------------------------------------------------------------------------------------------------------
'''
147.Написать программу корректности ввода телефонного номера по шаблону: x(xxx)xxxxxx
где x-любая цифра от 0 до 9. Данные представлены в виде строки.
'''
tel=input("Enter  number telefon: ")
tel=tel.strip(); tel=tel.replace(" ","")
if tel.isdigit() and len(tel)==11:
  tel1=tel[0]; tel2=tel[1:4]; tel3=tel[4:] 
  print (tel1+"("+tel2+")"+tel3)
else:
     print("Error")
--------------------------------------------------------------------------------------------------------------
'''
148.Написать программу изменения строки "2+3+6.7+82+5.7+1" на строку, в которой все "+" 
заменены на "-" и удалены все пробелы. 
'''
print("2+3+6.7+ 82+5.7+1".replace('+', '-').replace(' ', ''))

# or
st=" 2+3+6.7+82+5.7+1"
st=st.strip().replace("+","-")
print(st)
--------------------------------------------------------------------------------------------------------------
'''
149.Написать программу вывода чисел 0;-100;5.6;-3 в виде столбца:
                0
                -100
                5.6
                -3
в котором все строки выровнены по правому краю (подсказка: воспользуйтесь методом rjust).
'''
x = "0;-100;5.6;-3"
x=x.split(";")
for a in x:
    print(a.rjust(5))
--------------------------------------------------------------------------------------------------------------
'''
150.В строке "abrakdabra" найдите все индексы подстроки "ra" и выведите их (индекцы) в консоль.
'''
msg = "abrakadabra"
for i in range(len(msg)):
  index = msg.find('ra',i)
  if msg.find('ra',i) == msg.find('ra',i+1):
      continue  
  print("ra", index)

или

msg="abrakadabra"
for i in range(len(msg)-1):  #итерация по длине слова, но минус 1, тк ищем индекс ДВУХ букв
    index =(a.find("ra",i)) #возвращает все первые индексы ra, начиная с i, типо 0 4 4 4 4 6 6 8 8 и тд
    if a.find('ra',i)!=a.find('ra',i+1): #если индекс ra, начиная i, не равна индексу i+1, то выводит. исключает повторяющиеся вобщем
        print(index)
--------------------------------------------------------------------------------------------------------------
'''
151.Дан список [-1, 0, 5, 3, 2]. Необходимо изменить его, увеличив каждое значение на 7.2.
'''
lst = [-1, 0, 5, 3, 2]
for n in lst:
  z = n + 7.2
  print (z)
--------------------------------------------------------------------------------------------------------------
'''
152.Пользователь вводит с клавиатуры N значений (строки или числа). На их основе сформировать список,
состоящий из продублированных элементов. (Например, из значений 1, 5, "abc" формируется список [1, 1, 5,5,"abc", "abc"]).
'''
lst = input("Введиет значение:").split()
print(lst+lst)
--------------------------------------------------------------------------------------------------------------
'''
153.Написать программу сложения двух матриц:
              |1 2|  |1 0|   
            A=|3 4|+ |0 1|
              |5 6|  |1 1|
'''
m1 = [[1,2],[3,4],[5,6]]
m2 = [[1,0],[0,1],[1,1]]

a = [[0,0],[0,0],[0,0]]

for i in range (len(m1)):
  for j in range(len(a[0])):
    a[i][j] = m1[i][j]+m2[i][j]
print(a)    
--------------------------------------------------------------------------------------------------------------
'''
154.Пользователь вводит N значений в список. Необходимо проверить: было ли введено число 5.
'''
lst = input("Введиет значение:")
n = '5'
if n in lst:
  print("число 5 был введен")
else:
  print("число 5 не был введен")
--------------------------------------------------------------------------------------------------------------
'''
155.Пользователь вводит с клавиатуры числа, до тех пор, пока не введет число 0. На основе введенных
данных нужно сформировать список, состоящий из квадратов введенных числел.
'''
num = []
while True:
  n = int(input("Вводите числа:"))
  if n != 0:
    num.append(n**2)
  else:break 
print(num)
--------------------------------------------------------------------------------------------------------------
'''
156.Написать прогармму удаления из списка
                ['+7912123456','+7915213456','+6915213456','+4915213456','+7915213456']
всех номеров с кодом "+7".
'''
def anti7(some_list, index):
    if index == len(some_list):
        return some_list
    if "+7" in some_list[index]:
        del some_list[index]
        return anti7(some_list, index)
    else:
        return anti7(some_list, index + 1)


lst = ["+7234543275", "+7684039206", "+6959392930", "+4684930201", "+7582905483"]
anti7(lst, 0)
print(lst)

--------------------------------------------------------------------------------------------------------------
'''
157.Написать программу циклического сдвига элементов списка влево. Например, дан список:
                                        [1,2,3,4,5,6]
после сдвига на один элемент влево, должны получить:
                                        [2,3,4,5,6,1]
Реализовать через цикл, перебирая все элементы. 
'''
d=[1,2,3,4,5,6]
for i in range(len(d)-1):
  d.append(d[0])
  d.remove(d[0])
  print(d)
--------------------------------------------------------------------------------------------------------------
'''
158.Написать программу циклического сдвига элементов списка вправо. Например, дан список:
                                        [1,2,3,4,5,6]
после сдвига на один элемент вправо, должны получить:
                                        [6,1,2,3,4,5]
Реализовать через цикл, перебирая все элементы.  
'''
d=[1,2,3,4,5,6]
for i in range(len(d)):
  b=d.pop()
  d.insert(0,b)
  print(d)
--------------------------------------------------------------------------------------------------------------
'''
159.Нужно реализовать sum. Уровень вложенности — бесконечный (ограниченный лимитом рекурсии в CPython (1000)
'''
def chain_sum(number):
    result = number
    def wrapper(number2=None):
        nonlocal result
        if number2 is None:
            return result
        result += number2
        return wrapper
    return wrapper

print(chain_sum(5)())
print(chain_sum(5)(2)())
print(chain_sum(5)(100)(-10)())
--------------------------------------------------------------------------------------------------------------
'''
160.Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве используется 
в этой книге. Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, 
разделённые пробелом и вывести получившуюся статистику.Программа должна считывать одну строку со стандартного 
ввода и выводить для каждого уникального слова в этой строке число его повторений (без учёта регистра) в формате
 "слово количество" (см. пример вывода).
Порядок вывода слов может быть произвольным, каждое уникальное слово﻿ должно выводиться только один раз.
Sample Input 1:
a aa abC aa ac abc bcd a
Sample Output 1:
ac 1
a 2
abc 2
bcd 1
aa 2
Sample Input 2:
a A a
Sample Output 2:
a 3
'''
lst = input().lower().split()
a = {a: lst.count(a) for a in set(lst)}
for b, c in a.items():
    print(b, c)
# or
s = input().lower().split()
for i in set(s):
    print(i, s.count(i))

# or
text = input().lower().split()
dictionary = dict()
for word in text:
    if(word not in dictionary):
        dictionary[word] = 1
    else:
        dictionary[word]+=1
for word, count in dictionary.items():
    print(word, count)
# or
x = [i for i in input().lower().split()]
a = {i:x.count(i)for i in x}
for i,j in a.items():
  print(i,j)
--------------------------------------------------------------------------------------------------------------
'''
161.Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь dd и два числа: 
keykey и valuevalue. Если ключ keykey есть в словаре dd, то добавьте значение valuevalue в список, который 
хранится по этому ключу. Если ключа keykey нет в словаре, то нужно добавить значение в список по ключу 
2 * key2∗key. Если и ключа 2 * key2∗key нет, то нужно добавить ключ 2 * key2∗key в словарь и сопоставить ему
список из переданного элемента [value][value].
Требуется реализовать только эту функцию, кода вне её не должно быть.
Функция не должна вызывать внутри себя функции input и print.
Пример работы функции:

d = {}
print(update_dictionary(d, 1, -1))  # None
print(d)                            # {2: [-1]}
update_dictionary(d, 2, -2)
print(d)                            # {2: [-1, -2]}
update_dictionary(d, 1, -3)
print(d)                            # {2: [-1, -2, -3]}
'''
def update_dictionary(d, key, value):
    if key in d:
        d[key].append(value)
    elif key * 2 in d:
        d[key * 2].append(value)
    else:
        d[key * 2] = [value]
# or
def update_dictionary(d, key, value):
    if key not in d:
        key = 2 * key
    if key not in d:
        d[key] = list()
    d[key].append(value)
# or
def update_dictionary(d, key, value):
    if key in d:
        d[key].append(value)
    else:
        d.setdefault(2 * key, []).append(value)
# or
def update_dictionary(d, k, v):
    if k in d:
        d.setdefault(k, []).append(v)
    else:
        d.setdefault(k*2, []).append(v)

--------------------------------------------------------------------------------------------------------------
'''
162.Квадратное уравнение
Определить, сколько положительных корней имеет уравненийе ax^2 + bx + c = 0.
Формат входных данных
На вход подаются целые числа a, b, c.
Формат выходных данных
Вывести целое число - число положительных корней уравнения ax^2 + bx + c = 0 или -1 в
случае невозможности дать однозначный ответ.
Примеры
->->->--
<-->->->--
<-1
2
3
0
1
-3
2
2
'''
--------------------------------------------------------------------------------------------------------------
'''
163.Хаотичность погоды
Метеорологическая служба вашего города решила исследовать погоду новым способом.
    Под температурой воздуха в конкретный день будем понимать максимальную температуру в этот день.
    Под хаотичностью погоды за n дней служба понимает количество дней, в которые температура строго больше, 
    чем в день до (если такой существует) и в день после текущего (если такой существует). Например, 
    если за 5 дней максимальная температура воздуха составляла [1, 2, 5, 4, 8] градусов, то хаотичность 
    за этот период равна 2: в 3-й и 5-й дни выполнялись описанные условия.
Определите по ежедневным показаниям температуры хаотичность погоды за этот период.
Заметим, что если число показаний n=1, то единственный день будет хаотичным.

Формат ввода:
В первой строке дано число n –— длина периода измерений в днях, 1 ≤ n≤ 105. Во второй строке даны n целых 
чисел –— значения температуры в каждый из n дней. Значения температуры не превосходят 273 по модулю.
Формат вывода:
Выведите единственное число — хаотичность за данный период.
Пример 1
Ввод:
7
-1 -10 -8 0 2 0 5
Вывод:
3
Пример 2
Ввод:
5
1 2 5 4 8
Вывод:
2
'''

--------------------------------------------------------------------------------------------------------------
'''
164.Сумма введенных чисел
'''
n = int(input())
suma = 0

while n > 0:
    digit = n
    sum = suma + digit

print("Сумма:", sum)
--------------------------------------------------------------------------------------------------------------
'''
165.Сумма трёх чисел.
'''
a = int (input ())
b = int (input ())
c = int (input ())

s = a + b + c
print(s)
--------------------------------------------------------------------------------------------------------------
'''
166.Площадь прямоугольного треугольника.
'''
a = int(input())
b = int(input())
print(a * b / 2)
--------------------------------------------------------------------------------------------------------------
'''
167.Сумма двух чисел.
'''
a = int (input ())
b = int (input ())
s = a + b
print(s)

--------------------------------------------------------------------------------------------------------------
'''
168. Standard American Convention
На вход программе подаётся натуральное число. Напишите программу, которая вставляет в заданное число запятые 
в соответствии со стандартным американским соглашением о запятых в больших числах.
Формат входных данных
На вход программе подаётся натуральное число n,(0<n<10100)n,(0<n<10100).
Формат выходных данных
Программа должна вывести число с запятыми в соответствии с условием задачи.
Тестовые данные 🟢

Sample Input 1:
1000000
Sample Output 1:
1,000,000
Sample Input 2:
100
Sample Output 2:
100
Sample Input 3:
12345
Sample Output 3:
12,345

'''
num = int(input())
print ("{:,}".format(num))
--------------------------------------------------------------------------------------------------------------
'''
169. Переворот числа
Дано пятизначное или шестизначное натуральное число. Напишите программу, которая изменит порядок его последних 
пяти цифр на обратный.

Формат входных данных
На вход программе подается одно натуральное пятизначное или шестизначное число.

Формат выходных данных
Программа должна вывести число, которое получится в результате разворота, указанного в условии задачи. 
Число нужно выводить без незначащих нулей.
Тестовые данные 🟢
Sample Input 1:
12345
Sample Output 1:
54321
Sample Input 2:
987654
Sample Output 2:
945678
Sample Input 3:
25000
Sample Output 3:
52
Sample Input 4:
560000
Sample Output 4:
500006
'''
num = input()
reverse_num = num[:-5] + num[-5:][::-1]
print(int(reverse_num))
--------------------------------------------------------------------------------------------------------------
'''
170. Задача Иосифа Флавия 🌶️🌶️
nn человек, пронумерованных числами от 11 до nn, стоят в кругу. Они начинают считаться, каждый kk-й по счету 
человек выбывает из круга, после чего счет продолжается со следующего за ним человека. Напишите программу, 
определяющую номер человека, который останется в кругу последним.

Формат входных данных
На вход программе подаются два числа nn и kk, записанные на отдельных строках.

Формат выходных данных
Программа должна вывести одно число – номер человека, который останется в кругу последним.

Примечание 1. Подробнее ознакомиться с классической задачей Иосифа Флавия можно тут.

Примечание 2. Визуализацию работы алгоритма можно посмотреть тут.
Тестовые данные 🟢
Sample Input 1:
2
1
Sample Output 1:
2
Sample Input 2:
5
2
Sample Output 2:
3
Sample Input 3:
7
5
Sample Output 3:
6
'''
n, k = int(input()), int(input())
result = 0
for i in range(1, n +1):
    result = (result + k) % i    
print(result +1)   
--------------------------------------------------------------------------------------------------------------
'''
171.
{"name": "First User", "id": 1, "age": 24}
{"name": "Second User", "id": 2, "tg": "@sometgid"}
{"name": "Third User", "id": 3, "city": "Moscow"}
Создать класс User, принимающий каждую из трёх записей, реализующий обращение ко ВСЕМ полям как к атрибутам класса
Например,

user = User(**{"name": "Second User", "id": 2, "tg": "@sometgid"})
print(user.id)
print(user.name)
print(user.tg)
'''
class User:
    def __init__(self, **kwargs):
        for key, value in kwargs.items():
            setattr(self, key, value)

# Пример использования
user1 = User(**{"name": "First User", "id": 1, "age": 24})
user2 = User(**{"name": "Second User", "id": 2, "tg": "@sometgid"})
user3 = User(**{"name": "Third User", "id": 3, "city": "Moscow"})

print(user1.id)  # 1
print(user1.name)  # "First User"
print(user1.age)  # 24

print(user2.id)  # 2
print(user2.name)  # "Second User"
print(user2.tg)  # "@sometgid"

print(user3.id)  # 3
print(user3.name)  # "Third User"
print(user3.city)  # "Moscow"
--------------------------------------------------------------------------------------------------------------
'''
172.На вход программе подаются два натуральных числа nn и mm, каждое на отдельной строке — количество строк и 
столбцов в матрице. Далее вводятся сами элементы матрицы — слова, каждое на отдельной строке; подряд идут 
элементы сначала первой строки, затем второй, и т.д.
Напишите программу, которая сначала считывает элементы матрицы один за другим, затем выводит их в виде матрицы.

Формат входных данных
На вход программе подаются два числа nn и mm — количество строк и столбцов в матрице, далее идут n×mn×m слов, 
каждое на отдельной строке.

Формат выходных данных
Программа должна вывести считанную матрицу, разделяя ее элементы одним пробелом.
Тестовые данные 🟢
Sample Input 1:
4
2
и
швец
и
жнец
и
на
дуде
игрец
Sample Output 1:
и швец
и жнец
и на
дуде игрец
Sample Input 2:
2
3
язык
болтает
а
голова
не
знает
Sample Output 2:
язык болтает а
голова не знает
'''
n = int(input())
m = int(input())
matrix = []

for _ in range(n):
    row = []
    for _ in range(m):
        element = input()
        row.append(element)
    matrix.append(row)

for row in matrix:
    print(' '.join(row))
--------------------------------------------------------------------------------------------------------------
'''
173.Напишите программу, которая выводит количество элементов квадратной матрицы в каждой строке, 
больших среднего арифметического элементов данной строки.

Формат входных данных
На вход программе подаётся натуральное число nn — количество строк и столбцов в матрице, 
затем элементы матрицы (целые числа) построчно через пробел.

Формат выходных данных
Программа должна вывести nn чисел — для каждой строки количество элементов матрицы, 
больших среднего арифметического элементов данной строки.
Тестовые данные 🟢
Sample Input 1:
4
1 2 3 4
5 6 3 15
0 2 3 1
5 2 8 5
Sample Output 1:
2
1
2
1
Sample Input 2:
2
5 6
99 5
Sample Output 2:
1
1
Sample Input 3:
3
666 666 666
777 777 777
100 100 100
Sample Output 3:
0
0
0
'''
n = int(input())
matrix = []
for _ in range(n):
    row = list(map(int, input().split()))
    matrix.append(row)
result = []
for row in matrix:
    count = sum(1 for element in row if element > (sum(row) / len(row)))
    result.append(count)
for count in result:
    print(count)
# OR
matrix = [list(map(int, input().split())) for i in range(int(input()))]
result = []
for row in matrix:
    count = sum(1 for element in row if element > (sum(row) / len(row)))
    result.append(count)
for count in result:
    print(count)
--------------------------------------------------------------------------------------------------------------
'''
174. Реализуйте функцию letter_multiply(). Она должна принимать три параметра:
    Строку
    Символ
    Число, которое обозначает, сколько раз нужно повторить символ в слове
text = 'python'
print(letter_multiply(text, 'p', 2)) # => ppython
print(letter_multiply(text, 'y', 3)) # => pyyython
print(letter_multiply(text, 'n', 4)) # => pythonnnn
Укажите аннотации типов при объявлении функции.
Подсказка

Для замены символов в строке воспользуйтесь методом replace()
'''
# version 1
def letter_multiply(text: str, symdol: str, num: int) -> str:
    result: str = ''
    for item in text:
        if item == symdol:
            result += item * num
        else:
            result += item
    return result
# version 2
def letter_multiply(text: str, letter: str, count: int) -> str:
    return text.replace(letter, letter * count)

if __name__ == "__main__":
    text = 'python'
    print(letter_multiply(text, 'p', 2))  # => ppython
    print(letter_multiply(text, 'y', 3))  # => pyyython
    print(letter_multiply(text, 'n', 4))  # => pythonnnn

--------------------------------------------------------------------------------------------------------------
'''
175.Напишите функцию get_age_difference(), которая принимает два года рождения и возвращает строку 
с разницей в возрасте в виде The age difference is 11.
Пример работы функции:
actual = get_age_difference(2001, 2018)
print(actual)  # => The age difference is 17
'''
def get_age_difference(first_birthday: int, second_birthday: int):
    return f"The age difference is {abs(first_birthday - second_birthday)}"


if __name__ == '__main__':
    actual = get_age_difference(2001, 2018)
    print(actual)

--------------------------------------------------------------------------------------------------------------
'''
176.Реализуйте функцию has_upper_case(), которая определяет, содержит ли строка заглавные буквы. 
Функция должна вернуть булево значение:

has_upper_case('')  # False

has_upper_case('python')  # False

has_upper_case('pyThon')  # True

Подсказка

Воспользуйтесь методом из стандартной библиотеки, который приводит строку к нижнему регистру. 
Обратите внимание, чем отличается такая строка от исходной.
'''
def has_upper_case(text: str):
    return text != text.lower()


if __name__ == "__main__":
    print(has_upper_case(''))  # False
    print(has_upper_case('python'))  # False
    print(has_upper_case('pyThon'))  # True

--------------------------------------------------------------------------------------------------------------
'''
177.Реализуйте функцию is_leap_year(), которая определяет, является ли год високосным. 
Год будет високосным, если он делится без остатка на 400, или он одновременно делится без остатка
 на 4 и не делится на 100:

is_leap_year(2018)  # False

is_leap_year(2017)  # False

is_leap_year(2016)  # True
'''
def is_leap_year(year):
    return year % 400 == 0 or (year % 4 == 0 and year % 100 != 0)


if __name__ == '__main__':
    print(is_leap_year(2018))  # False
    print(is_leap_year(2017))  # False
    print(is_leap_year(2016))  # True
    print(is_leap_year(2000))  # True

--------------------------------------------------------------------------------------------------------------
'''
178.Два велосипеда
Ограничение времени 	1 секунда
Ограничение памяти 	256Mb
Ввод 	стандартный ввод или input.txt
Вывод 	стандартный вывод или output.txt

Вася решил накопить денег на два одинаковых велосипеда — себе и сестре. 
У Васи есть копилка, в которую каждый день он может добавлять деньги (если, 
конечно, у него есть такая финансовая возможность). В процессе накопления 
Вася не вынимает деньги из копилки. У вас есть информация о росте Васиных 
накоплений — сколько у Васи в копилке было денег в каждый из дней.

Ваша задача — по заданной стоимости велосипеда определить первый день, 
в которой Вася смог бы купить один велосипед, и первый день, в который 
Вася смог бы купить два велосипеда.

Подсказка: решение должно работать за O(log n).

Формат ввода
В первой строке дано число дней n, по которым велись наблюдения за Васиными 
накоплениями. 1 ≤ n ≤ 106.
В следующей строке записаны n целых неотрицательных чисел. Числа идут в 
порядке неубывания. Каждое из чисел не превосходит 106.
В третьей строке записано целое положительное число s — стоимость велосипеда. 
Это число не превосходит 106.
Формат вывода

Нужно вывести два числа — номера дней по условию задачи.

Если необходимой суммы в копилке не нашлось, нужно вернуть -1 вместо номера дня.
Пример 1
Ввод
6
1 2 4 4 6 8
3
Вывод
3 5

Пример 2
Ввод
6
1 2 4 4 4 4
3
Вывод
3 -1

Пример 3
Ввод
6
1 2 4 4 4 4
10
Вывод
-1 -1
'''
def bicycles(many, cost):
    n = len(many)
    left = 1
    right = n

    # Поиск первого дня для покупки одного велосипеда
    while left <= right:
        mid = (left + right) // 2
        if many[mid - 1] >= cost:
            right = mid - 1
        else:
            left = mid + 1

    if left > n or many[left - 1] < cost:
        # Вася не сможет купить ни одного велосипеда
        first_bike_day = -1
    else:
        first_bike_day = left

    left = 1
    right = n

    # Поиск первого дня для покупки двух велосипедов
    while left <= right:
        mid = (left + right) // 2
        if many[mid - 1] >= 2 * cost:
            right = mid - 1
        else:
            left = mid + 1

    if left > n or many[left - 1] < 2 * cost:
        # Вася не сможет купить два велосипеда
        return first_bike_day, -1
    else:
        return first_bike_day, left


if __name__ == '__main__':
    count_bicycles = int(input())
    print(
        *bicycles(many=[int(i) for i in input().split()], cost=int(input()))
    )

--------------------------------------------------------------------------------------------------------------
'''
179.
'''
--------------------------------------------------------------------------------------------------------------
'''
180.
'''
--------------------------------------------------------------------------------------------------------------
'''
181.
'''
--------------------------------------------------------------------------------------------------------------
'''
182.
'''
--------------------------------------------------------------------------------------------------------------
'''
183.
'''
--------------------------------------------------------------------------------------------------------------
'''
184.
'''
--------------------------------------------------------------------------------------------------------------
'''
185.
'''
--------------------------------------------------------------------------------------------------------------
'''
186.
'''
--------------------------------------------------------------------------------------------------------------
'''
187.
'''
--------------------------------------------------------------------------------------------------------------
'''
188.
'''
--------------------------------------------------------------------------------------------------------------
'''
189.
'''
--------------------------------------------------------------------------------------------------------------
'''
190.
'''
--------------------------------------------------------------------------------------------------------------
'''
191.
'''
--------------------------------------------------------------------------------------------------------------
'''
192.
'''
--------------------------------------------------------------------------------------------------------------
'''
193.
'''
--------------------------------------------------------------------------------------------------------------
'''
194.
'''
--------------------------------------------------------------------------------------------------------------
'''
195.
'''
--------------------------------------------------------------------------------------------------------------
'''
196.
'''
--------------------------------------------------------------------------------------------------------------
'''
197.
'''
--------------------------------------------------------------------------------------------------------------
'''
198.
'''
--------------------------------------------------------------------------------------------------------------
'''
199.
'''
--------------------------------------------------------------------------------------------------------------
'''
200.
'''
--------------------------------------------------------------------------------------------------------------
'''
201.
'''
--------------------------------------------------------------------------------------------------------------
'''
202.
'''
--------------------------------------------------------------------------------------------------------------
'''
203.
'''
--------------------------------------------------------------------------------------------------------------
'''
204.
'''
--------------------------------------------------------------------------------------------------------------
'''
205.
'''
--------------------------------------------------------------------------------------------------------------
'''
206.
'''
--------------------------------------------------------------------------------------------------------------
'''
207.
'''
--------------------------------------------------------------------------------------------------------------
'''
208.
'''
--------------------------------------------------------------------------------------------------------------
'''
209.
'''
--------------------------------------------------------------------------------------------------------------
'''
210.
'''
--------------------------------------------------------------------------------------------------------------
'''
211.
'''
--------------------------------------------------------------------------------------------------------------
'''
212.
'''
--------------------------------------------------------------------------------------------------------------
'''
213.
'''
--------------------------------------------------------------------------------------------------------------
'''
214.
'''
--------------------------------------------------------------------------------------------------------------
'''
215.
'''
--------------------------------------------------------------------------------------------------------------
'''
216.
'''
--------------------------------------------------------------------------------------------------------------
'''
217.
'''
--------------------------------------------------------------------------------------------------------------
'''
218.
'''
--------------------------------------------------------------------------------------------------------------
'''
219.
'''
--------------------------------------------------------------------------------------------------------------
'''
220.
'''
--------------------------------------------------------------------------------------------------------------
'''
221.
'''
--------------------------------------------------------------------------------------------------------------
'''
222.
'''
--------------------------------------------------------------------------------------------------------------
'''
223.
'''
--------------------------------------------------------------------------------------------------------------
'''
224.
'''
--------------------------------------------------------------------------------------------------------------
'''
225.
'''
--------------------------------------------------------------------------------------------------------------
'''
226.
'''
--------------------------------------------------------------------------------------------------------------
'''
227.
'''
--------------------------------------------------------------------------------------------------------------
'''
228.
'''
--------------------------------------------------------------------------------------------------------------
'''
229.
'''
--------------------------------------------------------------------------------------------------------------
'''
230.
'''
--------------------------------------------------------------------------------------------------------------
'''
231.
'''
--------------------------------------------------------------------------------------------------------------
'''
232.
'''
--------------------------------------------------------------------------------------------------------------
'''
233.
'''
--------------------------------------------------------------------------------------------------------------
'''
234.
'''
--------------------------------------------------------------------------------------------------------------
'''
235.
'''
--------------------------------------------------------------------------------------------------------------
'''
236.
'''
--------------------------------------------------------------------------------------------------------------
'''
237.
'''
--------------------------------------------------------------------------------------------------------------
'''
238.
'''
--------------------------------------------------------------------------------------------------------------
'''
239.
'''
--------------------------------------------------------------------------------------------------------------
'''
240.
'''
--------------------------------------------------------------------------------------------------------------
'''
241.
'''
--------------------------------------------------------------------------------------------------------------
'''
242.
'''
--------------------------------------------------------------------------------------------------------------
'''
243.
'''
--------------------------------------------------------------------------------------------------------------
'''
244.
'''
--------------------------------------------------------------------------------------------------------------
'''
245.
'''
--------------------------------------------------------------------------------------------------------------
'''
246.
'''
--------------------------------------------------------------------------------------------------------------
'''
247.
'''
--------------------------------------------------------------------------------------------------------------
'''
248.
'''
--------------------------------------------------------------------------------------------------------------
'''
249.
'''
--------------------------------------------------------------------------------------------------------------
'''
250.
'''
--------------------------------------------------------------------------------------------------------------
'''
251.
'''
--------------------------------------------------------------------------------------------------------------
'''
252.
'''
--------------------------------------------------------------------------------------------------------------
'''
253.
'''
--------------------------------------------------------------------------------------------------------------
'''
254.
'''
--------------------------------------------------------------------------------------------------------------
'''
255.
'''
--------------------------------------------------------------------------------------------------------------
'''
256.
'''
--------------------------------------------------------------------------------------------------------------
'''
257.
'''
--------------------------------------------------------------------------------------------------------------
'''
258.
'''
--------------------------------------------------------------------------------------------------------------
'''
259.
'''
--------------------------------------------------------------------------------------------------------------
'''
260.
'''
--------------------------------------------------------------------------------------------------------------
'''
261.
'''
--------------------------------------------------------------------------------------------------------------
'''
262.
'''
--------------------------------------------------------------------------------------------------------------
'''
263.
'''
--------------------------------------------------------------------------------------------------------------
'''
264.
'''
--------------------------------------------------------------------------------------------------------------
'''
265.
'''
--------------------------------------------------------------------------------------------------------------
'''
266.
'''
--------------------------------------------------------------------------------------------------------------
'''
267.
'''
--------------------------------------------------------------------------------------------------------------
'''
268.
'''
--------------------------------------------------------------------------------------------------------------
'''
269.
'''
--------------------------------------------------------------------------------------------------------------
'''
270.
'''
--------------------------------------------------------------------------------------------------------------
'''
271.
'''
--------------------------------------------------------------------------------------------------------------
'''
272.
'''
--------------------------------------------------------------------------------------------------------------
'''
273.
'''
--------------------------------------------------------------------------------------------------------------
'''
274.
'''
--------------------------------------------------------------------------------------------------------------
'''
275.
'''
--------------------------------------------------------------------------------------------------------------
'''
276.
'''
--------------------------------------------------------------------------------------------------------------
'''
277.
'''
--------------------------------------------------------------------------------------------------------------
'''
278.
'''
--------------------------------------------------------------------------------------------------------------
'''
279.
'''
--------------------------------------------------------------------------------------------------------------
'''
280.
'''
--------------------------------------------------------------------------------------------------------------
'''
281.
'''
--------------------------------------------------------------------------------------------------------------
'''
282.
'''
--------------------------------------------------------------------------------------------------------------
'''
283.
'''
--------------------------------------------------------------------------------------------------------------
'''
284.
'''
--------------------------------------------------------------------------------------------------------------
'''
285.
'''
--------------------------------------------------------------------------------------------------------------
'''
286.
'''
--------------------------------------------------------------------------------------------------------------
'''
287.
'''
--------------------------------------------------------------------------------------------------------------
'''
288.
'''
--------------------------------------------------------------------------------------------------------------
'''
289.
'''
--------------------------------------------------------------------------------------------------------------
'''
290.
'''
--------------------------------------------------------------------------------------------------------------
'''
291.
'''
--------------------------------------------------------------------------------------------------------------
'''
292.
'''
--------------------------------------------------------------------------------------------------------------
'''
293.
'''
--------------------------------------------------------------------------------------------------------------
'''
294.
'''
--------------------------------------------------------------------------------------------------------------
'''
295.
'''
--------------------------------------------------------------------------------------------------------------
'''
296.
'''
--------------------------------------------------------------------------------------------------------------
'''
297.
'''
--------------------------------------------------------------------------------------------------------------
'''
298.
'''
--------------------------------------------------------------------------------------------------------------
'''
299.
'''
--------------------------------------------------------------------------------------------------------------
'''
300.
'''
--------------------------------------------------------------------------------------------------------------
'''
301.
'''
--------------------------------------------------------------------------------------------------------------
'''
302.
'''
--------------------------------------------------------------------------------------------------------------
'''
303.
'''
--------------------------------------------------------------------------------------------------------------
'''
304.
'''
--------------------------------------------------------------------------------------------------------------
'''
305.
'''
--------------------------------------------------------------------------------------------------------------
'''
306.
'''
--------------------------------------------------------------------------------------------------------------
'''
307.
'''
--------------------------------------------------------------------------------------------------------------
'''
308.
'''
--------------------------------------------------------------------------------------------------------------
'''
309.
'''
--------------------------------------------------------------------------------------------------------------
'''
310.
'''
--------------------------------------------------------------------------------------------------------------
'''
311.
'''
--------------------------------------------------------------------------------------------------------------
'''
312.
'''
--------------------------------------------------------------------------------------------------------------
'''
313.
'''
--------------------------------------------------------------------------------------------------------------
'''
314.
'''
--------------------------------------------------------------------------------------------------------------
'''
315.
'''
--------------------------------------------------------------------------------------------------------------
'''
316.
'''
--------------------------------------------------------------------------------------------------------------
'''
317.
'''
--------------------------------------------------------------------------------------------------------------
'''
318.
'''
--------------------------------------------------------------------------------------------------------------
'''
319.
'''
--------------------------------------------------------------------------------------------------------------
'''
320.
'''
--------------------------------------------------------------------------------------------------------------
'''
321.
'''
--------------------------------------------------------------------------------------------------------------
'''
322.
'''
--------------------------------------------------------------------------------------------------------------
'''
323.
'''
--------------------------------------------------------------------------------------------------------------
'''
324.
'''
--------------------------------------------------------------------------------------------------------------
'''
325.
'''
--------------------------------------------------------------------------------------------------------------
'''
326.
'''
--------------------------------------------------------------------------------------------------------------
'''
327.
'''
--------------------------------------------------------------------------------------------------------------
'''
328.
'''
--------------------------------------------------------------------------------------------------------------
'''
329.
'''
--------------------------------------------------------------------------------------------------------------
'''
330.
'''
--------------------------------------------------------------------------------------------------------------
'''
331.
'''
--------------------------------------------------------------------------------------------------------------
'''
332.
'''
--------------------------------------------------------------------------------------------------------------
'''
333.
'''
--------------------------------------------------------------------------------------------------------------
'''
334.
'''
--------------------------------------------------------------------------------------------------------------
'''
335.
'''
--------------------------------------------------------------------------------------------------------------
'''
336.
'''
--------------------------------------------------------------------------------------------------------------
'''
337.
'''
--------------------------------------------------------------------------------------------------------------
'''
338.
'''
--------------------------------------------------------------------------------------------------------------
'''
339.
'''
--------------------------------------------------------------------------------------------------------------
'''
340.
'''
--------------------------------------------------------------------------------------------------------------
'''
341.
'''
--------------------------------------------------------------------------------------------------------------
'''
342.
'''
--------------------------------------------------------------------------------------------------------------
'''
343.
'''
--------------------------------------------------------------------------------------------------------------
'''
344.
'''
--------------------------------------------------------------------------------------------------------------
'''
345.
'''
--------------------------------------------------------------------------------------------------------------
'''
346.
'''
--------------------------------------------------------------------------------------------------------------
'''
347.
'''
--------------------------------------------------------------------------------------------------------------
'''
348.
'''
--------------------------------------------------------------------------------------------------------------
'''
349.
'''
--------------------------------------------------------------------------------------------------------------
'''
350.
'''
--------------------------------------------------------------------------------------------------------------
'''
351.
'''
--------------------------------------------------------------------------------------------------------------
'''
352.
'''
--------------------------------------------------------------------------------------------------------------
'''
353.
'''
--------------------------------------------------------------------------------------------------------------
'''
354.
'''
--------------------------------------------------------------------------------------------------------------
'''
355.
'''
--------------------------------------------------------------------------------------------------------------
'''
356.
'''
--------------------------------------------------------------------------------------------------------------
'''
357.
'''
--------------------------------------------------------------------------------------------------------------
'''
358.
'''
--------------------------------------------------------------------------------------------------------------
'''
359.
'''
--------------------------------------------------------------------------------------------------------------
'''
360.
'''
--------------------------------------------------------------------------------------------------------------
'''
361.
'''
--------------------------------------------------------------------------------------------------------------
'''
362.
'''
--------------------------------------------------------------------------------------------------------------
'''
363.
'''
--------------------------------------------------------------------------------------------------------------
'''
364.
'''
--------------------------------------------------------------------------------------------------------------
'''
365.
'''
--------------------------------------------------------------------------------------------------------------
'''
366.
'''
--------------------------------------------------------------------------------------------------------------
'''
367.
'''
--------------------------------------------------------------------------------------------------------------
'''
368.
'''
--------------------------------------------------------------------------------------------------------------
'''
369.
'''
--------------------------------------------------------------------------------------------------------------
'''
370.
'''
--------------------------------------------------------------------------------------------------------------
'''
371.
'''
--------------------------------------------------------------------------------------------------------------
'''
372.
'''
--------------------------------------------------------------------------------------------------------------
'''
373.
'''
--------------------------------------------------------------------------------------------------------------
'''
374.
'''
--------------------------------------------------------------------------------------------------------------
'''
375.
'''
--------------------------------------------------------------------------------------------------------------
'''
376.
'''
--------------------------------------------------------------------------------------------------------------
'''
377.
'''
--------------------------------------------------------------------------------------------------------------
'''
378.
'''
--------------------------------------------------------------------------------------------------------------
'''
379.
'''
--------------------------------------------------------------------------------------------------------------
'''
380.
'''
--------------------------------------------------------------------------------------------------------------
'''
381.
'''
--------------------------------------------------------------------------------------------------------------
'''
382.
'''
--------------------------------------------------------------------------------------------------------------
'''
383.
'''
--------------------------------------------------------------------------------------------------------------
'''
384.
'''
--------------------------------------------------------------------------------------------------------------
'''
385.
'''
--------------------------------------------------------------------------------------------------------------
'''
386.
'''
--------------------------------------------------------------------------------------------------------------
'''
387.
'''
--------------------------------------------------------------------------------------------------------------
'''
388.
'''
--------------------------------------------------------------------------------------------------------------
'''
389.
'''
--------------------------------------------------------------------------------------------------------------
'''
390.
'''
--------------------------------------------------------------------------------------------------------------
'''
391.
'''
--------------------------------------------------------------------------------------------------------------
'''
392.
'''
--------------------------------------------------------------------------------------------------------------
'''
393.
'''
--------------------------------------------------------------------------------------------------------------
'''
394.
'''
--------------------------------------------------------------------------------------------------------------
'''
395.
'''
--------------------------------------------------------------------------------------------------------------
'''
396.
'''
--------------------------------------------------------------------------------------------------------------
'''
397.
'''
--------------------------------------------------------------------------------------------------------------
'''
398.
'''
--------------------------------------------------------------------------------------------------------------
'''
399.
'''
--------------------------------------------------------------------------------------------------------------
'''
400.
'''
--------------------------------------------------------------------------------------------------------------
'''
401.
'''
--------------------------------------------------------------------------------------------------------------
'''
402.
'''
--------------------------------------------------------------------------------------------------------------
'''
403.
'''
--------------------------------------------------------------------------------------------------------------
'''
404.
'''
--------------------------------------------------------------------------------------------------------------
'''
405.
'''
--------------------------------------------------------------------------------------------------------------
'''
406.
'''
--------------------------------------------------------------------------------------------------------------
'''
407.
'''
--------------------------------------------------------------------------------------------------------------
'''
408.
'''
--------------------------------------------------------------------------------------------------------------
'''
409.
'''
--------------------------------------------------------------------------------------------------------------
'''
410.
'''
--------------------------------------------------------------------------------------------------------------
'''
411.
'''
--------------------------------------------------------------------------------------------------------------
'''
412.
'''
--------------------------------------------------------------------------------------------------------------
'''
413.
'''
--------------------------------------------------------------------------------------------------------------
'''
414.
'''
--------------------------------------------------------------------------------------------------------------
'''
415.
'''
--------------------------------------------------------------------------------------------------------------
'''
416.
'''
--------------------------------------------------------------------------------------------------------------
'''
417.
'''
--------------------------------------------------------------------------------------------------------------
'''
418.
'''
--------------------------------------------------------------------------------------------------------------
'''
419.
'''
--------------------------------------------------------------------------------------------------------------
'''
420.
'''
--------------------------------------------------------------------------------------------------------------
'''
421.
'''
--------------------------------------------------------------------------------------------------------------
'''
422.
'''
--------------------------------------------------------------------------------------------------------------
'''
423.
'''
--------------------------------------------------------------------------------------------------------------
'''
424.
'''
--------------------------------------------------------------------------------------------------------------
'''
425.
'''
--------------------------------------------------------------------------------------------------------------
'''
426.
'''
--------------------------------------------------------------------------------------------------------------
'''
427.
'''
--------------------------------------------------------------------------------------------------------------
'''
428.
'''
--------------------------------------------------------------------------------------------------------------
'''
429.
'''
--------------------------------------------------------------------------------------------------------------
'''
430.
'''
--------------------------------------------------------------------------------------------------------------
'''
431.
'''
--------------------------------------------------------------------------------------------------------------
'''
432.
'''
--------------------------------------------------------------------------------------------------------------
'''
433.
'''
--------------------------------------------------------------------------------------------------------------
'''
434.
'''
--------------------------------------------------------------------------------------------------------------
'''
435.
'''
--------------------------------------------------------------------------------------------------------------
'''
436.
'''
--------------------------------------------------------------------------------------------------------------
'''
437.
'''
--------------------------------------------------------------------------------------------------------------
'''
438.
'''
--------------------------------------------------------------------------------------------------------------
'''
439.
'''
--------------------------------------------------------------------------------------------------------------
'''
440.
'''
--------------------------------------------------------------------------------------------------------------
'''
441.
'''
--------------------------------------------------------------------------------------------------------------
'''
442.
'''
--------------------------------------------------------------------------------------------------------------
'''
443.
'''
--------------------------------------------------------------------------------------------------------------
'''
444.
'''
--------------------------------------------------------------------------------------------------------------
'''
445.
'''
--------------------------------------------------------------------------------------------------------------
'''
446.
'''
--------------------------------------------------------------------------------------------------------------
'''
447.
'''
--------------------------------------------------------------------------------------------------------------
'''
448.
'''
--------------------------------------------------------------------------------------------------------------
'''
449.
'''
--------------------------------------------------------------------------------------------------------------
'''
450.
'''
--------------------------------------------------------------------------------------------------------------
'''
451.
'''
--------------------------------------------------------------------------------------------------------------
'''
452.
'''
--------------------------------------------------------------------------------------------------------------
'''
453.
'''
--------------------------------------------------------------------------------------------------------------
'''
454.
'''
--------------------------------------------------------------------------------------------------------------
'''
455.
'''
--------------------------------------------------------------------------------------------------------------
'''
456.
'''
--------------------------------------------------------------------------------------------------------------
'''
457.
'''
--------------------------------------------------------------------------------------------------------------
'''
458.
'''
--------------------------------------------------------------------------------------------------------------
'''
459.
'''
--------------------------------------------------------------------------------------------------------------
'''
460.
'''
--------------------------------------------------------------------------------------------------------------
'''
461.
'''
--------------------------------------------------------------------------------------------------------------
'''
462.
'''
--------------------------------------------------------------------------------------------------------------
'''
463.
'''
--------------------------------------------------------------------------------------------------------------
'''
464.
'''
--------------------------------------------------------------------------------------------------------------
'''
465.
'''
--------------------------------------------------------------------------------------------------------------
'''
466.
'''
--------------------------------------------------------------------------------------------------------------
'''
467.
'''
--------------------------------------------------------------------------------------------------------------
'''
468.
'''
--------------------------------------------------------------------------------------------------------------
'''
469.
'''
--------------------------------------------------------------------------------------------------------------
'''
470.
'''
--------------------------------------------------------------------------------------------------------------
'''
471.
'''
--------------------------------------------------------------------------------------------------------------
'''
472.
'''
--------------------------------------------------------------------------------------------------------------
'''
473.
'''
--------------------------------------------------------------------------------------------------------------
'''
474.
'''
--------------------------------------------------------------------------------------------------------------
'''
475.
'''
--------------------------------------------------------------------------------------------------------------
'''
476.
'''
--------------------------------------------------------------------------------------------------------------
'''
477.
'''
--------------------------------------------------------------------------------------------------------------
'''
478.
'''
--------------------------------------------------------------------------------------------------------------
'''
479.
'''
--------------------------------------------------------------------------------------------------------------
'''
480.
'''
--------------------------------------------------------------------------------------------------------------
'''
481.
'''
--------------------------------------------------------------------------------------------------------------
'''
482.
'''
--------------------------------------------------------------------------------------------------------------
'''
483.
'''
--------------------------------------------------------------------------------------------------------------
'''
484.
'''
--------------------------------------------------------------------------------------------------------------
'''
485.
'''
--------------------------------------------------------------------------------------------------------------
'''
486.
'''
--------------------------------------------------------------------------------------------------------------
'''
487.
'''
--------------------------------------------------------------------------------------------------------------
'''
488.
'''
--------------------------------------------------------------------------------------------------------------
'''
489.
'''
--------------------------------------------------------------------------------------------------------------
'''
490.
'''
--------------------------------------------------------------------------------------------------------------
'''
491.
'''
--------------------------------------------------------------------------------------------------------------
'''
492.
'''
--------------------------------------------------------------------------------------------------------------
'''
493.
'''
--------------------------------------------------------------------------------------------------------------
'''
494.
'''
--------------------------------------------------------------------------------------------------------------
'''
495.
'''
--------------------------------------------------------------------------------------------------------------
'''
496.
'''
--------------------------------------------------------------------------------------------------------------
'''
497.
'''
--------------------------------------------------------------------------------------------------------------
'''
498.
'''
--------------------------------------------------------------------------------------------------------------
'''
499.
'''
--------------------------------------------------------------------------------------------------------------
'''
500.
'''
--------------------------------------------------------------------------------------------------------------
'''
501.
'''
--------------------------------------------------------------------------------------------------------------
'''
502.
'''
--------------------------------------------------------------------------------------------------------------
'''
503.
'''
--------------------------------------------------------------------------------------------------------------
'''
504.
'''
--------------------------------------------------------------------------------------------------------------
'''
505.
'''
--------------------------------------------------------------------------------------------------------------
'''
506.
'''
--------------------------------------------------------------------------------------------------------------
'''
507.
'''
--------------------------------------------------------------------------------------------------------------
'''
508.
'''
--------------------------------------------------------------------------------------------------------------
'''
509.
'''
--------------------------------------------------------------------------------------------------------------
'''
510.
'''
--------------------------------------------------------------------------------------------------------------
'''
511.
'''
--------------------------------------------------------------------------------------------------------------
'''
512.
'''
--------------------------------------------------------------------------------------------------------------
'''
513.
'''
--------------------------------------------------------------------------------------------------------------
'''
514.
'''
--------------------------------------------------------------------------------------------------------------
'''
515.
'''
--------------------------------------------------------------------------------------------------------------
'''
516.
'''
--------------------------------------------------------------------------------------------------------------
'''
517.
'''
--------------------------------------------------------------------------------------------------------------
'''
518.
'''
--------------------------------------------------------------------------------------------------------------
'''
519.
'''
--------------------------------------------------------------------------------------------------------------
'''
520.
'''
--------------------------------------------------------------------------------------------------------------
'''
521.
'''
--------------------------------------------------------------------------------------------------------------
'''
522.
'''
--------------------------------------------------------------------------------------------------------------
'''
523.
'''
--------------------------------------------------------------------------------------------------------------
'''
524.
'''
--------------------------------------------------------------------------------------------------------------
'''
525.
'''
--------------------------------------------------------------------------------------------------------------
'''
526.
'''
--------------------------------------------------------------------------------------------------------------
'''
527.
'''
--------------------------------------------------------------------------------------------------------------
'''
528.
'''
--------------------------------------------------------------------------------------------------------------
'''
529.
'''
--------------------------------------------------------------------------------------------------------------
'''
530.
'''
--------------------------------------------------------------------------------------------------------------
'''
531.
'''
--------------------------------------------------------------------------------------------------------------
'''
532.
'''
--------------------------------------------------------------------------------------------------------------
'''
533.
'''
--------------------------------------------------------------------------------------------------------------
'''
534.
'''
--------------------------------------------------------------------------------------------------------------
'''
535.
'''
--------------------------------------------------------------------------------------------------------------
'''
536.
'''
--------------------------------------------------------------------------------------------------------------
'''
537.
'''
--------------------------------------------------------------------------------------------------------------
'''
538.
'''
--------------------------------------------------------------------------------------------------------------
'''
539.
'''
--------------------------------------------------------------------------------------------------------------
'''
540.
'''
--------------------------------------------------------------------------------------------------------------
'''
541.
'''
--------------------------------------------------------------------------------------------------------------
'''
542.
'''
--------------------------------------------------------------------------------------------------------------
'''
543.
'''
--------------------------------------------------------------------------------------------------------------
'''
544.
'''
--------------------------------------------------------------------------------------------------------------
'''
545.
'''
--------------------------------------------------------------------------------------------------------------
'''
546.
'''
--------------------------------------------------------------------------------------------------------------
'''
547.
'''
--------------------------------------------------------------------------------------------------------------
'''
548.
'''
--------------------------------------------------------------------------------------------------------------
'''
549.
'''
--------------------------------------------------------------------------------------------------------------
'''
550.
'''
--------------------------------------------------------------------------------------------------------------
'''
551.
'''
--------------------------------------------------------------------------------------------------------------
'''
552.
'''
--------------------------------------------------------------------------------------------------------------
'''
553.
'''
--------------------------------------------------------------------------------------------------------------
'''
554.
'''
--------------------------------------------------------------------------------------------------------------
'''
555.
'''
--------------------------------------------------------------------------------------------------------------
'''
556.
'''
--------------------------------------------------------------------------------------------------------------
'''
557.
'''
--------------------------------------------------------------------------------------------------------------
'''
558.
'''
--------------------------------------------------------------------------------------------------------------
'''
559.
'''
--------------------------------------------------------------------------------------------------------------
'''
560.
'''
--------------------------------------------------------------------------------------------------------------
'''
561.
'''
--------------------------------------------------------------------------------------------------------------
'''
562.
'''
--------------------------------------------------------------------------------------------------------------
'''
563.
'''
--------------------------------------------------------------------------------------------------------------
'''
564.
'''
--------------------------------------------------------------------------------------------------------------
'''
565.
'''
--------------------------------------------------------------------------------------------------------------
'''
566.
'''
--------------------------------------------------------------------------------------------------------------
'''
567.
'''
--------------------------------------------------------------------------------------------------------------
'''
568.
'''
--------------------------------------------------------------------------------------------------------------
'''
569.
'''
--------------------------------------------------------------------------------------------------------------
'''
570.
'''
--------------------------------------------------------------------------------------------------------------
'''
571.
'''
--------------------------------------------------------------------------------------------------------------
'''
572.
'''
--------------------------------------------------------------------------------------------------------------
'''
573.
'''
--------------------------------------------------------------------------------------------------------------
'''
574.
'''
--------------------------------------------------------------------------------------------------------------
'''
575.
'''
--------------------------------------------------------------------------------------------------------------
'''
576.
'''
--------------------------------------------------------------------------------------------------------------
'''
577.
'''
--------------------------------------------------------------------------------------------------------------
'''
578.
'''
--------------------------------------------------------------------------------------------------------------
'''
579.
'''
--------------------------------------------------------------------------------------------------------------
'''
580.
'''
--------------------------------------------------------------------------------------------------------------
'''
581.
'''
--------------------------------------------------------------------------------------------------------------
'''
582.
'''
--------------------------------------------------------------------------------------------------------------
'''
583.
'''
--------------------------------------------------------------------------------------------------------------
'''
584.
'''
--------------------------------------------------------------------------------------------------------------
'''
585.
'''
--------------------------------------------------------------------------------------------------------------
'''
586.
'''
--------------------------------------------------------------------------------------------------------------
'''
587.
'''
--------------------------------------------------------------------------------------------------------------
'''
588.
'''
--------------------------------------------------------------------------------------------------------------
'''
589.
'''
--------------------------------------------------------------------------------------------------------------
'''
590.
'''
--------------------------------------------------------------------------------------------------------------
'''
591.
'''
--------------------------------------------------------------------------------------------------------------
'''
592.
'''
--------------------------------------------------------------------------------------------------------------
'''
593.
'''
--------------------------------------------------------------------------------------------------------------
'''
594.
'''
--------------------------------------------------------------------------------------------------------------
'''
595.
'''
--------------------------------------------------------------------------------------------------------------
'''
596.
'''
--------------------------------------------------------------------------------------------------------------
'''
597.
'''
--------------------------------------------------------------------------------------------------------------
'''
598.
'''
--------------------------------------------------------------------------------------------------------------
'''
599.
'''
--------------------------------------------------------------------------------------------------------------
'''
600.
'''
--------------------------------------------------------------------------------------------------------------
'''
601.
'''
--------------------------------------------------------------------------------------------------------------
'''
602.
'''
--------------------------------------------------------------------------------------------------------------
'''
603.
'''
--------------------------------------------------------------------------------------------------------------
'''
604.
'''
--------------------------------------------------------------------------------------------------------------
'''
605.
'''
--------------------------------------------------------------------------------------------------------------
'''
606.
'''
--------------------------------------------------------------------------------------------------------------
'''
607.
'''
--------------------------------------------------------------------------------------------------------------
'''
608.
'''
--------------------------------------------------------------------------------------------------------------
'''
609.
'''
--------------------------------------------------------------------------------------------------------------
'''
610.
'''
--------------------------------------------------------------------------------------------------------------
'''
611.
'''
--------------------------------------------------------------------------------------------------------------
'''
612.
'''
--------------------------------------------------------------------------------------------------------------
'''
613.
'''
--------------------------------------------------------------------------------------------------------------
'''
614.
'''
--------------------------------------------------------------------------------------------------------------
'''
615.
'''
--------------------------------------------------------------------------------------------------------------
'''
616.
'''
--------------------------------------------------------------------------------------------------------------
'''
617.
'''
--------------------------------------------------------------------------------------------------------------
'''
618.
'''
--------------------------------------------------------------------------------------------------------------
'''
619.
'''
--------------------------------------------------------------------------------------------------------------
'''
620.
'''
--------------------------------------------------------------------------------------------------------------
'''
621.
'''
--------------------------------------------------------------------------------------------------------------
'''
622.
'''
--------------------------------------------------------------------------------------------------------------
'''
623.
'''
--------------------------------------------------------------------------------------------------------------
'''
624.
'''
--------------------------------------------------------------------------------------------------------------
'''
625.
'''
--------------------------------------------------------------------------------------------------------------
'''
626.
'''
--------------------------------------------------------------------------------------------------------------
'''
627.
'''
--------------------------------------------------------------------------------------------------------------
'''
628.
'''
--------------------------------------------------------------------------------------------------------------
'''
629.
'''
--------------------------------------------------------------------------------------------------------------
'''
630.
'''
--------------------------------------------------------------------------------------------------------------
'''
631.
'''
--------------------------------------------------------------------------------------------------------------
'''
632.
'''
--------------------------------------------------------------------------------------------------------------
'''
633.
'''
--------------------------------------------------------------------------------------------------------------
'''
634.
'''
--------------------------------------------------------------------------------------------------------------
'''
635.
'''
--------------------------------------------------------------------------------------------------------------
'''
636.
'''
--------------------------------------------------------------------------------------------------------------
'''
637.
'''
--------------------------------------------------------------------------------------------------------------
'''
638.
'''
--------------------------------------------------------------------------------------------------------------
'''
639.
'''
--------------------------------------------------------------------------------------------------------------
'''
640.
'''
--------------------------------------------------------------------------------------------------------------
'''
641.
'''
--------------------------------------------------------------------------------------------------------------
'''
642.
'''
--------------------------------------------------------------------------------------------------------------
'''
643.
'''
--------------------------------------------------------------------------------------------------------------
'''
644.
'''
--------------------------------------------------------------------------------------------------------------
'''
645.
'''
--------------------------------------------------------------------------------------------------------------
'''
646.
'''
--------------------------------------------------------------------------------------------------------------
'''
647.
'''
--------------------------------------------------------------------------------------------------------------
'''
648.
'''
--------------------------------------------------------------------------------------------------------------
'''
649.
'''
--------------------------------------------------------------------------------------------------------------
'''
650.
'''
--------------------------------------------------------------------------------------------------------------
'''
651.
'''
--------------------------------------------------------------------------------------------------------------
'''
652.
'''
--------------------------------------------------------------------------------------------------------------
'''
653.
'''
--------------------------------------------------------------------------------------------------------------
'''
654.
'''
--------------------------------------------------------------------------------------------------------------
'''
655.
'''
--------------------------------------------------------------------------------------------------------------
'''
656.
'''
--------------------------------------------------------------------------------------------------------------
'''
657.
'''
--------------------------------------------------------------------------------------------------------------
'''
658.
'''
--------------------------------------------------------------------------------------------------------------
'''
659.
'''
--------------------------------------------------------------------------------------------------------------
'''
660.
'''
--------------------------------------------------------------------------------------------------------------
'''
661.
'''
--------------------------------------------------------------------------------------------------------------
'''
662.
'''
--------------------------------------------------------------------------------------------------------------
'''
663.
'''
--------------------------------------------------------------------------------------------------------------
'''
664.
'''
--------------------------------------------------------------------------------------------------------------
'''
665.
'''
--------------------------------------------------------------------------------------------------------------
'''
666.
'''
--------------------------------------------------------------------------------------------------------------
'''
667.
'''
--------------------------------------------------------------------------------------------------------------
'''
668.
'''
--------------------------------------------------------------------------------------------------------------
'''
669.
'''
--------------------------------------------------------------------------------------------------------------
'''
670.
'''
--------------------------------------------------------------------------------------------------------------
'''
671.
'''
--------------------------------------------------------------------------------------------------------------
'''
672.
'''
--------------------------------------------------------------------------------------------------------------
'''
673.
'''
--------------------------------------------------------------------------------------------------------------
'''
674.
'''
--------------------------------------------------------------------------------------------------------------
'''
675.
'''
--------------------------------------------------------------------------------------------------------------
'''
676.
'''
--------------------------------------------------------------------------------------------------------------
'''
677.
'''
--------------------------------------------------------------------------------------------------------------
'''
678.
'''
--------------------------------------------------------------------------------------------------------------
'''
679.
'''
--------------------------------------------------------------------------------------------------------------
'''
680.
'''
--------------------------------------------------------------------------------------------------------------
'''
681.
'''
--------------------------------------------------------------------------------------------------------------
'''
682.
'''
--------------------------------------------------------------------------------------------------------------
'''
683.
'''
--------------------------------------------------------------------------------------------------------------
'''
684.
'''
--------------------------------------------------------------------------------------------------------------
'''
685.
'''
--------------------------------------------------------------------------------------------------------------
'''
686.
'''
--------------------------------------------------------------------------------------------------------------
'''
687.
'''
--------------------------------------------------------------------------------------------------------------
'''
688.
'''
--------------------------------------------------------------------------------------------------------------
'''
689.
'''
--------------------------------------------------------------------------------------------------------------
'''
690.
'''
--------------------------------------------------------------------------------------------------------------
'''
691.
'''
--------------------------------------------------------------------------------------------------------------
'''
692.
'''
--------------------------------------------------------------------------------------------------------------
'''
693.
'''
--------------------------------------------------------------------------------------------------------------
'''
694.
'''
--------------------------------------------------------------------------------------------------------------
'''
695.
'''
--------------------------------------------------------------------------------------------------------------
'''
696.
'''
--------------------------------------------------------------------------------------------------------------
'''
697.
'''
--------------------------------------------------------------------------------------------------------------
'''
698.
'''
--------------------------------------------------------------------------------------------------------------
'''
699.
'''
--------------------------------------------------------------------------------------------------------------
'''
700.
'''
--------------------------------------------------------------------------------------------------------------
'''
701.
'''
--------------------------------------------------------------------------------------------------------------
'''
702.
'''
--------------------------------------------------------------------------------------------------------------
'''
703.
'''
--------------------------------------------------------------------------------------------------------------
'''
704.
'''
--------------------------------------------------------------------------------------------------------------
'''
705.
'''
--------------------------------------------------------------------------------------------------------------
'''
706.
'''
--------------------------------------------------------------------------------------------------------------
'''
707.
'''
--------------------------------------------------------------------------------------------------------------
'''
708.
'''
--------------------------------------------------------------------------------------------------------------
'''
709.
'''
--------------------------------------------------------------------------------------------------------------
'''
710.
'''
--------------------------------------------------------------------------------------------------------------
'''
711.
'''
--------------------------------------------------------------------------------------------------------------
'''
712.
'''
--------------------------------------------------------------------------------------------------------------
'''
713.
'''
--------------------------------------------------------------------------------------------------------------
'''
714.
'''
--------------------------------------------------------------------------------------------------------------
'''
715.
'''
--------------------------------------------------------------------------------------------------------------
'''
716.
'''
--------------------------------------------------------------------------------------------------------------
'''
717.
'''
--------------------------------------------------------------------------------------------------------------
'''
718.
'''
--------------------------------------------------------------------------------------------------------------
'''
719.
'''
--------------------------------------------------------------------------------------------------------------
'''
720.
'''
--------------------------------------------------------------------------------------------------------------
'''
721.
'''
--------------------------------------------------------------------------------------------------------------
'''
722.
'''
--------------------------------------------------------------------------------------------------------------
'''
723.
'''
--------------------------------------------------------------------------------------------------------------
'''
724.
'''
--------------------------------------------------------------------------------------------------------------
'''
725.
'''
--------------------------------------------------------------------------------------------------------------
'''
726.
'''
--------------------------------------------------------------------------------------------------------------
'''
727.
'''
--------------------------------------------------------------------------------------------------------------
'''
728.
'''
--------------------------------------------------------------------------------------------------------------
'''
729.
'''
--------------------------------------------------------------------------------------------------------------
'''
730.
'''
--------------------------------------------------------------------------------------------------------------
'''
731.
'''
--------------------------------------------------------------------------------------------------------------
'''
732.
'''
--------------------------------------------------------------------------------------------------------------
'''
733.
'''
--------------------------------------------------------------------------------------------------------------
'''
734.
'''
--------------------------------------------------------------------------------------------------------------
'''
735.
'''
--------------------------------------------------------------------------------------------------------------
'''
736.
'''
--------------------------------------------------------------------------------------------------------------
'''
737.
'''
--------------------------------------------------------------------------------------------------------------
'''
738.
'''
--------------------------------------------------------------------------------------------------------------
'''
739.
'''
--------------------------------------------------------------------------------------------------------------
'''
740.
'''
--------------------------------------------------------------------------------------------------------------
'''
741.
'''
--------------------------------------------------------------------------------------------------------------
'''
742.
'''
--------------------------------------------------------------------------------------------------------------
'''
743.
'''
--------------------------------------------------------------------------------------------------------------
'''
744.
'''
--------------------------------------------------------------------------------------------------------------
'''
745.
'''
--------------------------------------------------------------------------------------------------------------
'''
746.
'''
--------------------------------------------------------------------------------------------------------------
'''
747.
'''
--------------------------------------------------------------------------------------------------------------
'''
748.
'''
--------------------------------------------------------------------------------------------------------------
'''
749.
'''
--------------------------------------------------------------------------------------------------------------
'''
750.
'''
--------------------------------------------------------------------------------------------------------------
'''
751.
'''
--------------------------------------------------------------------------------------------------------------
'''
752.
'''
--------------------------------------------------------------------------------------------------------------
'''
753.
'''
--------------------------------------------------------------------------------------------------------------
'''
754.
'''
--------------------------------------------------------------------------------------------------------------
'''
755.
'''
--------------------------------------------------------------------------------------------------------------
'''
756.
'''
--------------------------------------------------------------------------------------------------------------
'''
757.
'''
--------------------------------------------------------------------------------------------------------------
'''
758.
'''
--------------------------------------------------------------------------------------------------------------
'''
759.
'''
--------------------------------------------------------------------------------------------------------------
'''
760.
'''
--------------------------------------------------------------------------------------------------------------
'''
761.
'''
--------------------------------------------------------------------------------------------------------------
'''
762.
'''
--------------------------------------------------------------------------------------------------------------
'''
763.
'''
--------------------------------------------------------------------------------------------------------------
'''
764.
'''
--------------------------------------------------------------------------------------------------------------
'''
765.
'''
--------------------------------------------------------------------------------------------------------------
'''
766.
'''
--------------------------------------------------------------------------------------------------------------
'''
767.
'''
--------------------------------------------------------------------------------------------------------------
'''
768.
'''
--------------------------------------------------------------------------------------------------------------
'''
769.
'''
--------------------------------------------------------------------------------------------------------------
'''
770.
'''
--------------------------------------------------------------------------------------------------------------
'''
771.
'''
--------------------------------------------------------------------------------------------------------------
'''
772.
'''
--------------------------------------------------------------------------------------------------------------
'''
773.
'''
--------------------------------------------------------------------------------------------------------------
'''
774.
'''
--------------------------------------------------------------------------------------------------------------
'''
775.
'''
--------------------------------------------------------------------------------------------------------------
'''
776.
'''
--------------------------------------------------------------------------------------------------------------
'''
777.
'''
--------------------------------------------------------------------------------------------------------------
'''
778.
'''
--------------------------------------------------------------------------------------------------------------
'''
779.
'''
--------------------------------------------------------------------------------------------------------------
'''
780.
'''
--------------------------------------------------------------------------------------------------------------
'''
781.
'''
--------------------------------------------------------------------------------------------------------------
'''
782.
'''
--------------------------------------------------------------------------------------------------------------
'''
783.
'''
--------------------------------------------------------------------------------------------------------------
'''
784.
'''
--------------------------------------------------------------------------------------------------------------
'''
785.
'''
--------------------------------------------------------------------------------------------------------------
'''
786.
'''
--------------------------------------------------------------------------------------------------------------
'''
787.
'''
--------------------------------------------------------------------------------------------------------------
'''
788.
'''
--------------------------------------------------------------------------------------------------------------
'''
789.
'''
--------------------------------------------------------------------------------------------------------------
'''
790.
'''
--------------------------------------------------------------------------------------------------------------
'''
791.
'''
--------------------------------------------------------------------------------------------------------------
'''
792.
'''
--------------------------------------------------------------------------------------------------------------
'''
793.
'''
--------------------------------------------------------------------------------------------------------------
'''
794.
'''
--------------------------------------------------------------------------------------------------------------
'''
795.
'''
--------------------------------------------------------------------------------------------------------------
'''
796.
'''
--------------------------------------------------------------------------------------------------------------
'''
797.
'''
--------------------------------------------------------------------------------------------------------------
'''
798.
'''
--------------------------------------------------------------------------------------------------------------
'''
799.
'''
--------------------------------------------------------------------------------------------------------------
'''
800.
'''
--------------------------------------------------------------------------------------------------------------
'''
801.
'''
--------------------------------------------------------------------------------------------------------------
'''
802.
'''
--------------------------------------------------------------------------------------------------------------
'''
803.
'''
--------------------------------------------------------------------------------------------------------------
'''
804.
'''
--------------------------------------------------------------------------------------------------------------
'''
805.
'''
--------------------------------------------------------------------------------------------------------------
'''
806.
'''
--------------------------------------------------------------------------------------------------------------
'''
807.
'''
--------------------------------------------------------------------------------------------------------------
'''
808.
'''
--------------------------------------------------------------------------------------------------------------
'''
809.
'''
--------------------------------------------------------------------------------------------------------------
'''
810.
'''
--------------------------------------------------------------------------------------------------------------
'''
811.
'''
--------------------------------------------------------------------------------------------------------------
'''
812.
'''
--------------------------------------------------------------------------------------------------------------
'''
813.
'''
--------------------------------------------------------------------------------------------------------------
'''
814.
'''
--------------------------------------------------------------------------------------------------------------
'''
815.
'''
--------------------------------------------------------------------------------------------------------------
'''
816.
'''
--------------------------------------------------------------------------------------------------------------
'''
817.
'''
--------------------------------------------------------------------------------------------------------------
'''
818.
'''
--------------------------------------------------------------------------------------------------------------
'''
819.
'''
--------------------------------------------------------------------------------------------------------------
'''
820.
'''
--------------------------------------------------------------------------------------------------------------
'''
821.
'''
--------------------------------------------------------------------------------------------------------------
'''
822.
'''
--------------------------------------------------------------------------------------------------------------
'''
823.
'''
--------------------------------------------------------------------------------------------------------------
'''
824.
'''
--------------------------------------------------------------------------------------------------------------
'''
825.
'''
--------------------------------------------------------------------------------------------------------------
'''
826.
'''
--------------------------------------------------------------------------------------------------------------
'''
827.
'''
--------------------------------------------------------------------------------------------------------------
'''
828.
'''
--------------------------------------------------------------------------------------------------------------
'''
829.
'''
--------------------------------------------------------------------------------------------------------------
'''
830.
'''
--------------------------------------------------------------------------------------------------------------
'''
831.
'''
--------------------------------------------------------------------------------------------------------------
'''
832.
'''
--------------------------------------------------------------------------------------------------------------
'''
833.
'''
--------------------------------------------------------------------------------------------------------------
'''
834.
'''
--------------------------------------------------------------------------------------------------------------
'''
835.
'''
--------------------------------------------------------------------------------------------------------------
'''
836.
'''
--------------------------------------------------------------------------------------------------------------
'''
837.
'''
--------------------------------------------------------------------------------------------------------------
'''
838.
'''
--------------------------------------------------------------------------------------------------------------
'''
839.
'''
--------------------------------------------------------------------------------------------------------------
'''
840.
'''
--------------------------------------------------------------------------------------------------------------
'''
841.
'''
--------------------------------------------------------------------------------------------------------------
'''
842.
'''
--------------------------------------------------------------------------------------------------------------
'''
843.
'''
--------------------------------------------------------------------------------------------------------------
'''
844.
'''
--------------------------------------------------------------------------------------------------------------
'''
845.
'''
--------------------------------------------------------------------------------------------------------------
'''
846.
'''
--------------------------------------------------------------------------------------------------------------
'''
847.
'''
--------------------------------------------------------------------------------------------------------------
'''
848.
'''
--------------------------------------------------------------------------------------------------------------
'''
849.
'''
--------------------------------------------------------------------------------------------------------------
'''
850.
'''
--------------------------------------------------------------------------------------------------------------
'''
851.
'''
--------------------------------------------------------------------------------------------------------------
'''
852.
'''
--------------------------------------------------------------------------------------------------------------
'''
853.
'''
--------------------------------------------------------------------------------------------------------------
'''
854.
'''
--------------------------------------------------------------------------------------------------------------
'''
855.
'''
--------------------------------------------------------------------------------------------------------------
'''
856.
'''
--------------------------------------------------------------------------------------------------------------
'''
857.
'''
--------------------------------------------------------------------------------------------------------------
'''
858.
'''
--------------------------------------------------------------------------------------------------------------
'''
859.
'''
--------------------------------------------------------------------------------------------------------------
'''
860.
'''
--------------------------------------------------------------------------------------------------------------
'''
861.
'''
--------------------------------------------------------------------------------------------------------------
'''
862.
'''
--------------------------------------------------------------------------------------------------------------
'''
863.
'''
--------------------------------------------------------------------------------------------------------------
'''
864.
'''
--------------------------------------------------------------------------------------------------------------
'''
865.
'''
--------------------------------------------------------------------------------------------------------------
'''
866.
'''
--------------------------------------------------------------------------------------------------------------
'''
867.
'''
--------------------------------------------------------------------------------------------------------------
'''
868.
'''
--------------------------------------------------------------------------------------------------------------
'''
869.
'''
--------------------------------------------------------------------------------------------------------------
'''
870.
'''
--------------------------------------------------------------------------------------------------------------
'''
871.
'''
--------------------------------------------------------------------------------------------------------------
'''
872.
'''
--------------------------------------------------------------------------------------------------------------
'''
873.
'''
--------------------------------------------------------------------------------------------------------------
'''
874.
'''
--------------------------------------------------------------------------------------------------------------
'''
875.
'''
--------------------------------------------------------------------------------------------------------------
'''
876.
'''
--------------------------------------------------------------------------------------------------------------
'''
877.
'''
--------------------------------------------------------------------------------------------------------------
'''
878.
'''
--------------------------------------------------------------------------------------------------------------
'''
879.
'''
--------------------------------------------------------------------------------------------------------------
'''
880.
'''
--------------------------------------------------------------------------------------------------------------
'''
881.
'''
--------------------------------------------------------------------------------------------------------------
'''
882.
'''
--------------------------------------------------------------------------------------------------------------
'''
883.
'''
--------------------------------------------------------------------------------------------------------------
'''
884.
'''
--------------------------------------------------------------------------------------------------------------
'''
885.
'''
--------------------------------------------------------------------------------------------------------------
'''
886.
'''
--------------------------------------------------------------------------------------------------------------
'''
887.
'''
--------------------------------------------------------------------------------------------------------------
'''
888.
'''
--------------------------------------------------------------------------------------------------------------
'''
889.
'''
--------------------------------------------------------------------------------------------------------------
'''
890.
'''
--------------------------------------------------------------------------------------------------------------
'''
891.
'''
--------------------------------------------------------------------------------------------------------------
'''
892.
'''
--------------------------------------------------------------------------------------------------------------
'''
893.
'''
--------------------------------------------------------------------------------------------------------------
'''
894.
'''
--------------------------------------------------------------------------------------------------------------
'''
895.
'''
--------------------------------------------------------------------------------------------------------------
'''
896.
'''
--------------------------------------------------------------------------------------------------------------
'''
897.
'''
--------------------------------------------------------------------------------------------------------------
'''
898.
'''
--------------------------------------------------------------------------------------------------------------
'''
899.
'''
--------------------------------------------------------------------------------------------------------------
'''
900.
'''
--------------------------------------------------------------------------------------------------------------
'''
901.
'''
--------------------------------------------------------------------------------------------------------------
'''
902.
'''
--------------------------------------------------------------------------------------------------------------
'''
903.
'''
--------------------------------------------------------------------------------------------------------------
'''
904.
'''
--------------------------------------------------------------------------------------------------------------
'''
905.
'''
--------------------------------------------------------------------------------------------------------------
'''
906.
'''
--------------------------------------------------------------------------------------------------------------
'''
907.
'''
--------------------------------------------------------------------------------------------------------------
'''
908.
'''
--------------------------------------------------------------------------------------------------------------
'''
909.
'''
--------------------------------------------------------------------------------------------------------------
'''
910.
'''
--------------------------------------------------------------------------------------------------------------
'''
911.
'''
--------------------------------------------------------------------------------------------------------------
'''
912.
'''
--------------------------------------------------------------------------------------------------------------
'''
913.
'''
--------------------------------------------------------------------------------------------------------------
'''
914.
'''
--------------------------------------------------------------------------------------------------------------
'''
915.
'''
--------------------------------------------------------------------------------------------------------------
'''
916.
'''
--------------------------------------------------------------------------------------------------------------
'''
917.
'''
--------------------------------------------------------------------------------------------------------------
'''
918.
'''
--------------------------------------------------------------------------------------------------------------
'''
919.
'''
--------------------------------------------------------------------------------------------------------------
'''
920.
'''
--------------------------------------------------------------------------------------------------------------
'''
921.
'''
--------------------------------------------------------------------------------------------------------------
'''
922.
'''
--------------------------------------------------------------------------------------------------------------
'''
923.
'''
--------------------------------------------------------------------------------------------------------------
'''
924.
'''
--------------------------------------------------------------------------------------------------------------
'''
925.
'''
--------------------------------------------------------------------------------------------------------------
'''
926.
'''
--------------------------------------------------------------------------------------------------------------
'''
927.
'''
--------------------------------------------------------------------------------------------------------------
'''
928.
'''
--------------------------------------------------------------------------------------------------------------
'''
929.
'''
--------------------------------------------------------------------------------------------------------------
'''
930.
'''
--------------------------------------------------------------------------------------------------------------
'''
931.
'''
--------------------------------------------------------------------------------------------------------------
'''
932.
'''
--------------------------------------------------------------------------------------------------------------
'''
933.
'''
--------------------------------------------------------------------------------------------------------------
'''
934.
'''
--------------------------------------------------------------------------------------------------------------
'''
935.
'''
--------------------------------------------------------------------------------------------------------------
'''
936.
'''
--------------------------------------------------------------------------------------------------------------
'''
937.
'''
--------------------------------------------------------------------------------------------------------------
'''
938.
'''
--------------------------------------------------------------------------------------------------------------
'''
939.
'''
--------------------------------------------------------------------------------------------------------------
'''
940.
'''
--------------------------------------------------------------------------------------------------------------
'''
941.
'''
--------------------------------------------------------------------------------------------------------------
'''
942.
'''
--------------------------------------------------------------------------------------------------------------
'''
943.
'''
--------------------------------------------------------------------------------------------------------------
'''
944.
'''
--------------------------------------------------------------------------------------------------------------
'''
945.
'''
--------------------------------------------------------------------------------------------------------------
'''
946.
'''
--------------------------------------------------------------------------------------------------------------
'''
947.
'''
--------------------------------------------------------------------------------------------------------------
'''
948.
'''
--------------------------------------------------------------------------------------------------------------
'''
949.
'''
--------------------------------------------------------------------------------------------------------------
'''
950.
'''
--------------------------------------------------------------------------------------------------------------
'''
951.
'''
--------------------------------------------------------------------------------------------------------------
'''
952.
'''
--------------------------------------------------------------------------------------------------------------
'''
953.
'''
--------------------------------------------------------------------------------------------------------------
'''
954.
'''
--------------------------------------------------------------------------------------------------------------
'''
955.
'''
--------------------------------------------------------------------------------------------------------------
'''
956.
'''
--------------------------------------------------------------------------------------------------------------
'''
957.
'''
--------------------------------------------------------------------------------------------------------------
'''
958.
'''
--------------------------------------------------------------------------------------------------------------
'''
959.
'''
--------------------------------------------------------------------------------------------------------------
'''
960.
'''
--------------------------------------------------------------------------------------------------------------
'''
961.
'''
--------------------------------------------------------------------------------------------------------------
'''
962.
'''
--------------------------------------------------------------------------------------------------------------
'''
963.
'''
--------------------------------------------------------------------------------------------------------------
'''
964.
'''
--------------------------------------------------------------------------------------------------------------
'''
965.
'''
--------------------------------------------------------------------------------------------------------------
'''
966.
'''
--------------------------------------------------------------------------------------------------------------
'''
967.
'''
--------------------------------------------------------------------------------------------------------------
'''
968.
'''
--------------------------------------------------------------------------------------------------------------
'''
969.
'''
--------------------------------------------------------------------------------------------------------------
'''
970.
'''
--------------------------------------------------------------------------------------------------------------
'''
971.
'''
--------------------------------------------------------------------------------------------------------------
'''
972.
'''
--------------------------------------------------------------------------------------------------------------
'''
973.
'''
--------------------------------------------------------------------------------------------------------------
'''
974.
'''
--------------------------------------------------------------------------------------------------------------
'''
975.
'''
--------------------------------------------------------------------------------------------------------------
'''
976.
'''
--------------------------------------------------------------------------------------------------------------
'''
977.
'''
--------------------------------------------------------------------------------------------------------------
'''
978.
'''
--------------------------------------------------------------------------------------------------------------
'''
979.
'''
--------------------------------------------------------------------------------------------------------------
'''
980.
'''
--------------------------------------------------------------------------------------------------------------
'''
981.
'''
--------------------------------------------------------------------------------------------------------------
'''
982.
'''
--------------------------------------------------------------------------------------------------------------
'''
983.
'''
--------------------------------------------------------------------------------------------------------------
'''
984.
'''
--------------------------------------------------------------------------------------------------------------
'''
985.
'''
--------------------------------------------------------------------------------------------------------------
'''
986.
'''
--------------------------------------------------------------------------------------------------------------
'''
987.
'''
--------------------------------------------------------------------------------------------------------------
'''
988.
'''
--------------------------------------------------------------------------------------------------------------
'''
989.
'''
--------------------------------------------------------------------------------------------------------------
'''
990.
'''
--------------------------------------------------------------------------------------------------------------
'''
991.
'''
--------------------------------------------------------------------------------------------------------------
'''
992.
'''
--------------------------------------------------------------------------------------------------------------
'''
993.
'''
--------------------------------------------------------------------------------------------------------------
'''
994.
'''
--------------------------------------------------------------------------------------------------------------
'''
995.
'''
--------------------------------------------------------------------------------------------------------------
'''
996.
'''
--------------------------------------------------------------------------------------------------------------
'''
997.
'''
--------------------------------------------------------------------------------------------------------------
'''
998.
'''
--------------------------------------------------------------------------------------------------------------
'''
999.
'''
--------------------------------------------------------------------------------------------------------------
'''
1000.
'''
--------------------------------------------------------------------------------------------------------------

